<!DOCTYPE HTML>
<!-- saved from url=(0078)http://mooc.cs.helsinki.fi/programming-part1/material-2013/week-2 -->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd"><HTML 
lang="en" lang="en" xml:lang="en" 
xmlns="http://www.w3.org/1999/xhtml"><HEAD><META content="IE=11.0000" 
http-equiv="X-UA-Compatible">
 
<META http-equiv="Content-Type" content="text/html; charset=utf-8">   
<TITLE>MOOC | MOOC - Massiivinen avoin verkkokurssi</TITLE>    <LINK href="/sites/mooc.cs.helsinki.fi/files/acquia_marina_favicon.png" 
rel="shortcut icon" type="image/x-icon">   <LINK href="Loop%20and%20basic%20method_files/5c1587b6907a85bc361bd4b70014b0e3.css" 
rel="stylesheet" type="text/css" media="all"> <LINK href="Loop%20and%20basic%20method_files/node.css" 
rel="stylesheet" type="text/css" media="all"> <LINK href="Loop%20and%20basic%20method_files/defaults.css" 
rel="stylesheet" type="text/css" media="all"> <LINK href="Loop%20and%20basic%20method_files/system.css" 
rel="stylesheet" type="text/css" media="all"> <LINK href="Loop%20and%20basic%20method_files/system-menus.css" 
rel="stylesheet" type="text/css" media="all"> <LINK href="Loop%20and%20basic%20method_files/user.css" 
rel="stylesheet" type="text/css" media="all"> <LINK href="Loop%20and%20basic%20method_files/content-module.css" 
rel="stylesheet" type="text/css" media="all"> <LINK href="Loop%20and%20basic%20method_files/ckeditor.css" 
rel="stylesheet" type="text/css" media="all"> <LINK href="Loop%20and%20basic%20method_files/ctools.css" 
rel="stylesheet" type="text/css" media="all"> <LINK href="Loop%20and%20basic%20method_files/date.css" 
rel="stylesheet" type="text/css" media="all"> <LINK href="Loop%20and%20basic%20method_files/panels.css" 
rel="stylesheet" type="text/css" media="all"> <LINK href="Loop%20and%20basic%20method_files/views.css" 
rel="stylesheet" type="text/css" media="all"> <LINK href="Loop%20and%20basic%20method_files/aeb58e3ce47f9171327ad9fd87a26c8e.css" 
rel="stylesheet" type="text/css" media="all"> <LINK href="Loop%20and%20basic%20method_files/flexible.css" 
rel="stylesheet" type="text/css" media="all"> <LINK href="Loop%20and%20basic%20method_files/style.css" 
rel="stylesheet" type="text/css" media="all"> <LINK href="Loop%20and%20basic%20method_files/typography.css" 
rel="stylesheet" type="text/css" media="all"> <LINK href="Loop%20and%20basic%20method_files/superfish.css" 
rel="stylesheet" type="text/css" media="all"> <LINK href="Loop%20and%20basic%20method_files/superfish-navbar.css" 
rel="stylesheet" type="text/css" media="all"> <LINK href="Loop%20and%20basic%20method_files/superfish-vertical.css" 
rel="stylesheet" type="text/css" media="all"> <LINK href="Loop%20and%20basic%20method_files/fusion-acquia-marina-style.css" 
rel="stylesheet" type="text/css" media="all"> <LINK href="Loop%20and%20basic%20method_files/custom.css" 
rel="stylesheet" type="text/css" media="all"> <LINK href="Loop%20and%20basic%20method_files/common.css" 
rel="stylesheet" type="text/css" media="all"> <LINK href="Loop%20and%20basic%20method_files/exercises.css" 
rel="stylesheet" type="text/css" media="all"> <LINK href="Loop%20and%20basic%20method_files/menu.css" 
rel="stylesheet" type="text/css" media="all"> <LINK href="Loop%20and%20basic%20method_files/sh_style.css" 
rel="stylesheet" type="text/css" media="all">   <LINK href="Loop%20and%20basic%20method_files/grid16-fluid.css" 
rel="stylesheet" type="text/css" media="all">   <!--[if IE 8]>
  <link type="text/css" rel="stylesheet" media="all" href="/sites/all/themes/fusion/fusion_core/css/ie8-fixes.css?8" />
<link type="text/css" rel="stylesheet" media="all" href="/sites/all/themes/acquia_marina/css/ie8-fixes.css?8" />
  <![endif]--> 
  <!--[if IE 7]>
  <link type="text/css" rel="stylesheet" media="all" href="/sites/all/themes/fusion/fusion_core/css/ie7-fixes.css?8" />
<link type="text/css" rel="stylesheet" media="all" href="/sites/all/themes/acquia_marina/css/ie7-fixes.css?8" />
  <![endif]--> 
  <!--[if lte IE 6]>
  <link type="text/css" rel="stylesheet" media="all" href="/sites/all/themes/fusion/fusion_core/css/ie6-fixes.css?8"/>
<link type="text/css" rel="stylesheet" media="all" href="/sites/all/themes/acquia_marina/css/ie6-fixes.css?8"/>
  <![endif]--> 
    
<SCRIPT src="Loop%20and%20basic%20method_files/jquery.js" type="text/javascript"></SCRIPT>
 
<SCRIPT src="Loop%20and%20basic%20method_files/drupal.js" type="text/javascript"></SCRIPT>
 
<SCRIPT src="Loop%20and%20basic%20method_files/panels.js" type="text/javascript"></SCRIPT>
 
<SCRIPT src="Loop%20and%20basic%20method_files/jquery.bgiframe.min.js" type="text/javascript"></SCRIPT>
 
<SCRIPT src="Loop%20and%20basic%20method_files/hoverIntent.js" type="text/javascript"></SCRIPT>
 
<SCRIPT src="Loop%20and%20basic%20method_files/supposition.js" type="text/javascript"></SCRIPT>
 
<SCRIPT src="Loop%20and%20basic%20method_files/supersubs.js" type="text/javascript"></SCRIPT>
 
<SCRIPT src="Loop%20and%20basic%20method_files/superfish.js" type="text/javascript"></SCRIPT>
 
<SCRIPT src="Loop%20and%20basic%20method_files/script.js" type="text/javascript"></SCRIPT>
 
<SCRIPT src="Loop%20and%20basic%20method_files/jquery.corner.js" type="text/javascript"></SCRIPT>
 
<SCRIPT src="Loop%20and%20basic%20method_files/acquia-marina-script.js" type="text/javascript"></SCRIPT>
 
<SCRIPT src="Loop%20and%20basic%20method_files/util-functions.js" type="text/javascript"></SCRIPT>
 
<SCRIPT src="Loop%20and%20basic%20method_files/clear-default-text.js" type="text/javascript"></SCRIPT>
 
<SCRIPT src="Loop%20and%20basic%20method_files/sh_java.min.js" type="text/javascript"></SCRIPT>
 
<SCRIPT src="Loop%20and%20basic%20method_files/sh_main.min.js" type="text/javascript"></SCRIPT>
 
<SCRIPT src="Loop%20and%20basic%20method_files/sh_ruby.min.js" type="text/javascript"></SCRIPT>
 
<SCRIPT src="Loop%20and%20basic%20method_files/sh_scala.min.js" type="text/javascript"></SCRIPT>
 
<SCRIPT type="text/javascript">
<!--//--><![CDATA[//><!--
jQuery.extend(Drupal.settings, { "basePath": "/" });
//--><!]]>
</SCRIPT>
 
<META name="GENERATOR" content="MSHTML 11.00.9600.18163"></HEAD>
<BODY class="not-front not-logged-in page-node node-type-weekly-tasks no-sidebars full-node panels layout-main sidebars-both-first font-family-lucida font-size-13 grid-type-fluid grid-width-16 fluid-100" 
id="pid-programming-part1-material-2013-week-2">   
<DIV class="page" id="page">
<DIV class="page-inner" id="page-inner">
<DIV id="skip"><A href="http://mooc.cs.helsinki.fi/programming-part1/material-2013/week-2?noredirect=1#main-content-area">Skip 
to Main Content Area</A>       </DIV><!-- header-top row: width = grid_width --> 
            <!-- header-group row: width = grid_width -->       
<DIV class="header-group-wrapper full-width" id="header-group-wrapper">
<DIV class="header-group row grid16-16" id="header-group">
<DIV class="header-group-inner inner clearfix" id="header-group-inner">
<DIV class="primary-menu block" id="primary-menu">
<DIV class="primary-menu-inner inner clearfix" id="primary-menu-inner">
<UL class="menu sf-menu">
  <LI class="expanded first"><A title="" 
  href="http://mooc.cs.helsinki.fi/home">Kurssit ››</A>
  <UL class="menu">
    <LI class="leaf first"><A title="" 
    href="http://mooc.fi/algoritmit">Algoritmien MOOC</A></LI>
    <LI class="leaf"><A title="" href="http://mooc.cs.helsinki.fi/2014-ohjelmointi">Olio-ohjelmointi 
    Javalla</A></LI>
    <LI class="leaf"><A title="" 
    href="http://mooc.aalto.fi/ohjelmointi/">Ohjelmointia Scalalla</A></LI>
    <LI class="leaf"><A title="" 
    href="http://mooc.fi/programming-part1">Object-Oriented Programming with 
    Java, part I</A></LI>
    <LI class="leaf"><A title="" 
    href="http://mooc.fi/programming-part2">Object-Oriented Programming with 
    Java, part II</A></LI>
    <LI class="leaf last"><A title="" 
    href="http://mooc.cs.helsinki.fi/wepa">Web-palvelinohjelmointi</A></LI></UL></LI>
  <LI class="collapsed"><A title="Mikä on MOOC?" href="http://mooc.cs.helsinki.fi/content/mik%C3%A4-mooc">Mikä 
  on MOOC? ››</A></LI>
  <LI class="leaf last"><A title="" href="http://mooc.cs.helsinki.fi/content/j%C3%A4rjest%C3%A4v%C3%A4st%C3%A4-tahosta">Järjestävästä 
  tahosta ››</A></LI></UL></DIV><!-- /primary-menu-inner --> </DIV><!-- /primary-menu --> 
          </DIV><!-- /header-group-inner -->         </DIV><!-- /header-group --> 
      </DIV><!-- /header-group-wrapper -->       <!-- preface-top row: width = grid_width --> 
        <!--            <div id="preface-top-wrapper" class="preface-top-wrapper full-width">
        <div id="preface-top" class="preface-top row grid16-16">
          <div id="preface-top-inner" class="preface-top-inner inner clearfix"> 
--> 
          </DIV><!-- /preface-top-inner -->         </DIV><!-- /preface-top -->  
     <!-- /preface-top-wrapper -->           <!-- main row: width = grid_width --> 
    
<DIV class="main-wrapper full-width" id="main-wrapper">
<DIV class="main row grid16-16" id="main">
<DIV class="main-inner inner clearfix" id="main-inner"><!-- main group: width = grid_width - sidebar_first_width --> 
          
<DIV class="main-group row nested grid16-16" id="main-group">
<DIV class="main-group-inner inner clearfix" id="main-group-inner">
<DIV class="main-content row nested" id="main-content">
<DIV class="main-content-inner inner clearfix" id="main-content-inner"><!-- content group: width = grid_width - (sidebar_first_width + sidebar_last_width) --> 
                    
<DIV class="content-group row nested " id="content-group" style="width: 100%;">
<DIV class="content-group-inner inner clearfix" id="content-group-inner">
<DIV class="content-region row nested" id="content-region">
<DIV class="content-region-inner inner clearfix" id="content-region-inner"><A 
name="main-content-area" id="main-content-area"></A>                             
                            
<DIV class="content-inner block" id="content-inner">
<DIV class="content-inner-inner inner clearfix" id="content-inner-inner">
<DIV class="content-content" id="content-content">
<DIV class="panel-flexible panels-flexible-13 clear-block">
<DIV class="panel-flexible-inside panels-flexible-13-inside">
<DIV class="panels-flexible-row panels-flexible-row-13-7 panels-flexible-row-first clear-block ">
<DIV class="inside panels-flexible-row-inside panels-flexible-row-13-7-inside panels-flexible-row-inside-first clear-block">
<DIV class="panels-flexible-region panels-flexible-region-13-js_ panels-flexible-region-first panels-flexible-region-last ">
<DIV class="inside panels-flexible-region-inside panels-flexible-region-13-js_-inside panels-flexible-region-inside-first panels-flexible-region-inside-last">
<DIV class="panel-pane pane-custom pane-2 ">
<DIV class="inner">
<DIV class="corner-top">
<DIV class="corner-top-right corner"></DIV>
<DIV class="corner-top-left corner"></DIV></DIV>
<DIV class="inner-wrapper">
<DIV class="inner-inner">
<DIV class="pane-content content">
<H1 class="title"><A 
href="http://mooc.cs.helsinki.fi/programming-part1">Object-Oriented Programming 
with Java, part I ››</A></H1></DIV></DIV><!-- /inner-inner -->	   </DIV><!-- /inner-wrapper --> 
    
<DIV class="corner-bottom">
<DIV class="corner-bottom-right corner"></DIV>
<DIV class="corner-bottom-left corner"></DIV></DIV></DIV><!-- /inner --> </DIV><!-- /block -->
<DIV class="panel-region-separator"></DIV>
<DIV class="panel-pane pane-custom pane-3 ">
<DIV class="inner">
<DIV class="corner-top">
<DIV class="corner-top-right corner"></DIV>
<DIV class="corner-top-left corner"></DIV></DIV>
<DIV class="inner-wrapper">
<DIV class="inner-inner">
<DIV class="pane-content content"><LINK href="Loop%20and%20basic%20method_files/menu(1).css" 
rel="stylesheet" type="text/css" media="screen"> <LINK href="Loop%20and%20basic%20method_files/common-new.css" 
rel="stylesheet" type="text/css" media="screen, print"> <LINK href="Loop%20and%20basic%20method_files/sh_style(1).css" 
rel="stylesheet" type="text/css" media="screen, print">        </DIV></DIV><!-- /inner-inner -->
	   </DIV><!-- /inner-wrapper -->     
<DIV class="corner-bottom">
<DIV class="corner-bottom-right corner"></DIV>
<DIV class="corner-bottom-left corner"></DIV></DIV></DIV><!-- /inner --> </DIV><!-- /block --> 
 </DIV></DIV></DIV></DIV>
<DIV class="panels-flexible-row panels-flexible-row-13-4 clear-block js">
<DIV class="inside panels-flexible-row-inside panels-flexible-row-13-4-inside clear-block">
<DIV class="panels-flexible-region panels-flexible-region-13-js_en_ panels-flexible-region-first ">
<DIV class="inside panels-flexible-region-inside panels-flexible-region-13-js_en_-inside panels-flexible-region-inside-first"></DIV></DIV>
<DIV class="panels-flexible-region panels-flexible-region-13-js ">
<DIV class="inside panels-flexible-region-inside panels-flexible-region-13-js-inside">
<DIV class="panel-pane pane-node ">
<DIV class="inner">
<DIV class="corner-top">
<DIV class="corner-top-right corner"></DIV>
<DIV class="corner-top-left corner"></DIV></DIV>
<DIV class="inner-wrapper">
<DIV class="inner-inner">
<DIV class="pane-content content">
<DIV class="node odd full-node node-type-page" id="node-222">
<DIV class="inner">
<H2 class="title"><A title="" 
href="http://mooc.cs.helsinki.fi/content/js-en"></A></H2>
<DIV class="content clearfix">
<SCRIPT src="Loop%20and%20basic%20method_files/bootstrap.min.js" type="text/javascript"></SCRIPT>
 
<SCRIPT src="Loop%20and%20basic%20method_files/jquery-1.7.1.min.js" type="text/javascript"></SCRIPT>
 
<SCRIPT src="Loop%20and%20basic%20method_files/exercises-eng-new.js" type="text/javascript"></SCRIPT>
 
<SCRIPT src="Loop%20and%20basic%20method_files/common-mooc-eng.js" type="text/javascript"></SCRIPT>
 
<SCRIPT src="Loop%20and%20basic%20method_files/sh_main.min(1).js" type="text/javascript"></SCRIPT>
 
<SCRIPT src="Loop%20and%20basic%20method_files/sh_java.min(1).js" type="text/javascript"></SCRIPT>
 
<SCRIPT src="Loop%20and%20basic%20method_files/jquery.easing.js" type="text/javascript"></SCRIPT>
 
<DIV class="menu" id="toc" data-first-exercise-index="1" 
data-first-chapter-index="1"><SPAN id="materiaali_toc"></SPAN>           <!--div id="tehtavat_toc" ></div--> 
          <SPAN id="tehtavat_toc2"></SPAN>         </DIV></DIV></DIV><!-- /inner --> 
  </DIV><!-- /node-222 -->         </DIV></DIV><!-- /inner-inner -->	   </DIV><!-- /inner-wrapper --> 
    
<DIV class="corner-bottom">
<DIV class="corner-bottom-right corner"></DIV>
<DIV class="corner-bottom-left corner"></DIV></DIV></DIV><!-- /inner --> </DIV><!-- /block --> 
 </DIV></DIV>
<DIV class="panels-flexible-region panels-flexible-region-13-copyright panels-flexible-region-last float-right">
<DIV class="inside panels-flexible-region-inside panels-flexible-region-13-copyright-inside panels-flexible-region-inside-last">
<DIV class="panel-pane pane-custom pane-1 box ">
<DIV class="inner">
<DIV class="corner-top">
<DIV class="corner-top-right corner"></DIV>
<DIV class="corner-top-left corner"></DIV></DIV>
<DIV class="inner-wrapper">
<DIV class="inner-inner">
<DIV class="pane-content content">
<P><A href="http://creativecommons.org/licenses/by-nc-sa/2.0/" 
rel="license"><IMG style="border-width: 0px; float: right;" alt="Creative Commons License" 
src="Loop%20and%20basic%20method_files/88x31.png"></A><SMALL>This material is 
licensed under the Creative Commons BY-NC-SA license, which means that you can 
use it and distribute it freely so long as you do not erase the names of the 
original authors. If you do changes in the material and want to distribute this 
altered version of the material, you have to license it with a similar free 
license. The use of the material for commercial use is prohibited without a 
separate agreement.</SMALL></P></DIV></DIV><!-- /inner-inner -->	   </DIV><!-- /inner-wrapper --> 
    
<DIV class="corner-bottom">
<DIV class="corner-bottom-right corner"></DIV>
<DIV class="corner-bottom-left corner"></DIV></DIV></DIV><!-- /inner --> </DIV><!-- /block -->
<DIV class="panel-region-separator"></DIV>
<DIV class="panel-pane pane-content-field pane-field-author course-menu ">
<DIV class="inner">
<DIV class="corner-top">
<DIV class="corner-top-right corner"></DIV>
<DIV class="corner-top-left corner"></DIV></DIV>
<DIV class="inner-wrapper">
<DIV class="inner-inner">
<DIV class="pane-content content">
<DIV class="field field-type-text field-field-author">
<DIV class="field-items">
<DIV class="field-item odd">                    Authors: Arto Vihavainen, Matti 
Luukkainen        </DIV></DIV></DIV></DIV></DIV><!-- /inner-inner -->	   </DIV><!-- /inner-wrapper --> 
    
<DIV class="corner-bottom">
<DIV class="corner-bottom-right corner"></DIV>
<DIV class="corner-bottom-left corner"></DIV></DIV></DIV><!-- /inner --> </DIV><!-- /block -->
<DIV class="panel-region-separator"></DIV>
<DIV class="panel-pane pane-content-field pane-field-translators course-menu ">
<DIV class="inner">
<DIV class="corner-top">
<DIV class="corner-top-right corner"></DIV>
<DIV class="corner-top-left corner"></DIV></DIV>
<DIV class="inner-wrapper">
<DIV class="inner-inner">
<DIV class="pane-content content">
<DIV class="field field-type-text field-field-translators">
<DIV class="field-items">
<DIV class="field-item odd">                    Translators to English: Emilia 
Hjelm, Alex H. Virtanen, Matti Luukkainen, Virpi Sumu, Birunthan Mohanathas      
  </DIV></DIV></DIV></DIV></DIV><!-- /inner-inner -->	   </DIV><!-- /inner-wrapper --> 
    
<DIV class="corner-bottom">
<DIV class="corner-bottom-right corner"></DIV>
<DIV class="corner-bottom-left corner"></DIV></DIV></DIV><!-- /inner --> </DIV><!-- /block --> 
 </DIV></DIV></DIV></DIV>
<DIV class="panels-flexible-row panels-flexible-row-13-8 panels-flexible-row-last clear-block js en">
<DIV class="inside panels-flexible-row-inside panels-flexible-row-13-8-inside panels-flexible-row-inside-last clear-block">
<DIV class="panels-flexible-region panels-flexible-region-13-js_en panels-flexible-region-first panels-flexible-region-last ">
<DIV class="inside panels-flexible-region-inside panels-flexible-region-13-js_en-inside panels-flexible-region-inside-first panels-flexible-region-inside-last">
<DIV class="panel-pane pane-node-content box-mooc ">
<DIV class="inner">
<DIV class="corner-top">
<DIV class="corner-top-right corner"></DIV>
<DIV class="corner-top-left corner"></DIV></DIV>
<DIV class="inner-wrapper">
<DIV class="inner-inner">
<DIV class="pane-content content">
<DIV class="node even full-node node-type-weekly_tasks" id="node-232">
<DIV class="inner">
<DIV class="content clearfix">
<DIV class="viikkoraja-mooc" id="Week 2" data-first-exercise-index="25" 
data-first-chapter-index="11" kaantaja="Emilia Hjelm, Alex H. Virtanen, Matti Luukkainen, Virpi Sumu, Birunthan Mohanathas" 
tekija="Arto Vihavainen, Matti Luukkainen" data-first-week-index-mooc="2" 
data-first-exercise-index-mooc="25" data-first-chapter-index-mooc="10" 
data-first-week-index="2" unlock="unlocks when 85% of week 1 done" deadline="unlocks when 85% of week 1 done">
<H2>Changing variables</H2>
<P>We usually want to change the value of an existing variable. This can be done 
using the normal    assignment statement. In the next example, we increase the 
value of the variable <CODE>age</CODE> by    one:</P>
<PRE class="sh_java">int age = 1;

System.out.println(age);  // prints 1
age = age + 1;            // the new value of age is the old value of age + 1
System.out.println(age);  // prints 2
    </PRE>
<P>The <CODE>age = age + 1</CODE> statement increments the value of the variable 
<CODE>age</CODE> by one.    It is also possible to increment a variable by one 
as bellow:</P>
<PRE class="sh_java">int age = 1;

System.out.println(age);  // prints 1
age++;                    // means the same as age = age + 1
System.out.println(age);  // prints 2
    </PRE>
<P>Another example:</P>
<PRE class="sh_java">int length = 100;

System.out.println(length);  // prints 100
length = length - 50;
System.out.println(length);  // prints 50
length = length * 2;
System.out.println(length);  // prints 100
length = length / 4;
System.out.println(length);  // prints 25
length--;                    // means the same as length = length - 1;
System.out.println(length);  // prints 24
    </PRE>
<DIV class="tehtavat" id="viikko2">
<DIV class="tehtava">
<H3>Sum of three numbers</H3>
<P>Create a program that asks the user for three numbers and then prints their 
sum. Use the        following structure in your program:</P>
<PRE class="sh_java">Scanner reader = new Scanner(System.in);
int sum = 0;
int read;

// WRITE YOUR PROGRAM HERE
// USE ONLY THE VARIABLES sum, reader AND read!

System.out.println("Sum: " + sum);
        </PRE>
<PRE>Type the first number: <FONT color="red">3</FONT>
Type the second number: <FONT color="red">6</FONT>
Type the third number: <FONT color="red">12</FONT>

Sum: 21
        </PRE></DIV>
<DIV class="tehtava">
<H3>Sum of many numbers</H3>
<P>Create a program that reads numbers from the user and prints their sum. The 
program should stop        asking for numbers when user enters the number 0. The 
program should be structured like this:</P>
<PRE class="sh_java">Scanner reader = new Scanner(System.in);
int sum = 0;
while (true) {
    int read = Integer.parseInt(reader.nextLine());
    if (read == 0) {
        break;
    }

    // DO SOMETHING HERE

    System.out.println("Sum now: " + sum);
}

System.out.println("Sum in the end: " + sum);
        </PRE>
<P>The program should work as follows:</P>
<PRE><FONT color="red">3</FONT>
Sum now: 3
<FONT color="red">2</FONT>
Sum now: 5
<FONT color="red">1</FONT>
Sum now: 6
<FONT color="red">1</FONT>
Sum now: 7
<FONT color="red">0</FONT>
Sum in the end: 7
        </PRE></DIV></DIV>
<H2 id="lisaa_toistoa">More loops</H2>
<P>we have previously learned to use repetition using the <CODE>while 
(true)</CODE> loop, which repeats    commands until the <CODE>break</CODE> 
command is used.</P>
<P>The <CODE>break</CODE> command is not the only way to end a loop. A common 
structure for a loop    is <CODE>while (condition)</CODE>, where the condition 
can be any statement with a truth    value. This means that the condition works 
exactly like conditions in an <CODE>if</CODE> statements.</P>
<P>In the following example, we print the numbers 1, 2, …, 10. When the value of 
the variable     <CODE>number</CODE> increases above 10, the condition of the 
<CODE>while</CODE> statement is no longer    true and the loop ends.</P>
<PRE class="sh_java">int number = 1;

while (number &lt; 11) {
    System.out.println(number);
    number++;  // number++ means the same as number = number + 1
}
    </PRE>
<P>The example above can be read "as long as the variable number is less than 
11, print the variable and    increment it by one".</P>
<P>Above, the variable <CODE>number</CODE> was incremented in each iteration of 
the loop. Generally the change can be    anything, meaning that the variable 
used in the condition does not always need to be incremented. For    
example:</P>
<PRE class="sh_java">int number = 1024;

while (number &gt;= 1) {
    System.out.println(number);
    number = number / 2;
}
    </PRE><!-- screencast --> 
    
<DIV><BIG><BIG><B>A few programming-part1 tips</B></BIG></BIG>       
<UL>
  <LI>You can find all the NetBeans tips <A href="http://mooc.fi/courses/general/programming/#netbeans-tips">here</A>.</LI>
  <LI><B>Auto-completion of your code</B>         
  <P>If you have, for example, the variable <CODE>String familyName;</CODE> in 
  your code, you do        not need to always write <CODE>familyName</CODE>. Try 
  what happens when you type in         <CODE>f</CODE> and then press CTRL and 
  space simultaneously. You can also use auto-completion        with commands 
  like <CODE>while</CODE> by typing in <CODE>w</CODE> and then CTRL + 
  space.</P></LI>
  <LI><B>sout</B>         
  <P>Remember that you can get the text <EM>System.out.println("")</EM> by 
  typing         <EM>sout</EM> and pressing the <EM>tab</EM> key (located to the 
  left of the q key)</P></LI></UL></DIV>
<DIV class="tehtavat">
<P>Complete the following exercises using the <CODE>while</CODE> statement:</P>
<DIV class="tehtava">
<H3 class="req">From one to a hundred</H3>
<P>Create a program that prints the integers (whole numbers) from 1 to 100.</P>
<P>The program output should be:</P>
<PRE>1
2
3
(many rows of numbers here)
98
99
100
        </PRE></DIV>
<DIV class="tehtava">
<H3 class="req">From hundred to one</H3>
<P>Create a program that prints the integers (whole numbers) from 100 to 1.</P>
<P>The program output should be:</P>
<PRE>100
99
98
(many rows of numbers here)
3
2
1
        </PRE>
<P><B>Tip:</B> Assign the variable you use in the condition of the loop a 
initial value of 100 and        then subtract one on each iteration of the 
loop.</P></DIV>
<DIV class="tehtava">
<H3 class="req">Even numbers</H3>
<P>Create a program that prints all even numbers between 2 and 100.</P>
<PRE>2
4
6
(many rows of numbers here)
96
98
100
        </PRE></DIV>
<DIV class="tehtava">
<H3 class="req">Up to a certain number</H3>
<P>Create a program that prints all whole numbers from 1 to the number the user 
enters.</P>
<PRE>Up to what number? <FONT color="red">3</FONT>
1
2
3
        </PRE>
<PRE>Up to what number? <FONT color="red">5</FONT>
1
2
3
4
5
        </PRE>
<P><B>Tip:</B> The number you read from the user now works as the upper limit in 
the condition of        the <CODE>while</CODE> statement. Remember that in Java 
<CODE>a &lt;= b</CODE> means <EM>a is less          than or equal to 
b</EM>.</P></DIV>
<DIV class="tehtava">
<H3>Lower limit and upper limit</H3>
<P>Create a program that asks the user for the first number and the last number 
and then prints all        numbers between those two.</P>
<PRE>First: <FONT color="red">5</FONT>
Last: <FONT color="red">8</FONT>
5
6
7
8
        </PRE>
<P>If the first number is greater than the last number, the program prints 
nothing:</P>
<PRE>First: <FONT color="red">16</FONT>
Last: <FONT color="red">12</FONT>
        </PRE>
<P><B>Note:</B> Remember that the lower and upper limits can also be 
negative!</P></DIV></DIV>
<H3>Assignment operations</H3>
<P>Because changing the value of a variable is a very common operation, Java has 
special assignment    operations for it.</P>
<PRE class="sh_java">int length = 100;

length += 10;  // same as length = length + 10;
length -= 50;  // same as length = length - 50;
    </PRE>
<P>When performing the assignment operation on an existing variable, it is 
written as     <CODE>variable operation= change</CODE>, for example 
<CODE>variable += 5</CODE>. Note that a variable must    be defined before you 
can assign a value to it. Defining a variable is done by specifying the variable 
   type and the name of the variable.</P>
<P>The following example will not work because the type of the variable 
<CODE>length</CODE> has not been    defined.</P>
<PRE class="sh_java">length = length + 100;  // error!
length += 100;          // error!
    </PRE>
<P>When the type is defined, the operations will also work.</P>
<PRE class="sh_java">int length = 0;
length = length + 100;
length += 100;

// the variable length now holds the value 200
    </PRE>
<P>There are also other assignment operations:</P>
<PRE class="sh_java">int length = 100;

length *= 10;   // same as length = length * 10;
length /= 100;  // same as length = length / 100;
length %= 3;    // same as length = length % 3;

// the variable length now holds the value 1
    </PRE>
<P>Often during a loop, the value of a variable is calculated based on 
repetition. The following program    calculates 3*4 somewhat clumsily as the sum 
3+3+3+3:</P>
<PRE class="sh_java">int result = 0;

int i = 0;
while (i &lt; 4) {
   result = result + 3;
   i++;  // means the same as i = i + 1;
}
    </PRE>
<P>In the beginning <CODE>result = 0</CODE>. During the loop, the value of the 
variable is incremented    by 3 on each iteration. Because there are 4 
iterations, the value of the variable is 3*4 in the end.</P>
<P>Using the assignment operator introduced above, we can achieve the same 
behavior as follows:</P>
<PRE class="sh_java">int result = 0;

int i = 0;
while (i &lt; 4) {
   result += 3;  // this is the same as result = result + 3;
   i++;          // means the same as i = i+1;
}
    </PRE>
<DIV class="tehtavat">
<DIV class="tehtava">
<H3 class="req">The sum of a set of numbers</H3>
<P>Create a program that calculates the sum 1+2+3+…+n where n is a number 
entered by the user.</P>
<P>Example outputs:</P>
<PRE>Until what? <FONT color="red">3</FONT>
Sum is 6
        </PRE>
<P>The calculation above was: 1+2+3 = 6.       </P>
<PRE>Until what? <FONT color="red">7</FONT>
Sum is 28
      </PRE>
<P>The calculation above was: 1+2+3+4+5+6+7 = 28.     </P>
<P><B>Hint:</B> Create the program using the <CODE>while</CODE> statement. Use a 
helper variable    in your program to remember how many times the block has been 
executed. Use also another    helper variable to store the sum. During each 
execution add the value of the helper variable that    counts the executions to 
the variable in which you should collect the sum.</P></DIV>
<DIV class="tehtava">
<H3 class="req">The sum between two numbers</H3>
<P>Similar to the previous exercise, except that the program should ask for both 
the lower and    upper bound. You can assume that the users first gives the 
smaller number and then the greater    number.</P>
<P>Example outputs:</P>
<PRE>First: <FONT color="red">3</FONT>
Last: <FONT color="red">5</FONT>
The sum 12
    </PRE>
<PRE>First: <FONT color="red">2</FONT>
Last: <FONT color="red">8</FONT>
The sum is 35
    </PRE></DIV>
<DIV class="tehtava">
<H3>Factorial</H3>
<P>Create a program that calculates the factorial of the number n. The factorial 
n! is calculated    using the formula 1*2*3*...*n. For example 4! = 1*2*3*4 = 
24. Additionally, it is defined that    0! = 1.</P>
<P>Example outputs:</P>
<PRE>Type a number: <FONT color="red">3</FONT>
Factorial is 6
    </PRE>
<PRE>Type a number: <FONT color="red">10</FONT>
Factorial is 3628800
    </PRE></DIV>
<DIV class="tehtava">
<H3>Sum of the powers</H3>
<P>Create a program that calculates the sum of    
2<SUP>0</SUP>+2<SUP>1</SUP>+2<SUP>2</SUP>+...+2<SUP>n</SUP>, where n is a number 
entered by the    user. The notation 2<SUP>i</SUP> means raising the number 2 to 
the power of i, for example    2<SUP>4</SUP> = 2*2*2*2 = 16. In Java we cannot 
write a<SUP>b</SUP> directly, but instead we can    calculate the power with the 
command <CODE>Math.pow(number, power)</CODE>. Note that the command    returns a 
number of <CODE>double</CODE> type (i.e. floating point number). A double can be 
   converted into the <CODE>int</CODE> type (i.e. whole number) as follows:     
<CODE>int result = (int)Math.pow(2, 3)</CODE>. This assigns the value of 
2<SUP>3</SUP> to variable    result.</P>
<P>Example outputs:</P>
<PRE>Type a number: <FONT color="red">3</FONT>
The result is 15
    </PRE>
<PRE>Type a number: <FONT color="red">7</FONT>
The result is 255
    </PRE></DIV></DIV>
<H3>Infinite loops</H3>
<P>One of the classic errors in programming is to accidentally create an 
infinite loop. In the next example we try to print "Never again shall I program 
an eternal loop!" 10 times:</P>
<PRE class="sh_java">int i = 0;

while (i &lt; 10) {
    System.out.println("Never again shall I program an eternal loop!");
}
</PRE>
<P>The variable <CODE>i</CODE>, which determines is supposed to index the loops, 
is initially set to 0. The block is looped as long as the condition <CODE>i &lt; 
10</CODE> is true. But something funny happens. Because the value of the 
variable <CODE>i</CODE> is never changed, the condition stays true forever.</P>
<H3>Ending a while loop</H3>
<P>So far, we have used the while loop with a structure similar to this:</P>
<PRE class="sh_java">int i = 1;
while (i &lt; 10) {
    // Some code.
    i++;
}
</PRE>
<P>With the structure above, the variable <CODE>i</CODE> remembers the number of 
times the the loop has been executed. The condition to end the loop is based on 
comparing the value of <CODE>i</CODE>.</P>
<P>Let us now recall how a while loop is stopped. Ending a while loop does not 
always need to be based on the amount of loops. The next example program asks 
for the user's age. If the given age is not in the range 5-85, the program 
prints a message and asks for the user's age again. As you can see, the 
condition for the while loop can be any expression that results in a boolean 
(truth value).</P>
<PRE class="sh_java">System.out.println("Type your age: ");

int age = Integer.parseInt(reader.nextLine());

while (age &lt; 5 || age &gt; 85) {  // age less than 5 OR greater than 85
    System.out.println("You are lying!");
    if (age &lt; 5) {
        System.out.println("You are so young that you cannot know how to write!");
    } else if (age &gt; 85) {
        System.out.println("You are so old that you cannot know how to use a computer!");
    }

    System.out.println("Type your age again: ");
    age = Integer.parseInt(reader.nextLine();
}

System.out.println("Your age is " + age);
</PRE>
<P>The program could also have been implemented using the good old <CODE>while 
(true)</CODE> structure:</P>
<PRE class="sh_java">System.out.println("Type your age ");
int age;
while (true) {
    age = Integer.parseInt(reader.nextLine());

    if (age &gt;= 5 &amp;&amp; age &lt;= 85) {  // age between 5 AND 85
        break;  // end the loop
    }

    System.out.println("You are lying!");
    if (age &lt; 5) {
        System.out.println("You are so young that you cannot know how to write!");
    } else {  // that means age is over 85
        System.out.println("You are so old that you cannot know how to use a computer!");
    }

    System.out.println("Type your age again: ");
}

System.out.println("Your age is " + age);
</PRE>
<DIV class="tehtavat">
<DIV class="tehtava">
<H3>Loops, ending and remembering</H3>
<P>This set of exercises will form one larger program when put together. We 
create the program by    adding features exercise by exercise. If you do not 
finish all the exercises you can still send    them to be reviewed by the 
exercise robot. To do that, click the "submit"    button, which has a picture of 
an arrow and is located on the right of the testing button. Even    though the 
exercise robot complains about tests in the incomplete exercises, you    will 
still get points for the parts you have completed.</P>
<P>Note: from now on every sub-exercise of a larger exercise (like 36.1) has the 
same value as an    exercise without sub-exercises. It means that exercise 36 as 
a whole corresponds to five normal    exercises.</P>
<H4 class="req">Reading numbers</H4>
<P>Create a program that asks the user to input numbers (integers). The program 
prints "Type    numbers” until the user types the number -1. When the user types 
the number -1, the program prints    "Thank you and see you later!" and 
ends.</P>
<PRE>Type numbers:
<FONT color="red">5</FONT>
<FONT color="red">2</FONT>
<FONT color="red">4</FONT>
<FONT color="red">-1</FONT>
Thank you and see you later!
    </PRE>
<H4 class="req">The sum of the numbers</H4>
<P>Develop your number reading program by adding the following feature: the 
program should print    the sum of the numbers entered by the user (without the 
number -1).</P>
<PRE>Type numbers:
<FONT color="red">5</FONT>
<FONT color="red">2</FONT>
<FONT color="red">4</FONT>
<FONT color="red">-1</FONT>
Thank you and see you later!
The sum is 11
    </PRE>
<H4 class="req">Summing and counting the numbers</H4>
<P>Develop your number reading and summing program by adding the following 
feature: the program    should print how many numbers the user typed (without 
the number -1).</P>
<PRE>Type numbers:
<FONT color="red">5</FONT>
<FONT color="red">2</FONT>
<FONT color="red">4</FONT>
<FONT color="red">-1</FONT>
Thank you and see you later!
The sum is 11
How many numbers: 3
    </PRE>
<H4 class="req">Counting the average</H4>
<P>Develop your number reading, summing and counting program by adding the 
following feature: the    program should print the average of the numbers the 
user typed (without the number -1).</P>
<PRE>Type numbers:
<FONT color="red">5</FONT>
<FONT color="red">2</FONT>
<FONT color="red">4</FONT>
<FONT color="red">-1</FONT>
Thank you and see you later!
The sum is 11
How many numbers: 3
Average: 3.666666666666
    </PRE>
<H4 class="req">Even and odd numbers</H4>
<P>Develop your program by adding the following feature: the program should 
print the number    of even and odd numbers that the user typed (without the 
number -1).</P>
<PRE>Type numbers:
<FONT color="red">5</FONT>
<FONT color="red">2</FONT>
<FONT color="red">4</FONT>
<FONT color="red">-1</FONT>
Thank you and see you later!
The sum is 11
How many numbers: 3
Average: 3.666666666666
Even numbers: 2
Odd numbers: 1
    </PRE></DIV></DIV>
<DIV>
<HR>
<BIG><BIG><B>Note: creating a program in small steps</B></BIG></BIG>   
<P>In these exercises we actually created one single program, but programming 
happened in very small  steps. This is <B>ALWAYS</B> the preferred way to 
program.</P>
<P>When you are programming something, no matter if it is an exercise or a 
project of your own, it is  advised to do it in very tiny pieces. Do not ever 
try to solve the whole problem in one go. Start with  something easy, something 
you know that you can do. In this recent set of exercises, for example, we  
focused first on stopping the program when the user types -1. When one part of 
the program is complete and  working, we can move on to work out the solution 
for the next sub-problem of the big main  problem.</P>
<P>Some of the exercises in this course are sliced into smaller pieces like the 
set of exercises we  just introduced. Usually the pieces need to be sliced again 
into smaller pieces depending on the  problem. It is advised that you execute 
the whole program after almost every new line of  code you write. This enables 
you to be sure that your solution is going in the right and working  
direction.</P>
<HR>
</DIV>
<H2 id="metodit1">Methods</H2>
<P>We have so far used many different commands of Java: assignment, 
calculations, comparison, if structures and while structures. We have been using 
a "command" <CODE>System.out.println()</CODE> to print text. We can also count 
the maximum of two numbers with the help of the "command" 
<CODE>Math.max()</CODE>. We are also familiar with 
<CODE>reader.nextLine()</CODE>, usually seen together with 
<CODE>Integer.parseInt()</CODE>.</P>
<P>If we take a closer look, we notice that those commands differ from if and 
while (etc). The first difference is that after the command there are brackets 
() and sometimes an input for the command inside those brackets. Actually, the 
commands ending with brackets are not called commands, but 
<STRONG>methods</STRONG>.</P>
<P>Technically speaking, a method is a piece of code that can be called from 
different places of the program code. The line of code 
<CODE>System.out.println("I am a parameter given to the method!")</CODE> means
 that we call a method that actually handles the printing. After the method has 
been executed we go back to where we called the method, and continue executing. 
The input given to the method inside the brackets is called a <I>method 
parameter</I>.</P>
<P>In addition to a parameter, the method can also have a return value, for 
example, a familiar line of code:</P>
<PRE class="java">int number = Integer.parseInt( reader.nextLine() );
</PRE>
<P>includes two method calls. First the inner method 
<CODE>reader.nextLine</CODE> is called. That method has the integer typed by the 
user as a return value. Next the outer method <CODE>Integer.parseInt</CODE> is
 called. As a parameter for that method there is the string of characters that 
was received from the <CODE>reader.nextLine</CODE> method as a return value. The 
return value for the method <CODE>Integer.parseInt</CODE> is the string of 
characters transformed into an integer (whole number).</P>
<P>Method names also seem to include a dot, for example 
<CODE>reader.nextLine()</CODE>. Actually the method name starts after the dot, 
here it is <CODE>nextLine()</CODE>. The first part of the command that comes
 before the dot shows whose method is in question. Here the method belongs to 
the reader, which means that we have the <EM>reader's</EM> method 
<EM>nextLine</EM>. Later we will learn more precisely about the owner of the 
method (or the name on the left side of the dot). An attentive reader will 
notice that the method <CODE>System.out.println()</CODE> has two dots. Here, the 
method name is println and <CODE>System.out</CODE> is the owner of the method. 
Roughly <CODE>System.out</CODE> means the computer monitor.</P>
<P>This far we have been using ready-made methods from Java libraries. Next we 
will learn how to create our own methods.</P>
<H2 id="metodit">Self-written methods</H2>
<P>This far we have been using a programming style where code is written (and 
read and executed) from top to bottom.</P>
<P>It was mentioned before that "a method is a piece of code that can be called 
from different places of the program code". Ready-made methods of Java have been 
used since our very first program.</P>
<P>In addition to using these ready-made methods  programmers can write their 
own methods for programs to call. In the real world, it is really exceptional if 
the program does not include any self-written methods. From now on almost every 
program we create during this course will include self-written methods.</P>
<P>The methods are written in the program body outside the main's braces ( { and 
} ) but still inside the outermost braces, for example like this: :</P>
<PRE class="sh_java">import java.util.Scanner;

public class ProgramBody {
    public static void main(String[] args) {
        Scanner reader = new Scanner(System.in);
        // program code
    }

    // self-written methods
}
</PRE>
<P>Let us create a method <CODE>greet</CODE>.</P>
<PRE class="sh_java">public static void greet() {
    System.out.println("Greetings from the world of methods!");
}
</PRE>
<P>And let us place it in the right spot.</P>
<PRE class="sh_java">import java.util.Scanner;

public class ProgramBody {
    public static void main(String[] args) {
        Scanner reader = new Scanner(System.in);
        // program code
    }

    // self-written methods
    public static void greet() {
        System.out.println("Greetings from the world of methods!");
    }
}
</PRE>
<P>In order to define a new method we need to write two things. In the first row 
of the method definition, you will find the name of the method, in this case 
<I>greet</I>. On the left side of the name you will find the definitions 
<CODE>public static void</CODE>. On the next line, the code block marked by the 
braces ({ and }). Inside it, the method's code, or the commands that will be 
executed when the method is called. Our method <CODE>greet</CODE> only writes 
one line of text to the screen.</P>
<P>It is easy to call a self-written method. It happens by writing the method 
name, brackets () and a semicolon. In the next example main (or the main 
program) calls for our method, first once and then several times.</P>
<PRE class="sh_java">import java.util.Scanner;

public class ProgramBody {
    public static void main(String[] args) {
        Scanner reader = new Scanner(System.in);

        // program code
        System.out.println("Let us try if we can get to the method world:");
        greet();

        System.out.println("It seems like we can, let us try again:");
        greet();
        greet();
        greet();
    }

    // self-written methods
    public static void greet() {
        System.out.println("Greetings from the world of methods!");
    }
}
</PRE>
<P>When the program is executed, we see the following output:</P>
<PRE>Let us try if we can get to the method world:
Greetings from the world of methods!
It seems like we can, let us try again:
Greetings from the world of methods!
Greetings from the world of methods!
Greetings from the world of methods!
</PRE>
<P>What is noteworthy here is the execution order of the program code. The 
execution starts with the main program's (or main's) lines of code, from top to 
bottom, one by one. When the line of code to be executed happens to be a method 
call, the lines of code in the method block are executed again one by one. When
 the method block ends, the execution continues from the place where the method 
was called. To be exact, the execution continues from the next line after the 
original method call.</P>
<P>To be even more exact, the main program is also a method. When the program 
starts, the operation system calls for the main method. That means that the main 
method is the starting point of the program and the execution starts from the 
first code line of main. The program execution ends when it reaches the end of
 main.</P>
<P>From now on when we introduce methods, we will not point out that they need 
to be written in the right place inside the program code. For example, a method 
cannot be defined inside another method.</P>
<DIV class="tehtavat">
<DIV class="tehtava">
<H3 class="req">Printing out text</H3>
<P>Create a method <CODE>printText</CODE> that prints the following string of 
characters: "In    the beginning there were the swamp, the hoe and Java." and a 
line break.</P>
<PRE class="sh_java">public static void main(String[] args) {
    printText();
}

public static void printText() {
    // write your code here
}
    </PRE>
<P>The program output:</P>
<PRE>In the beginning there were the swamp, the hoe and Java.
    </PRE></DIV>
<DIV class="tehtava">
<H3 class="req">Many prints</H3>
<P>Develop the program by adding the following feature: the main program should 
ask the user how    many times the text should be printed (meaning how many 
times the method is called).</P>
<PRE class="sh_java">public static void main(String[] args) {
    // ask the user how many times the text should be printed
    // use the while structure to call the printText method several times
}

public static void printText() {
    // write your code here
}
    </PRE>
<P>The program output:</P>
<PRE>How many?
<FONT color="red">7</FONT>
In the beginning there were the swamp, the hoe and Java.
In the beginning there were the swamp, the hoe and Java.
In the beginning there were the swamp, the hoe and Java.
In the beginning there were the swamp, the hoe and Java.
In the beginning there were the swamp, the hoe and Java.
In the beginning there were the swamp, the hoe and Java.
In the beginning there were the swamp, the hoe and Java.
    </PRE>
<P><STRONG>Note:</STRONG> you should print the assisting question <EM>How 
many?</EM> on its own    line!</P></DIV></DIV>
<H3>Method parameters</H3>
<P>We can make our methods more useful by giving it <EM>parameters</EM>! 
Parameters are variables that we define inside brackets in the first line, just 
after the method name. When the method is called, the parameters are assigned 
values.</P>
<P>In the next example we define a method with a parameter, its name will be 
<CODE>greet</CODE> and its parameter will be a variable of the type String 
called <CODE>name</CODE>.</P>
<PRE class="sh_java">public static void greet(String name) {
    System.out.println("Hi " + name + ", greetings from the world of methods!");
}
</PRE>
<P>Let us next call the <CODE>greet</CODE> method so that on the first try we 
give its parameter the value <CODE>Matt</CODE> and on the second try 
<CODE>Arthur</CODE>.</P>
<PRE class="sh_java">public static void main(String[] args) {
    greet("Matt");
    greet("Arthur");
}
</PRE>
<PRE>Hi Matt, greetings from the world of methods!
Hi Arthur, greetings from the world of methods!
</PRE>
<P>More complicated expressions can also be used as a parameter for our 
self-written methods, the same way we used them together with the ready-made 
<CODE>System.out.println()</CODE> method.</P>
<PRE class="sh_java">public static void main(String[] args) {
    String name1 = "Anne";
    String name2 = "Green";
    greet( name1 + " " + name2 );

    int age = 24;
    greet("John " + age + " years");
}
</PRE>
<PRE>Hi Anne Green, greetings from the world of methods!
Hi John 24 years, greetings from the world of methods!
</PRE>
<P>In both cases the method has only one parameter. The value for the parameter 
is calculated before calling the method. In the first case the parameter value 
comes from the String concatenation (a cool word that means putting the text 
together) <CODE>name1 + " " + name2</CODE>. The value for the concatenation is 
<I>Anne Green</I>. In the second case we get the parameter value from the String
 concatenation <CODE>"John " + age + " years"</CODE>.</P>
<H3>Many parameters</H3>
<P>A method can be defined to have more than one parameter. In this case, the 
parameters are always listed in the same order.</P>
<PRE class="sh_java">public static void greet(String name, String greetingsFrom) {
    System.out.println("Hi " + name + ", greetings from " + greetingsFrom);
}
</PRE>
<PRE class="sh_java">String who = "Matt";
String greetings = "Alabama";

greet(who, greetings);
greet(who, greetings + " from Nevada");
</PRE>
<P>In the last <CODE>greet</CODE> function (or method) call the second parameter 
is formed by concatenating (or adding) the text “from Nevada” to the variable 
<CODE>greetings</CODE>. This is done before the actual function call.</P>
<PRE>Hi Matt, greetings from Alabama
Hi Matt, greetings from Alabama from Nevada
</PRE>
<H3>Method calling another method</H3>
<P>Methods can also be called outside of main. Methods can call each other! Let 
us create a method <CODE>greetManyTimes</CODE> that greets the user many times 
getting assistance from the method <CODE>greet</CODE>:</P>
<PRE class="sh_java">public static void greet(String name) {
    System.out.println("Hi " + name + ", greetings from the world of methods!");
}

public static void greetManyTimes(String name, int times) {
    int i = 0;
    while ( i &lt; times ) {
        greet(name);
        i++;
    }

}

public static void main(String[] args) {
    greetManyTimes("Anthony", 3);
    System.out.println("and");
    greetManyTimes("Martin", 2);
}
</PRE>
<P>Output:</P>
<PRE>Hi Anthony, greetings from the world of methods!
Hi Anthony, greetings from the world of methods!
Hi Anthony, greetings from the world of methods!
and
Hi Martin, greetings from the world of methods!
Hi Martin, greetings from the world of methods!
</PRE><!-- screencast --> 
<DIV class="tehtavat">
<DIV class="tehtava">
<H3>Printing</H3>
<H4 class="req">Printing stars</H4>
<P>Create a method <CODE>printStars</CODE> that prints the given amount of stars 
and a line break.</P>
<P>Create the method in the following body:</P>
<PRE class="sh_java">private static void printStars(int amount) {
    // you can print one star with the command
    // System.out.print("*");
    // call this command amount times
}

public static void main(String[] args) {
    printStars(5);
    printStars(3);
    printStars(9);
}
    </PRE>
<P>The program output:</P>
<PRE>*****
***
*********
    </PRE>
<P><B>Note:</B> you can return exercises that contain many parts to the exercise 
robot even though    you are not finished with all parts. In that case, the 
robot complains about tests in the unfinished parts of the exercise, but gives 
you points for all tests that pass.</P>
<H4>Printing a square</H4>
<P>Create a method <CODE>printSquare(int sideSize)</CODE> that prints a square 
using our previous    method printStars. The method call 
<CODE>printSquare(4)</CODE>, for example, prints the following:</P>
<PRE>****
****
****
****
    </PRE>
<P><B>Note:</B> in order to complete the exercise it is not enough that the 
outprint looks good. Inside    the printSquare method the printing must be done 
using the printStars method.</P>
<P>When you are in the middle of making your program, you should verify the 
correctness of your methods    by writing some test code into your main 
method.</P>
<H4>Printing a rectangle</H4>
<P>Create a method <CODE>printRectangle(int width, int height)</CODE> that 
prints a rectangle using the    printStars method. The call 
<CODE>printRectangle(17,3)</CODE>, for example, has the following    output:</P>
<PRE>*****************
*****************
*****************
    </PRE>
<H4>Printing a left-aligned triangle</H4>
<P>Create the method <CODE>printTriangle(int size)</CODE> that prints a triangle 
using the printStars    method. The method call <CODE>printTriangle(4)</CODE>, 
for example, has the following output:</P>
<PRE>*
**
***
****
    </PRE></DIV>
<DIV class="tehtava">
<H3>Printing Like A Boss</H3>
<H4 class="req">Printing stars and whitespaces</H4>
<P>Create a method <CODE>printWhitespaces(int size)</CODE> that prints the given 
amount of whitespaces.    Them method should not print a line break.</P>
<P>Reimplement or copy the method <CODE>printStars(int size)</CODE> from the    
previous exercise.</P>
<H4>Printing a right-aligned triangle</H4>
<P>Create the method <CODE>printTriangle(int size)</CODE> that prints a triangle 
using the mehtods <CODE>printWhitespaces</CODE> and <CODE>printStars</CODE>. 
<B>Note:</B> do not    print anything in the method itself, just call the helper 
methods to do the actual printing.</P>
<P>For example, the method call <CODE>printTriangle(4)</CODE> has the following 
output:</P>
<PRE>   *
  **
 ***
****
    </PRE>
<H4>Printing a Christmas tree</H4>
<P>Create the method <CODE>xmasTree(int height)</CODE> that prints a Christmas 
tree using the mehtods     <CODE>printWhitespaces</CODE> and 
<CODE>printStars</CODE>. A Christmas tree consists of a triangle of    given 
height and a stand. The stand is two stars tall and three stars wide and it is 
located in the    center of the bottom of the triangle. <B>Note:</B> do not 
print anything in the method itself, just call the    helper methods to do the 
actual printing.</P>
<P>The method call <CODE>xmasTree(4)</CODE>, for example, has the following 
output:</P>
<PRE>   *
  ***
 *****
*******
  ***
  ***
    </PRE>
<P>The method call <CODE>xmasTree(10)</CODE> has the following output:</P>
<PRE>         *
        ***
       *****
      *******
     *********
    ***********
   *************
  ***************
 *****************
*******************
        ***
        ***
    </PRE>
<P><EM>Second note:</EM> You don't need to worry about heights below 
3!</P></DIV>
<DIV class="tehtava">
<H3 class="req">Guessing a number game</H3>
<P>In this exercise the following game is created:</P>
<PRE>Guess a number: <FONT color="red">73</FONT>
The number is lesser, guesses made: 1
Guess a number: <FONT color="red">22</FONT>
The number is greater, guesses made: 2
Guess a number: <FONT color="red">51</FONT>
The number is greater, guesses made: 3
Guess a number: <FONT color="red">62</FONT>
The number is greater, guesses made: 4
Guess a number: <FONT color="red">68</FONT>
The number is greater, guesses made: 5
Guess a number: <FONT color="red">71</FONT>
The number is lesser, guesses made: 6
Guess a number: <FONT color="red">70</FONT>
Congratulations, your guess is correct!
    </PRE>
<H4>Guessing a number</H4>
<P>The program that comes with the exercise contains a command called 
<CODE>drawNumber</CODE>. It    draws a number, which is in the range 0 to 100 
(both 0 and 100 are possible). Create a    program that draws a number. Then the 
user has the chance to guess once, what the number is. The    program should to 
print "The number is lesser", "The number is greater" or    "Congratulations, 
your guess is correct!" depending on the number the user typed.</P>
<PRE>Guess a number: <FONT color="red">12</FONT>
The number is greater
    </PRE>
<PRE>Guess a number: <FONT color="red">66</FONT>
The number is lesser
    </PRE>
<PRE>Guess a number: <FONT color="red">42</FONT>
Congratulations, your guess is correct!
    </PRE>
<H4>Repeated guessing</H4>
<P>Develop your program by adding the following functionality: the guessing 
should be made repeatedly    until the user types the right number. Note that 
you need to draw the number by using the     <CODE>drawNumber</CODE> command 
<EM>before the repetition</EM>. Why? What happens if you draw the    number 
inside the repetition?</P>
<P>In the example below, the command call <CODE>drawNumber</CODE> returned the 
value 83.</P>
<PRE>Guess a number: <FONT color="red">55</FONT>
The number is greater
Guess a number: <FONT color="red">85</FONT>
The number is lesser
Guess a number: <FONT color="red">77</FONT>
The number is greater
Guess a number: <FONT color="red">81</FONT>
The number is greater
Guess a number: <FONT color="red">83</FONT>
Congratulations, your guess is correct!
    </PRE>
<H4>Counting the guesses</H4>
<P>Develop your program by adding the following functionality: the program needs 
to include a variable of type int, which is used to count the guesses the user 
has made. The program should always print the    number of guesses along with 
the answer.</P>
<PRE>Guess a number: <FONT color="red">55</FONT>
The number is greater, guesses made: 1
Guess a number: <FONT color="red">85</FONT>
The number is lesser, guesses made: 2
Guess a number: <FONT color="red">77</FONT>
The number is greater, guesses made: 3
Guess a number: <FONT color="red">81</FONT>
The number is greater, guesses made: 4
Guess a number: <FONT color="red">83</FONT>
Congratulations, your guess is correct!
    </PRE></DIV>
<DIV class="tehtava">
<H3 class="req">A text-based user interface for the Hangman game</H3>
<P>Your friend has programmed a Hangman game for you, but the game lacks the 
user inferface. The    Hangman has the following methods:</P>
<UL>
  <LI><EM>hangman.gameOn()</EM><BR>      Shows if the game is on</LI>
  <LI><EM>hangman.printStatus()</EM><BR>      Prints the game status. Shows how 
  many guesses have been made and the letters that have not been      used 
  yet.</LI>
  <LI><EM>hangman.printWord()</EM><BR>      Prints the word the user tries to 
  guess. The letters that have not been guessed yet are hidden as      question 
  marks, like "v?ri?ble".</LI>
  <LI><EM>hangman.printMan()</EM><BR>      Prints the Hangman.</LI>
  <LI><EM>hangman.guess(String letter)</EM><BR>      Guesses the letter that is 
  given as a parameter.</LI></UL>
<P>You will get a program body from the exercise robot. It already contains some 
functionalities:</P>
<PRE class="sh_java">        Scanner reader = new Scanner(System.in);
        Hangman hangman = new Hangman();

        System.out.println("************");
        System.out.println("* Hangman *");
        System.out.println("************");
        System.out.println("");
        printMenu();
        System.out.println("");

        // ADD YOUR IMPLEMENTATION HERE

    System.out.println("Thank you for playing!");
    </PRE>
<P>In addition to the program body, you will get the method called 
<CODE>printMenu</CODE>:</P>
<PRE class="sh_java">    public static void printMenu() {
        System.out.println(" * menu *");
        System.out.println("quit   - quits the game");
        System.out.println("status  - prints the game status");
        System.out.println("a single letter uses the letter as a guess");
        System.out.println("an empty line prints this menu");
    }
    </PRE>
<P>The exercise is completed in small steps.</P>
<H4>Loops and ending loops</H4>
<P>Create a loop in the program that works as a base for the rest of the user    
interface. Ask the user to submit the command inside the loop. If the command is 
"quit",    break the loop.</P>
<P>Use the command <CODE>hangman.gameOn</CODE> as the condition for the while 
structure. The loop should look like:</P>
<PRE class="sh_java">while (hangman.gameOn()) {
    String command = reader.nextLine();
    // ...
}
    </PRE>
<P>In the next set (week) of exercises, we will find out what this 
peculiar-looking condition for ending the loop is about.</P>
<P>This far the program should produce the following output:</P>
<PRE>************
* Hangman *
************

 * menu *
quit   - quits the game
status - prints the game status
a single letter uses the letter as a guess
an empty line prints this menu

Type a command:
<FONT color="red">do not quit</FONT>

Type a command:
<FONT color="red">quit</FONT>
Thank you for playing!
    </PRE>
<H4>Printing the status</H4>
<P>If the user gives the command "status", print the status using the method     
<CODE>hangman.printStatus()</CODE>.</P>
<PRE>************
* Hangman *
************

* menu *
quit   - quits the game
status - prints the game status
a single letter uses the letter as a guess
an empty line prints this menu

Type a command:
<FONT color="red">status</FONT>
You have not made any guesses yet.
Unused letters: abcdefghijklmnopqrstuvwxyz

Type a command:
<FONT color="red">quit</FONT>
Thank you for playing!
    </PRE>
<H4>Making a guess</H4>
<P>If the user types in a single letter as a command, use it to make a guess. 
Guessing a letter occurs    in the method <CODE>hangman.guess(command)</CODE>. 
The guessing command has its own printing    functionality, which it uses to 
print more information about the guess.</P>
<P><B>Hint:</B> finding out if the command is a single letter is done as 
follows:</P>
<PRE class="sh_java">String command = reader.nextLine();

if(command.length() == 1) {  // command has only one letter, so it must be a guess
    hangman.guess(command);
}
    </PRE>
<PRE>...
Type a command:
<FONT color="red">a</FONT>
The letter a is not in the word.

Type a command:
<FONT color="red">b</FONT>
The letter b is not in the word.

Type a command:
<FONT color="red">c</FONT>
The letter c was found in the word!

Type a command:
<FONT color="red">quit</FONT>
Thank you for playing!
    </PRE>
<H4>Printing out the menu</H4>
<P>If the user types an empty string of characters, meaning a string that has 
zero length, you need to    call the method <CODE>printMenu</CODE>. Note that 
the method <CODE>printMenu</CODE> is not in the    Hangman game but in your own 
program.</P>
<P><B>Note:</B> checking if the string is empty is done as follows:</P>
<PRE class="sh_java">String winnie = "the pooh";
if(winnie.isEmpty()) {
    System.out.println("String was empty");
} else {
    System.out.println("I found something!");
}
    </PRE>
<H4>Printing the man and the word</H4>
<P>If the user has not typed the command <CODE>quit</CODE>, you should call the 
Hangman game commands     <CODE>hangman.printMan()</CODE> and 
<CODE>hangman.printWord()</CODE> at the end of the loop.</P>
<PRE>...
Type a command:
<FONT color="red">a</FONT>
The letter a is not in the word.
 ____
 |
 |
 |
 |
/|\
Word to be guessed: ????

Type a command:
<FONT color="red">m</FONT>
The letter m was found in the word!
 ____
 |
 |
 |
 |
/|\
Word to be guessed: m???

Type a command:
<FONT color="red">quit</FONT>
Thank you for playing!
    </PRE></DIV></DIV></DIV></DIV></DIV><!-- /inner --> 
  </DIV><!-- /node-232 -->         </DIV></DIV><!-- /inner-inner -->	   </DIV><!-- /inner-wrapper --> 
    
<DIV class="corner-bottom">
<DIV class="corner-bottom-right corner"></DIV>
<DIV class="corner-bottom-left corner"></DIV></DIV></DIV><!-- /inner --> </DIV><!-- /block --> 
 </DIV></DIV></DIV></DIV></DIV></DIV></DIV><!-- /content-content -->             
                                                  </DIV><!-- /content-inner-inner --> 
                            </DIV><!-- /content-inner -->                        
   </DIV><!-- /content-region-inner -->                         </DIV><!-- /content-region --> 
                        
<DIV class="content-bottom row nested " id="content-bottom">
<DIV class="content-bottom-inner inner clearfix" id="content-bottom-inner">
<DIV class="block block-block odd first last grid16-16" id="block-block-1">
<DIV class="inner">
<DIV class="corner-top">
<DIV class="corner-top-right corner"></DIV>
<DIV class="corner-top-left corner"></DIV></DIV>
<DIV class="inner-wrapper">
<DIV class="inner-inner">
<DIV class="content clearfix">
<DIV id="header-top-block">
<P class="rtecenter">Ohjaus: <A href="http://mooc.fi/content/irc-ohjeet">IRCnet 
#mooc.fi </A>&nbsp;&nbsp; |  Tiedotus: <A href="http://twitter.com/mooc1"><IMG 
height="50" style="vertical-align: middle;" src="Loop%20and%20basic%20method_files/twitter_newbird_blue.png"> 
Twitter </A><A href="http://www.facebook.com/Moocfi"><IMG height="30" style="padding: 10px; vertical-align: middle;" 
src="Loop%20and%20basic%20method_files/f_logo-1.png"> Facebook</A>  |  
Virheraportit: <A href="http://sourceforge.net/p/mooc-issues/tickets/"><IMG 
height="30" style="padding: 10px; vertical-align: middle;" src="Loop%20and%20basic%20method_files/sf-footer-logo.png"> 
SourceForge</A></P>
<P class="rtecenter"><A href="http://www.cs.helsinki.fi/"><IMG width="400" 
style="vertical-align: middle;" alt="Helsingin yliopiston tietojenkäsittelytieteen laitos" 
src="Loop%20and%20basic%20method_files/CS-logo-MOOC.jpg">&nbsp; </A></P></DIV>
<SCRIPT>
  (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
  (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
  m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
  })(window,document,'script','//www.google-analytics.com/analytics.js','ga');
 
  ga('create', 'UA-47575342-3', 'auto');
  ga('send', 'pageview');
 
</SCRIPT>
        </DIV></DIV><!-- /inner-inner -->	   </DIV><!-- /inner-wrapper -->     
<DIV class="corner-bottom">
<DIV class="corner-bottom-right corner"></DIV>
<DIV class="corner-bottom-left corner"></DIV></DIV></DIV><!-- /inner --> </DIV><!-- /block --></DIV><!-- /content-bottom-inner --> 
</DIV><!-- /content-bottom -->                       </DIV><!-- /content-group-inner --> 
                    </DIV><!-- /content-group -->                                
       </DIV><!-- /main-content-inner -->                 </DIV><!-- /main-content --> 
                              </DIV><!-- /main-group-inner -->             
</DIV><!-- /main-group -->           </DIV><!-- /main-inner -->         </DIV><!-- /main --> 
      </DIV><!-- /main-wrapper -->       <!-- postscript-bottom row: width = grid_width --> 
            <!-- footer row: width = grid_width -->             <!-- footer-message row: width = grid_width --> 
      
<DIV class="footer-message-wrapper full-width" id="footer-message-wrapper">
<DIV class="footer-message row grid16-16" id="footer-message">
<DIV class="footer-message-inner inner clearfix" id="footer-message-inner">
<DIV class="footer-message-text block" id="footer-message-text">
<DIV class="footer-message-text-inner inner clearfix" id="footer-message-text-inner"><BR></DIV><!-- /footer-message-text-inner --> 
</DIV><!-- /footer-message-text -->                    </DIV><!-- /footer-message-inner --> 
        </DIV><!-- /footer-message -->       </DIV><!-- /footer-message-wrapper --> 
    <!-- /page-inner -->   <!-- /page -->   </BODY></HTML>
