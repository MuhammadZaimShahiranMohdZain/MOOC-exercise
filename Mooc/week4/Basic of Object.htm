<!DOCTYPE HTML>
<!-- saved from url=(0078)http://mooc.cs.helsinki.fi/programming-part1/material-2013/week-4 -->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd"><HTML 
lang="en" lang="en" xml:lang="en" 
xmlns="http://www.w3.org/1999/xhtml"><HEAD><META content="IE=11.0000" 
http-equiv="X-UA-Compatible">
 
<META http-equiv="Content-Type" content="text/html; charset=utf-8">   
<TITLE>MOOC | MOOC - Massiivinen avoin verkkokurssi</TITLE>    <LINK href="/sites/mooc.cs.helsinki.fi/files/acquia_marina_favicon.png" 
rel="shortcut icon" type="image/x-icon">   <LINK href="Basic%20of%20Object_files/5c1587b6907a85bc361bd4b70014b0e3.css" 
rel="stylesheet" type="text/css" media="all"> <LINK href="Basic%20of%20Object_files/node.css" 
rel="stylesheet" type="text/css" media="all"> <LINK href="Basic%20of%20Object_files/defaults.css" 
rel="stylesheet" type="text/css" media="all"> <LINK href="Basic%20of%20Object_files/system.css" 
rel="stylesheet" type="text/css" media="all"> <LINK href="Basic%20of%20Object_files/system-menus.css" 
rel="stylesheet" type="text/css" media="all"> <LINK href="Basic%20of%20Object_files/user.css" 
rel="stylesheet" type="text/css" media="all"> <LINK href="Basic%20of%20Object_files/content-module.css" 
rel="stylesheet" type="text/css" media="all"> <LINK href="Basic%20of%20Object_files/ckeditor.css" 
rel="stylesheet" type="text/css" media="all"> <LINK href="Basic%20of%20Object_files/ctools.css" 
rel="stylesheet" type="text/css" media="all"> <LINK href="Basic%20of%20Object_files/date.css" 
rel="stylesheet" type="text/css" media="all"> <LINK href="Basic%20of%20Object_files/panels.css" 
rel="stylesheet" type="text/css" media="all"> <LINK href="Basic%20of%20Object_files/views.css" 
rel="stylesheet" type="text/css" media="all"> <LINK href="Basic%20of%20Object_files/aeb58e3ce47f9171327ad9fd87a26c8e.css" 
rel="stylesheet" type="text/css" media="all"> <LINK href="Basic%20of%20Object_files/flexible.css" 
rel="stylesheet" type="text/css" media="all"> <LINK href="Basic%20of%20Object_files/style.css" 
rel="stylesheet" type="text/css" media="all"> <LINK href="Basic%20of%20Object_files/typography.css" 
rel="stylesheet" type="text/css" media="all"> <LINK href="Basic%20of%20Object_files/superfish.css" 
rel="stylesheet" type="text/css" media="all"> <LINK href="Basic%20of%20Object_files/superfish-navbar.css" 
rel="stylesheet" type="text/css" media="all"> <LINK href="Basic%20of%20Object_files/superfish-vertical.css" 
rel="stylesheet" type="text/css" media="all"> <LINK href="Basic%20of%20Object_files/fusion-acquia-marina-style.css" 
rel="stylesheet" type="text/css" media="all"> <LINK href="Basic%20of%20Object_files/custom.css" 
rel="stylesheet" type="text/css" media="all"> <LINK href="Basic%20of%20Object_files/common.css" 
rel="stylesheet" type="text/css" media="all"> <LINK href="Basic%20of%20Object_files/exercises.css" 
rel="stylesheet" type="text/css" media="all"> <LINK href="Basic%20of%20Object_files/menu.css" 
rel="stylesheet" type="text/css" media="all"> <LINK href="Basic%20of%20Object_files/sh_style.css" 
rel="stylesheet" type="text/css" media="all">   <LINK href="Basic%20of%20Object_files/grid16-fluid.css" 
rel="stylesheet" type="text/css" media="all">   <!--[if IE 8]>
  <link type="text/css" rel="stylesheet" media="all" href="/sites/all/themes/fusion/fusion_core/css/ie8-fixes.css?8" />
<link type="text/css" rel="stylesheet" media="all" href="/sites/all/themes/acquia_marina/css/ie8-fixes.css?8" />
  <![endif]--> 
  <!--[if IE 7]>
  <link type="text/css" rel="stylesheet" media="all" href="/sites/all/themes/fusion/fusion_core/css/ie7-fixes.css?8" />
<link type="text/css" rel="stylesheet" media="all" href="/sites/all/themes/acquia_marina/css/ie7-fixes.css?8" />
  <![endif]--> 
  <!--[if lte IE 6]>
  <link type="text/css" rel="stylesheet" media="all" href="/sites/all/themes/fusion/fusion_core/css/ie6-fixes.css?8"/>
<link type="text/css" rel="stylesheet" media="all" href="/sites/all/themes/acquia_marina/css/ie6-fixes.css?8"/>
  <![endif]--> 
    
<SCRIPT src="Basic%20of%20Object_files/jquery.js" type="text/javascript"></SCRIPT>
 
<SCRIPT src="Basic%20of%20Object_files/drupal.js" type="text/javascript"></SCRIPT>
 
<SCRIPT src="Basic%20of%20Object_files/panels.js" type="text/javascript"></SCRIPT>
 
<SCRIPT src="Basic%20of%20Object_files/jquery.bgiframe.min.js" type="text/javascript"></SCRIPT>
 
<SCRIPT src="Basic%20of%20Object_files/hoverIntent.js" type="text/javascript"></SCRIPT>
 
<SCRIPT src="Basic%20of%20Object_files/supposition.js" type="text/javascript"></SCRIPT>
 
<SCRIPT src="Basic%20of%20Object_files/supersubs.js" type="text/javascript"></SCRIPT>
 
<SCRIPT src="Basic%20of%20Object_files/superfish.js" type="text/javascript"></SCRIPT>
 
<SCRIPT src="Basic%20of%20Object_files/script.js" type="text/javascript"></SCRIPT>
 
<SCRIPT src="Basic%20of%20Object_files/jquery.corner.js" type="text/javascript"></SCRIPT>
 
<SCRIPT src="Basic%20of%20Object_files/acquia-marina-script.js" type="text/javascript"></SCRIPT>
 
<SCRIPT src="Basic%20of%20Object_files/util-functions.js" type="text/javascript"></SCRIPT>
 
<SCRIPT src="Basic%20of%20Object_files/clear-default-text.js" type="text/javascript"></SCRIPT>
 
<SCRIPT src="Basic%20of%20Object_files/sh_java.min.js" type="text/javascript"></SCRIPT>
 
<SCRIPT src="Basic%20of%20Object_files/sh_main.min.js" type="text/javascript"></SCRIPT>
 
<SCRIPT src="Basic%20of%20Object_files/sh_ruby.min.js" type="text/javascript"></SCRIPT>
 
<SCRIPT src="Basic%20of%20Object_files/sh_scala.min.js" type="text/javascript"></SCRIPT>
 
<SCRIPT type="text/javascript">
<!--//--><![CDATA[//><!--
jQuery.extend(Drupal.settings, { "basePath": "/" });
//--><!]]>
</SCRIPT>
 
<META name="GENERATOR" content="MSHTML 11.00.9600.18163"></HEAD>
<BODY class="not-front not-logged-in page-node node-type-weekly-tasks no-sidebars full-node panels layout-main sidebars-both-first font-family-lucida font-size-13 grid-type-fluid grid-width-16 fluid-100" 
id="pid-programming-part1-material-2013-week-4">   
<DIV class="page" id="page">
<DIV class="page-inner" id="page-inner">
<DIV id="skip"><A href="http://mooc.cs.helsinki.fi/programming-part1/material-2013/week-4?noredirect=1#main-content-area">Skip 
to Main Content Area</A>       </DIV><!-- header-top row: width = grid_width --> 
            <!-- header-group row: width = grid_width -->       
<DIV class="header-group-wrapper full-width" id="header-group-wrapper">
<DIV class="header-group row grid16-16" id="header-group">
<DIV class="header-group-inner inner clearfix" id="header-group-inner">
<DIV class="primary-menu block" id="primary-menu">
<DIV class="primary-menu-inner inner clearfix" id="primary-menu-inner">
<UL class="menu sf-menu">
  <LI class="expanded first"><A title="" 
  href="http://mooc.cs.helsinki.fi/home">Kurssit ››</A>
  <UL class="menu">
    <LI class="leaf first"><A title="" 
    href="http://mooc.fi/algoritmit">Algoritmien MOOC</A></LI>
    <LI class="leaf"><A title="" href="http://mooc.cs.helsinki.fi/2014-ohjelmointi">Olio-ohjelmointi 
    Javalla</A></LI>
    <LI class="leaf"><A title="" 
    href="http://mooc.aalto.fi/ohjelmointi/">Ohjelmointia Scalalla</A></LI>
    <LI class="leaf"><A title="" 
    href="http://mooc.fi/programming-part1">Object-Oriented Programming with 
    Java, part I</A></LI>
    <LI class="leaf"><A title="" 
    href="http://mooc.fi/programming-part2">Object-Oriented Programming with 
    Java, part II</A></LI>
    <LI class="leaf last"><A title="" 
    href="http://mooc.cs.helsinki.fi/wepa">Web-palvelinohjelmointi</A></LI></UL></LI>
  <LI class="collapsed"><A title="Mikä on MOOC?" href="http://mooc.cs.helsinki.fi/content/mik%C3%A4-mooc">Mikä 
  on MOOC? ››</A></LI>
  <LI class="leaf last"><A title="" href="http://mooc.cs.helsinki.fi/content/j%C3%A4rjest%C3%A4v%C3%A4st%C3%A4-tahosta">Järjestävästä 
  tahosta ››</A></LI></UL></DIV><!-- /primary-menu-inner --> </DIV><!-- /primary-menu --> 
          </DIV><!-- /header-group-inner -->         </DIV><!-- /header-group --> 
      </DIV><!-- /header-group-wrapper -->       <!-- preface-top row: width = grid_width --> 
        <!--            <div id="preface-top-wrapper" class="preface-top-wrapper full-width">
        <div id="preface-top" class="preface-top row grid16-16">
          <div id="preface-top-inner" class="preface-top-inner inner clearfix"> 
--> 
          </DIV><!-- /preface-top-inner -->         </DIV><!-- /preface-top -->  
     <!-- /preface-top-wrapper -->           <!-- main row: width = grid_width --> 
    
<DIV class="main-wrapper full-width" id="main-wrapper">
<DIV class="main row grid16-16" id="main">
<DIV class="main-inner inner clearfix" id="main-inner"><!-- main group: width = grid_width - sidebar_first_width --> 
          
<DIV class="main-group row nested grid16-16" id="main-group">
<DIV class="main-group-inner inner clearfix" id="main-group-inner">
<DIV class="main-content row nested" id="main-content">
<DIV class="main-content-inner inner clearfix" id="main-content-inner"><!-- content group: width = grid_width - (sidebar_first_width + sidebar_last_width) --> 
                    
<DIV class="content-group row nested " id="content-group" style="width: 100%;">
<DIV class="content-group-inner inner clearfix" id="content-group-inner">
<DIV class="content-region row nested" id="content-region">
<DIV class="content-region-inner inner clearfix" id="content-region-inner"><A 
name="main-content-area" id="main-content-area"></A>                             
                            
<DIV class="content-inner block" id="content-inner">
<DIV class="content-inner-inner inner clearfix" id="content-inner-inner">
<DIV class="content-content" id="content-content">
<DIV class="panel-flexible panels-flexible-13 clear-block">
<DIV class="panel-flexible-inside panels-flexible-13-inside">
<DIV class="panels-flexible-row panels-flexible-row-13-7 panels-flexible-row-first clear-block ">
<DIV class="inside panels-flexible-row-inside panels-flexible-row-13-7-inside panels-flexible-row-inside-first clear-block">
<DIV class="panels-flexible-region panels-flexible-region-13-js_ panels-flexible-region-first panels-flexible-region-last ">
<DIV class="inside panels-flexible-region-inside panels-flexible-region-13-js_-inside panels-flexible-region-inside-first panels-flexible-region-inside-last">
<DIV class="panel-pane pane-custom pane-2 ">
<DIV class="inner">
<DIV class="corner-top">
<DIV class="corner-top-right corner"></DIV>
<DIV class="corner-top-left corner"></DIV></DIV>
<DIV class="inner-wrapper">
<DIV class="inner-inner">
<DIV class="pane-content content">
<H1 class="title"><A 
href="http://mooc.cs.helsinki.fi/programming-part1">Object-Oriented Programming 
with Java, part I ››</A></H1></DIV></DIV><!-- /inner-inner -->	   </DIV><!-- /inner-wrapper --> 
    
<DIV class="corner-bottom">
<DIV class="corner-bottom-right corner"></DIV>
<DIV class="corner-bottom-left corner"></DIV></DIV></DIV><!-- /inner --> </DIV><!-- /block -->
<DIV class="panel-region-separator"></DIV>
<DIV class="panel-pane pane-custom pane-3 ">
<DIV class="inner">
<DIV class="corner-top">
<DIV class="corner-top-right corner"></DIV>
<DIV class="corner-top-left corner"></DIV></DIV>
<DIV class="inner-wrapper">
<DIV class="inner-inner">
<DIV class="pane-content content"><LINK href="Basic%20of%20Object_files/menu(1).css" 
rel="stylesheet" type="text/css" media="screen"> <LINK href="Basic%20of%20Object_files/common-new.css" 
rel="stylesheet" type="text/css" media="screen, print"> <LINK href="Basic%20of%20Object_files/sh_style(1).css" 
rel="stylesheet" type="text/css" media="screen, print">        </DIV></DIV><!-- /inner-inner -->
	   </DIV><!-- /inner-wrapper -->     
<DIV class="corner-bottom">
<DIV class="corner-bottom-right corner"></DIV>
<DIV class="corner-bottom-left corner"></DIV></DIV></DIV><!-- /inner --> </DIV><!-- /block --> 
 </DIV></DIV></DIV></DIV>
<DIV class="panels-flexible-row panels-flexible-row-13-4 clear-block js">
<DIV class="inside panels-flexible-row-inside panels-flexible-row-13-4-inside clear-block">
<DIV class="panels-flexible-region panels-flexible-region-13-js_en_ panels-flexible-region-first ">
<DIV class="inside panels-flexible-region-inside panels-flexible-region-13-js_en_-inside panels-flexible-region-inside-first"></DIV></DIV>
<DIV class="panels-flexible-region panels-flexible-region-13-js ">
<DIV class="inside panels-flexible-region-inside panels-flexible-region-13-js-inside">
<DIV class="panel-pane pane-node ">
<DIV class="inner">
<DIV class="corner-top">
<DIV class="corner-top-right corner"></DIV>
<DIV class="corner-top-left corner"></DIV></DIV>
<DIV class="inner-wrapper">
<DIV class="inner-inner">
<DIV class="pane-content content">
<DIV class="node odd full-node node-type-page" id="node-222">
<DIV class="inner">
<H2 class="title"><A title="" 
href="http://mooc.cs.helsinki.fi/content/js-en"></A></H2>
<DIV class="content clearfix">
<SCRIPT src="Basic%20of%20Object_files/bootstrap.min.js" type="text/javascript"></SCRIPT>
 
<SCRIPT src="Basic%20of%20Object_files/jquery-1.7.1.min.js" type="text/javascript"></SCRIPT>
 
<SCRIPT src="Basic%20of%20Object_files/exercises-eng-new.js" type="text/javascript"></SCRIPT>
 
<SCRIPT src="Basic%20of%20Object_files/common-mooc-eng.js" type="text/javascript"></SCRIPT>
 
<SCRIPT src="Basic%20of%20Object_files/sh_main.min(1).js" type="text/javascript"></SCRIPT>
 
<SCRIPT src="Basic%20of%20Object_files/sh_java.min(1).js" type="text/javascript"></SCRIPT>
 
<SCRIPT src="Basic%20of%20Object_files/jquery.easing.js" type="text/javascript"></SCRIPT>
 
<DIV class="menu" id="toc" data-first-exercise-index="1" 
data-first-chapter-index="1"><SPAN id="materiaali_toc"></SPAN>           <!--div id="tehtavat_toc" ></div--> 
          <SPAN id="tehtavat_toc2"></SPAN>         </DIV></DIV></DIV><!-- /inner --> 
  </DIV><!-- /node-222 -->         </DIV></DIV><!-- /inner-inner -->	   </DIV><!-- /inner-wrapper --> 
    
<DIV class="corner-bottom">
<DIV class="corner-bottom-right corner"></DIV>
<DIV class="corner-bottom-left corner"></DIV></DIV></DIV><!-- /inner --> </DIV><!-- /block --> 
 </DIV></DIV>
<DIV class="panels-flexible-region panels-flexible-region-13-copyright panels-flexible-region-last float-right">
<DIV class="inside panels-flexible-region-inside panels-flexible-region-13-copyright-inside panels-flexible-region-inside-last">
<DIV class="panel-pane pane-custom pane-1 box ">
<DIV class="inner">
<DIV class="corner-top">
<DIV class="corner-top-right corner"></DIV>
<DIV class="corner-top-left corner"></DIV></DIV>
<DIV class="inner-wrapper">
<DIV class="inner-inner">
<DIV class="pane-content content">
<P><A href="http://creativecommons.org/licenses/by-nc-sa/2.0/" 
rel="license"><IMG style="border-width: 0px; float: right;" alt="Creative Commons License" 
src="Basic%20of%20Object_files/88x31.png"></A><SMALL>This material is licensed 
under the Creative Commons BY-NC-SA license, which means that you can use it and 
distribute it freely so long as you do not erase the names of the original 
authors. If you do changes in the material and want to distribute this altered 
version of the material, you have to license it with a similar free license. The 
use of the material for commercial use is prohibited without a separate 
agreement.</SMALL></P></DIV></DIV><!-- /inner-inner -->	   </DIV><!-- /inner-wrapper --> 
    
<DIV class="corner-bottom">
<DIV class="corner-bottom-right corner"></DIV>
<DIV class="corner-bottom-left corner"></DIV></DIV></DIV><!-- /inner --> </DIV><!-- /block -->
<DIV class="panel-region-separator"></DIV>
<DIV class="panel-pane pane-content-field pane-field-author course-menu ">
<DIV class="inner">
<DIV class="corner-top">
<DIV class="corner-top-right corner"></DIV>
<DIV class="corner-top-left corner"></DIV></DIV>
<DIV class="inner-wrapper">
<DIV class="inner-inner">
<DIV class="pane-content content">
<DIV class="field field-type-text field-field-author">
<DIV class="field-items">
<DIV class="field-item odd">                    Authors: Arto Vihavainen, Matti 
Luukkainen        </DIV></DIV></DIV></DIV></DIV><!-- /inner-inner -->	   </DIV><!-- /inner-wrapper --> 
    
<DIV class="corner-bottom">
<DIV class="corner-bottom-right corner"></DIV>
<DIV class="corner-bottom-left corner"></DIV></DIV></DIV><!-- /inner --> </DIV><!-- /block -->
<DIV class="panel-region-separator"></DIV>
<DIV class="panel-pane pane-content-field pane-field-translators course-menu ">
<DIV class="inner">
<DIV class="corner-top">
<DIV class="corner-top-right corner"></DIV>
<DIV class="corner-top-left corner"></DIV></DIV>
<DIV class="inner-wrapper">
<DIV class="inner-inner">
<DIV class="pane-content content">
<DIV class="field field-type-text field-field-translators">
<DIV class="field-items">
<DIV class="field-item odd">                    Translators to English: Emilia 
Hjelm, Alex H. Virtanen, Matti Luukkainen, Virpi Sumu, Birunthan Mohanathas      
  </DIV></DIV></DIV></DIV></DIV><!-- /inner-inner -->	   </DIV><!-- /inner-wrapper --> 
    
<DIV class="corner-bottom">
<DIV class="corner-bottom-right corner"></DIV>
<DIV class="corner-bottom-left corner"></DIV></DIV></DIV><!-- /inner --> </DIV><!-- /block --> 
 </DIV></DIV></DIV></DIV>
<DIV class="panels-flexible-row panels-flexible-row-13-8 panels-flexible-row-last clear-block js en">
<DIV class="inside panels-flexible-row-inside panels-flexible-row-13-8-inside panels-flexible-row-inside-last clear-block">
<DIV class="panels-flexible-region panels-flexible-region-13-js_en panels-flexible-region-first panels-flexible-region-last ">
<DIV class="inside panels-flexible-region-inside panels-flexible-region-13-js_en-inside panels-flexible-region-inside-first panels-flexible-region-inside-last">
<DIV class="panel-pane pane-node-content box-mooc ">
<DIV class="inner">
<DIV class="corner-top">
<DIV class="corner-top-right corner"></DIV>
<DIV class="corner-top-left corner"></DIV></DIV>
<DIV class="inner-wrapper">
<DIV class="inner-inner">
<DIV class="pane-content content">
<DIV class="node even full-node node-type-weekly_tasks" id="node-239">
<DIV class="inner">
<DIV class="content clearfix">
<DIV class="viikkoraja-mooc" id="Week 4" data-first-exercise-index="70" 
data-first-chapter-index="20" kaantaja="Emilia Hjelm, Alex H. Virtanen, Matti Luukkainen, Virpi Sumu, Birunthan Mohanathas" 
tekija="Arto Vihavainen, Matti Luukkainen" data-first-week-index-mooc="4" 
data-first-exercise-index-mooc="70" data-first-chapter-index-mooc="19" 
data-first-week-index="4" unlock="unlocks when 85% of week 3 done" deadline="unlocks when 85% of week 3 done">
<DIV class="week" data-week-number="4">
<H2>Methods and copying parameters</H2>
<P>Let us focus on a couple of details concerning methods.</P>
<P>In section 15 was an example, in which we tried to change the value of a main 
program variable  inside a method.</P>
<PRE class="sh_java">public static void main(String[] args) {
    int number = 1;
    addThree();
    System.out.println("Main program variable number holds the value: " + number);
}

public static void addThree() {
    number = number + 3;
}
  </PRE>
<P>This program of ours does not work. The reason is that the method cannot 
access the main program variable   <CODE>number</CODE>.</P>
<P>This is because main program variables are not visible to methods. More 
generally: no method  variable is visible to other methods. As the main program 
<CODE>main</CODE> is also a method, this constraint  holds for the main program 
as well. The only way to give information to a method is through  
parameters.</P>
<P>Let us try to fix the above example by passing the main program variable 
<CODE>number</CODE> to the  method as a parameter.</P>
<PRE class="sh_java">public static void main(String[] args) {
    int number = 1;
    addThree(number);
    System.out.println(number);  // prints 1, the value did not change
}

public static addThree(int number) {
    number = number + 3;
}
  </PRE>
<P>Still, the program does not function the way we want. The method parameters 
are different variables than  the ones introduced in the main program. In the 
previous example, the method increments a variable with  the same name as the 
main program variable. The parameter has the same name, but is not the same as 
the  main program variable <CODE>number</CODE>.</P>
<P>When a parameter is given to a method, the value of the parameter <EM>is 
copied into a new    variable</EM> and that new variable is the one the method 
uses. In the example above, the variable   <CODE>number</CODE> that was given to 
the method <CODE>addThree</CODE> as a parameter, will be copied  and then the 
copy is actually handed out for the method to use. The method uses a copy of the 
 variable from the main program, not the original variable. The main program 
variable   <CODE>number</CODE> stays unchanged.</P>
<P>We can imagine that the main program method <CODE>main</CODE> and the method 
<CODE>addThree</CODE>  both work in their own parts of the computer memory. In 
the picture below, there is a "box"  for the value of the variable 
<CODE>number</CODE> of the main method. When the method is called, a new  "box" 
named <CODE>number</CODE> will be created and the main value of  the method 
variable   <CODE>number</CODE> will be copied into it. In this example, the 
number is 1. Both variables  that are called <CODE>number</CODE> are separate, 
therefore when the method <CODE>addThree</CODE>  changes the value of its own 
variable called <CODE>number</CODE> it does not affect the variable   
<CODE>number</CODE> in the main program.</P>
<P>The picture below will demonstrate what happens.</P>
<P><IMG src="Basic%20of%20Object_files/metodi1.png"></P>
<P>The method can still naturally pass information to the caller, which happens 
by using a return value  (i.e. using a <CODE>return</CODE> command to return a 
variable with a value). We can get the previous  example to work by changing the 
code a little bit:</P>
<PRE class="sh_java">public static void main(String[] args) {
    int number = 1;
    number = addThreeAndReturn(number);

    System.out.println(number);  // prints 4, because number has the method return value as its value
}

public static int addThreeAndReturn(int number) {
    number = number + 3;

    return number;
}
  </PRE>
<P>The method still uses the copy of the main program variable 
<CODE>number</CODE>. In the main program,  we assign the variable 
<CODE>number</CODE> the method return value as a new value, so that we can get  
the change to take effect in the main program. Note that the name of the method 
variable plays no role  here. The code works exactly the same regardless of the 
variable names. Here follows an example:</P>
<PRE class="sh_java">public static void main(String[] args) {
    int number = 1;
    number = addThreeAndReturn(number);

    System.out.println(number);
}

public static int addThreeAndReturn(int incremented) {
    incremented = incremented + 3;

    return incremented;
}
  </PRE>
<P>We have now found out that the parameters in methods are different variables 
than the variables introduced in  the method call. Only the parameter value gets 
copied from the caller to the method.</P>
<P>Unfortunately this is not the whole story. If a method gets an 
<CODE>ArrayList</CODE> as a parameter, the  method sees the original list and 
all the changes the method makes will take effect everywhere.</P>
<PRE class="sh_java">public static void removeFirst(ArrayList&lt;Integer&gt; list) {
    list.remove(0); // removes the number from index 0
}
  </PRE>
<PRE class="sh_java">public static void main(String[] args) {
    ArrayList&lt;Integer&gt; numbers = new ArrayList&lt;Integer&gt;();
    numbers.add(4);
    numbers.add(3);
    numbers.add(7);
    numbers.add(3);

    System.out.println(numbers); // prints [4,3,7,3]

    removeFirst(numbers);

    System.out.println(numbers); // prints [3,7,3]
}
  </PRE>
<P>Unlike a parameter of <CODE>int</CODE> type, a list will not be copied and 
therefore the method  makes changes to the original list given as a 
parameter.</P>
<P>The picture below will clarify the example. <CODE>ArrayList</CODE> does not 
live in an imagined  "box" like an <CODE>int</CODE>. The variable name in the 
example <CODE>numbers</CODE> is only  a <EM>reference</EM> that refers to the 
place where the ArrayList is. One way to visualize this is that  an 
<CODE>ArrayList</CODE> is connected with a wire. The name of the 
<CODE>ArrayList</CODE> is a  "wire", and the list itself is located "at the 
other end of the wire". When we give  the <CODE>ArrayList</CODE> to a method as 
a parameter, we actually give the method a wire. When the  method uses its 
parameter, it finds the original list at the other end of this wire. Actually 
the main program  and the method do have separate wires, but both wires have the 
same original list at the end of them  and all the changes will be made directly 
to the original list. During and after this week we will find  out that many 
things in Java are "connected with a wire".</P>
<P><IMG height="400" src="Basic%20of%20Object_files/metodi-lanka.png"></P>
<P>Note that again the parameter name inside the method can be anything. It does 
not need to be the  same as the name in the main program (or other method that 
calls it). In the example above, the method  uses the name <CODE>list</CODE> but 
the method caller sees the same list with a different name:   
<CODE>numbers</CODE>.</P>
<P>Now, you probably start to wonder why does the value of the parameter get 
copied and the original variable stay intact when the  parameter is of 
<CODE>int</CODE> type, but the original list is given to the method when the 
parameter  is of <CODE>ArrayList</CODE> type? In Java only the values of 
<STRONG><EM>primitive data      types</EM></STRONG> (which are <CODE>int</CODE>, 
<CODE>double</CODE>, <CODE>char</CODE>,   <CODE>boolean</CODE> and a couple of 
others that we have not yet discussed) get copied to the method.  When the 
method parameters are of other types only the <EM>references</EM> are copied to 
the method. A  reference is like a "wire", therefore the method can access the 
list using it directly. The  variables that are not of primitive data types are 
of <STRONG><EM>reference data types</EM></STRONG>  and are "wired" just like the 
ArrayList in the previous example. The method is given the  wire and the method 
can access the parameter directly.</P>
<DIV class="tehtavat" id="viikko4">
<DIV class="tehtava">
<H3>Combining ArrayLists</H3>
<P>Create the method <CODE>public static void combine(ArrayList&lt;Integer&gt; 
first,        ArrayList&lt;Integer&gt; second)</CODE> that inserts the items in 
a list called       <CODE>second</CODE> to a list called <CODE>first</CODE>. The 
order of the items can be      anything and the same item can appear in the list 
more than once. An example on using the      method:</P>
<PRE class="sh_java">ArrayList&lt;Integer&gt; list1 = new ArrayList&lt;Integer&gt;();
ArrayList&lt;Integer&gt; list2 = new ArrayList&lt;Integer&gt;();

list1.add(4);
list1.add(3);

list2.add(5);
list2.add(10);
list2.add(7);

combine(list1, list2);

System.out.println(list1); // prints [4, 3, 5, 10, 7]

System.out.println(list2); // prints [5, 10, 7]
      </PRE>
<P>We can use the method <CODE>addAll</CODE> provided by the ArrayList class to 
add one list in      another list. The list gets the other list, whose items are 
to be added, as a parameter.</P></DIV>
<DIV class="tehtava">
<H3>Smart combining</H3>
<P>Create the method <CODE>smartCombine</CODE> that works like the previous      
 <CODE>combine</CODE> method except that numbers can be on the list only once. 
This means that the method      adds a new number to the list only if the list 
does not already contain that number. You might      find the method 
<CODE>contains</CODE> from the ArrayList class useful. You can use that method   
   to check if a number is in the list.</P></DIV></DIV>
<H2>Instructions on code-writing and problem solving</H2>
<P>Two of the leading software developers, <EM>Martin Fowler</EM> and <EM>Kent 
Beck</EM> have said in the book <EM>Refactoring: Improving the Design of 
Existing Code</EM> that:</P>
<UL>
  <LI>Fowler: <EM>"Any fool can write code that a computer can understand. Good 
  programmers write code      that humans can understand."</EM></LI>
  <LI>Beck: <EM>"I'm not a great programmer, I'm just good a programmer with 
  great      habits."</EM></LI></UL>
<P>[Update: previously both quotes were credited to Kent Beck. Our thanks go to 
Esko Luontola <A href="http://sourceforge.net/p/mooc-issues/tickets/451/">for 
pointing out this mistake</A>]: </P>
<P>We are now taking the first steps towards becoming good programmers.</P>
<H3>Well indented and "breathing" code</H3>
<P>Let us take a look at a code that first adds numbers to a list and then 
prints the items fo the list. Then all instances of a certain number are removed 
from the list and the list gets printed.</P>
<P>First, we write the code badly and without indentations:</P>
<PRE class="sh_java">
public static void main(String[] args) {
ArrayList&lt;Integer&gt; numbers = new ArrayList&lt;Integer&gt;();
numbers.add(4);
numbers.add(3);
numbers.add(7);
numbers.add(3);
System.out.println("The numbers in the beginning:");
for (int number : numbers) {
System.out.println(number);
}
while (numbers.contains(Integer.valueOf(3))) {
numbers.remove(Integer.valueOf(3));
}
System.out.println("The numbers after removal:");
for (int number : numbers) {
System.out.println(number);
}
</PRE>
<P>Even though the unindented code works, it is unpleasant to read. Let us 
indent the code (you can get NetBeans to auto-indent your code by pressing 
Alt+Shift+F) and separate logical parts with line breaks:</P>
<PRE class="sh_java">public static void main(String[] args) {
    ArrayList&lt;Integer&gt; numbers = new ArrayList&lt;Integer&gt;();
    numbers.add(4);
    numbers.add(3);
    numbers.add(7);
    numbers.add(3);

    System.out.println("The numbers in the beginning:");

    // here we print numbers
    for (int number : numbers) {
        System.out.println(number);
    }

    // checks if the list contains the number 3
    while (numbers.contains(Integer.valueOf(3))) {
        numbers.remove(Integer.valueOf(3));  // if yes, it is removed
    }
    // we use a while structure to get all the threes removed!

    System.out.println("The numbers after removal:");

     // here we print numbers
    for (int number : numbers) {
        System.out.println(number);
    }
}
</PRE>
<P>Now, the code starts to make sense. For example, the printing and the number 
removal are two logical parts, therefore they are separated with line breaks. 
The code is <EM>airy</EM> and reading the code is much more pleasant.</P>
<P>There are even comments in the code to help the reader understand what 
happens and where!</P>
<H3>Getting rid of copy-paste with methods</H3>
<P>What could be called the Original sin of a programmer is to create copy-paste 
code. This means using the same code in multiple places by copy-pasting it 
around the source code. In our example, the printing of the list is done twice. 
The code that handles the printing part should be separated as its own method. 
Then the printing method should be called from the main program:</P>
<PRE class="sh_java">public static void main(String[] args) {
    ArrayList&lt;Integer&gt; numbers = new ArrayList&lt;Integer&gt;();
    numbers.add(4);
    numbers.add(3);
    numbers.add(7);
    numbers.add(3);

    System.out.println("The numbers in the beginning:");

    // here we print numbers
    print(numbers);

    while (numbers.contains(Integer.valueOf(3))) {
        numbers.remove(Integer.valueOf(3));
    }

    System.out.println("The numbers after removal:");

    // here we print numbers
    print(numbers);
}

public static void print(ArrayList&lt;Integer&gt; numbers) {
    for (int number : numbers) {
        System.out.println( number );
    }
}
</PRE>
<H3>Slicing separate tasks into methods with descriptive names</H3>
<P>Now, the code has become even more easy to read. A distinctively separate 
entity, the printing of the list is now a method that is easy to understand. By 
defining a new method the readability of the main program has improved. Pay 
attention to the descriptive name of the method: the name describes exactly what
 the method does. Next, we can remove the advising comments <EM>here we print 
numbers</EM> , because the name of the method speaks for itself.</P>
<P>There is still room for improvements in writing the program. The main program 
still looks a bit messy, since there is an "unaesthetic" code line that directly 
manipulates the list, in between the neat method calls. Let us turn that 
unaesthetic piece of code into a method:</P>
<PRE class="sh_java">public static void main(String[] args) {
    ArrayList&lt;Integer&gt; numbers = new ArrayList&lt;Integer&gt;();
    numbers.add(4);
    numbers.add(3);
    numbers.add(7);
    numbers.add(3);

    System.out.println("The numbers in the beginning:");
    print(numbers);

    remove(numbers, 3);

    System.out.println("The numbers after removal:");
    print(numbers);
}

public static void print(ArrayList&lt;Integer&gt; numbers) {
    for (int number : numbers) {
        System.out.println( number );
    }
}

public static void remove(ArrayList&lt;Integer&gt; numbers, int removed) {
    while (numbers.contains(Integer.valueOf(removed))) {
        numbers.remove(Integer.valueOf(removed));
    }
}
</PRE>
<P>In the example above, we created a new descriptively named method out of a 
separate logical entity, i.e. removing all the instances of a certain number. 
The resulting main program is now very understandable - almost like natural 
language. Both methods are very simple and easy to understand as well.</P>
<P>Kent Beck might be proud of what we have accomplished! The code is easy to 
understand, easy to modify and does not include any copy-paste.</P><!--

DEPRECATED

<div class="tehtavat">
  <h3>Texter</h3>

<p><b>Note: the assignment has proved to be quite challenging for the first assignment of the week. If you do not immediately get what is the point in this assignment, skip it and do the rest of the assignments first before getting back to this.</b></p>

  <p>The assignment files contain a text editor made by Curtis Coder. The program is created as one single method!  Your job is to <em>refactor the code</em>, meaning that you should clean the code up following the principals given in the example above.</p>

  <h4>Commands away from main</h4>

  <p> Create an own method for each of the commands excluding quit. The method that corresponds to the command gets a reader (so that it can interact with the user) and a list of lines (so that it is able to modify them) as parameters. Create the methods:</p>
    <ul>
      <li><code>public static void print(Scanner reader, ArrayList&lt;String&gt; lines)</code></li>
      <li><code>public static void reset(Scanner reader, ArrayList&lt;String&gt; lines)</code></li>
      <li><code>public static void remove(Scanner reader, ArrayList&lt;String&gt; lines)</code></li>
      <li><code>public static void add(Scanner reader, ArrayList&lt;String&gt; lines)</code></li>
      <li><code>public static void count(Scanner reader, ArrayList&lt;String&gt; lines)</code></li>
    </ul>
  <p>After the methods are finished you should change the main method code so that it uses the newly-created methods to implement the commands. The new main method should only ask the name of the command from the user and then call the right method (from the list above) to do the work. The program should work like the original did regardless of the cleanup!</p>

  <h4>Reading the line number</h4>

  <p>After the now taken measures the code still has some repetition left, the reading of the line numbers. Create the method <code>public static int askLineNumber(String question,
 Scanner reader)</code>. This method prints the question and reads the line number. Return value is -1 if the user entered a blank line (i.e. just pressed enter).</p>

<p><strong>Hint:</strong> you can use the following method body:</p>


<pre class="sh_java">
    public static int askLineNumber(String question, Scanner reader) {
        System.out.println(question);
        String line = // read a line from the user

        // if the line was empty, -1 gets returned;
        if (line.isEmpty()) {
            return -1;
        }

        // otherwise turn the line variable into an integer using Integer.parseint and return that
        return ...
    }
</pre>

  <h4>Call the method <code>askLineNumber</code> from the method <code>remove</code></h4>

  <p>The method <code>remove</code> reads a line number from the user.
Change the <code>remove</code> method to use the <code>askLineNumber</code> method you just created.</p>

  <h4>Call the <code>askLineNumber</code> method from the method <code>add</code></h4>

  <p>The method <code>add</code> reads a line number from the user as well.
Use the <code>askLineNumber</code> method to read the line number.</p>

  <h3>The least common multiple</h3>

  <p>In this assignment the least common multiple of two numbers is calculated using their greatest common divisor. </p>

  <p><a href="http://en.wikipedia.org/wiki/Least_common_multiple">The least common multiple</a> is the smallest whole number that is exactly divisible (i.e. remainder is 0) by the numbers in question. It can be calculated easily, if we know the greatest common divisor of the numbers.
<a href="http://en.wikipedia.org/wiki/Greatest_common_divisor">The greatest common divisor</a> means the greatest number that divides the numbers in question so that the result is a whole number.</p>

  <p>For example, the greatest common divisor of the numbers 32 and 6 is 2, because 32 / 2 = 16 and 6 / 2 = 3 and there is no greater number that those two numbers could be exactly divided with.</p>

  <p>The least common multiple of the numbers 32 and 6 is 96, because 96 / 32 = 3 ja 96 / 6 = 16, and there is no smaller number that those two numbers could be exactly divided with.</p>

  <h4>Calculating the greatest common divisor</h4>

  <p>Create the method <code>public static int greatestCommonDivisor(int number1, int number2)</code> into the class <code>LeastCommonMultiple</code>. The method calculates the greatest common divisor of the two numbers it gets as parameters and retuns the resulting number.</p>

--> <!--

Alla oleva materiaali on nyt oikea. Sisältää jo koko ohpen. Mukaanlukien 1 jo käännetty tehtävä

--> 
<H2 id="olio_ohjelmointi">Object-oriented programming</H2>
<P>Before we begin, here is a small introduction to object-oriented 
programming.</P>
<P>In procedural programming - which is the way of programming we have been 
studying so far - a program is divided in to smaller parts, methods. A method 
works as a separate part of a program and it can be called from anywhere in the 
program. When a method is called, execution of the program moves to the 
beginning of the called method. After the execution of the method is done, the 
program will continue from where the method was called.</P>
<P>In object oriented programming, just like in procedural programming, we 
attempt to divide a program into smaller parts. In object-oriented programming 
the small parts are objects. Each separate object has its own individual 
responsibility; an object contains a related group of information and
 functionality. Object-oriented programs consist of multiple objects which 
together define how the program works.</P>
<H3>Object</H3>
<P>We have already used many of the ready-made objects in Java. For example, 
<CODE>ArrayLists</CODE> are objects. Each separate list consists of information 
related to it; that is, <I>the state of the  object</I>. Functionality is also 
contained in the ArrayList objects: the methods by which the state of the object 
can be altered. As an example, there are two ArrayList objects in the following 
piece of code, <CODE>cities</CODE> and <CODE>countries</CODE> :</P>
<PRE class="sh_java">public static void main(String[] args) {
    ArrayList&lt;String&gt; cities = new ArrayList&lt;String&gt;();
    ArrayList&lt;String&gt; countries = new ArrayList&lt;String&gt;();

    countries.add("Finland");
    countries.add("Germany");
    countries.add("Netherlands");

    cities.add("Berliini");
    cities.add("Nijmegen");
    cities.add("Turku");
    cities.add("Helsinki");

    System.out.println("number of countries " + countries.size() );
    System.out.println("number of cities " + cities.size() );
}
</PRE>
<P>Both the <CODE>countries</CODE> object and the <CODE>cities</CODE> object 
live a life of their own. The state of each is not related to the state of the 
other. For example, the state of the <CODE>countries</CODE> object consists of 
the Strings "Finland", "Germany" and "Netherlands" that are in the list, 
probably also the information of how many countries are in the list.</P>
<P>When doing a method call related to an object (for example, 
<CODE>countries.add("Finland");</CODE>), the name of the object whose method is 
being called goes to the left side of the period sign (dot), and to the right 
side goes the name of the method itself. When asking how many Strings the 
<CODE>countries</CODE> list contains, we call countries.size(). We are calling 
the method <CODE>size</CODE> of the object <CODE>countries</CODE>. What the 
method returns depends on the state of the object in question, other objects do 
not affect the execution of the method in any way.</P>
<P>We have used the command <CODE>new</CODE> many times already. For example, 
creation of a list (<CODE>ArrayList</CODE>) and creation of a reader 
(<CODE>Scanner</CODE>) have been done using the command <CODE>new</CODE>. The 
reason is that both of these are <EM>classes</EM> from which the object is 
created. In Java, objects are always created with <CODE>new</CODE>, except in a 
few cases.</P>
<P>One of the cases where you do not always need to use <CODE>new</CODE> is in 
the construction of Strings. The familiar way to create a String is actually an 
abbreviated way of using <CODE>new</CODE>. A String can also be created with new 
just like any other object:</P>
<PRE class="sh_java">String text = "some text";       // abbreviated way of creating a String
String anotherText = new String("more text");
</PRE>
<P>Cases in which ready-made parts of Java call <CODE>new</CODE> out of sight of 
the programmer also exist.</P>
<H3>Class</H3>
<P>It is clear that all objects are not similar to one another. For example, 
<CODE>ArrayList</CODE> objects differ drastically from <CODE>String</CODE> 
objects. All <CODE>ArrayList</CODE>s have the same methods <CODE>add</CODE>, 
<CODE>contains</CODE>, <CODE>remove</CODE>, <CODE>size</CODE>, ... and
 respectively all <CODE>String</CODE> objects have the same methods 
(<CODE>substring</CODE>, <CODE>length</CODE>, <CODE>charAt</CODE>, ...). 
Arraylist and String objects do not have the same methods because they are 
different types of objects.</P>
<P>The type of a certain group of objects is called a <STRONG>class</STRONG>. 
<CODE>ArrayList</CODE> is a class, as are <CODE>String</CODE>, 
<CODE>Scanner</CODE>, and so forth. Objects, on the other hand, are 
<EM>instances</EM> of classes.</P>
<P>Objects of the same class all have the same methods and a similar state. For 
example, the state of an <CODE>ArrayList</CODE> object consists of elements 
inserted to the list while the state of a <CODE>String</CODE> object consists of 
a string of characters.</P>
<H3>A class and its objects</H3>
<P>A <B>class defines</B> what kind of objects it has:</P>
<UL>
  <LI><B>what methods the objects have</B></LI>
  <LI><B>what the state of the objects are, or in other words, what kind of 
  attributes the objects    have</B></LI></UL>
<P>A class describes the "blueprint" of the objects that are made out of it (are 
instances of it).</P>
<P>Lets take an analogy from the world outside of computers: the blueprints of a 
house. The blueprints define how the building is to be built and in that way 
dictate the shape and size of it. The blueprints are the class, they define the 
general characteristics of the objects created out of that class:</P>
<P><IMG src="Basic%20of%20Object_files/class.jpg"></P>
<P>Individual objects, the houses in our analogy, are made from that same 
blueprint. They are instances of the same class. The state of individual 
objects, the attributes, can vary (color of walls, building material of the 
roof, doors, windowsills, etc...). Here is one instance of a House object:</P>
<P><IMG height="250" src="Basic%20of%20Object_files/object.jpg"></P>
<P>An object is always created from its class by calling the method - the 
<EM>constructor</EM> - that creates the object with the command 
<CODE>new</CODE>. For example, a new instance is created from the class Scanner 
by calling <CODE>new Scanner(..)</CODE>:</P>
<PRE class="sh_java">Scanner reader = new Scanner(System.in);
</PRE>
<P>Constructors take parameters the way any other method does.</P>
<DIV class="tehtavat">
<DIV class="tehtava">
<H3>Accounts</H3>
<P>You are handed a ready-made class <CODE>Account</CODE> along with your 
exercise files. The object    of the class <CODE>Account</CODE> represents a 
bank account that has a balance (meaning some    amount of money). The accounts 
are used as follows:</P>
<PRE class="sh_java">Account bartosAccount = new Account("Barto's account",100.00);
Account bartosSwissAccount = new Account("Barto's account in Switzerland",1000000.00);

System.out.println("Initial state");
System.out.println(bartosAccount);
System.out.println(bartosSwissAccount);

bartosAccount.withdrawal(20);
System.out.println("Barto's account balance is now: "+bartosAccount.balance());
bartosSwissAccount.deposit(200);
System.out.println("Barto's Swiss account balance is now: "+bartosSwissAccount.balance());

System.out.println("Final state");
System.out.println(bartosAccount);
System.out.println(bartosSwissAccount);
    </PRE>
<H4>Your first account</H4>
<P><B>Note:</B> there is a different exercise template for each of the 
sub-exercises.    For this exercise use the template 072.1</P>
<P>Create a program that creates an account with the balance of 100.0, deposits 
20.0 and prints    the account. <STRONG>Note!</STRONG> do all the steps 
described in the exercise exactly in the    described order!</P>
<H4>Your first money transfer</H4>
<P><B>Note:</B> there is a different exercise template for each of the 
sub-exercises.    For this exercise use the template 072.2</P>
<P>Create a program that:</P>
<OL>
  <LI>Creates an account named <CODE>"Matt's account"</CODE> with the balance    
    of 1000</LI>
  <LI>Creates an account named <CODE>"My account"</CODE> with the balance of 
  0</LI>
  <LI>Withdraws 100.0 from Matt's account</LI>
  <LI>Deposits 100.0 to My account</LI>
  <LI>Prints both accounts</LI></OL>
<H4>Money transfers</H4>
<P><B>Note:</B> there is a different exercise template for each of the 
sub-exercises.    For this exercise use the template 072.3</P>
<P>In the above program, you made a money transfer from one person to another. 
Let us next    create a method that does the same!</P>
<P>Create the method <CODE>public static void transfer(Account from, Account to, 
double      howMuch)</CODE> in the given program body. The method transfers 
money from one account to    another. You do not need to check that the 
<CODE>from</CODE> account has enough balance.</P>
<P>After completing the above, make sure that your <CODE>main</CODE> method does 
the following:</P>
<OL>
  <LI>Creates an account <CODE>"A"</CODE> with the balance of 100.0</LI>
  <LI>Creates an account <CODE>"B"</CODE> with the balance of 0.0</LI>
  <LI>Creates an account <CODE>"C"</CODE> with the balance of 0.0</LI>
  <LI>Transfers 50.0 from account A to account B</LI>
  <LI>Transfers 25.0 from account B to account C</LI></OL></DIV></DIV>
<H3>Defining your own class - object variables</H3>
<P>A class is defined to serve some meaningful whole. Often a "meaningful whole" 
represents something from the real world. If a computer program needs to handle 
personal data it could be sensible to define a separate class 
<CODE>Person</CODE> which then holds methods and attributes related to an
 individual.</P>
<P>Let us go ahead and assume that we have a project frame with an empty main 
program:</P>
<PRE class="sh_java sh_sourceCode"><SPAN class="sh_keyword">public</SPAN> <SPAN class="sh_keyword">class</SPAN><SPAN class="sh_normal"> </SPAN><SPAN class="sh_classname">Main</SPAN> <SPAN class="sh_cbracket">{</SPAN>

    <SPAN class="sh_keyword">public</SPAN> <SPAN class="sh_keyword">static</SPAN> <SPAN class="sh_type">void</SPAN> <SPAN class="sh_function">main</SPAN><SPAN class="sh_symbol">(</SPAN>String<SPAN class="sh_symbol">[]</SPAN> args<SPAN class="sh_symbol">)</SPAN> <SPAN class="sh_cbracket">{</SPAN>
    <SPAN class="sh_cbracket">}</SPAN>

<SPAN class="sh_cbracket">}</SPAN>
</PRE>
<P>We will create a new class in our project. In NetBeans, this can be done in 
<EM>projects</EM> on the left, from the right click menu select <EM>new</EM>, 
<EM>java class</EM>. We will name the class in the dialog that pops up.</P>
<P>Just as with variables and methods, the name of the class should always be as 
descriptive as possible. Sometimes as a project progresses a class might 
transform into something different in order meet the programmer's needs. In 
situations like this, it is possible to rename your class with ease (<A href="http://mooc.fi/courses/general/programming/#netbeans-tips">see 
the NetBeans  guide</A>).</P>
<P>Let us create a class named <CODE>Person</CODE>. The class will exist in its 
own <CODE>Person.java</CODE> file. Since the main program is in its own file the 
program now consists of two files in total. At first the class will be 
empty:</P>
<PRE class="sh_java sh_sourceCode"><SPAN class="sh_keyword">public</SPAN> <SPAN class="sh_keyword">class</SPAN><SPAN class="sh_normal"> </SPAN><SPAN class="sh_classname">Person</SPAN> <SPAN class="sh_cbracket">{</SPAN>

<SPAN class="sh_cbracket">}</SPAN>
</PRE>
<P>The class has to define what methods and attributes the objects created from 
the class will have. Let us decide that each person has a name and an age. It 
feels natural to represent the name as a String and the age as an integer. Let 
us add this to our schematics:</P>
<PRE class="sh_java sh_sourceCode"><SPAN class="sh_keyword">public</SPAN> <SPAN class="sh_keyword">class</SPAN><SPAN class="sh_normal"> </SPAN><SPAN class="sh_classname">Person</SPAN> <SPAN class="sh_cbracket">{</SPAN>
    <SPAN class="sh_keyword">private</SPAN> <SPAN class="sh_usertype">String</SPAN><SPAN class="sh_normal"> </SPAN>name<SPAN class="sh_symbol">;</SPAN>
    <SPAN class="sh_keyword">private</SPAN> <SPAN class="sh_type">int</SPAN> age<SPAN class="sh_symbol">;</SPAN>
<SPAN class="sh_cbracket">}</SPAN>
</PRE>
<P>Above, we defined that all instances created from the <CODE>Person</CODE> 
class have a name and an age. Defining attributes is done in a quite similar 
fashion as with normal variables. In this case though, there is the keyword 
<CODE>private</CODE> in front. This keyword means that <CODE>name</CODE> and 
<CODE>age</CODE> will not show outside of the object, but are instead hidden 
within it. Hiding things within an object is called <EM>encapsulation</EM>.</P>
<P>Variables defined within a class are called <I>object variables</I>, 
<I>object fields</I> or <I>object attributes</I>. A beloved child has many 
names.</P>
<P>So, we have defined the schematics -- the class -- for the person object. All 
person objects have the variables <CODE>name</CODE> and <CODE>age</CODE>. The 
'state' of the objects is determined by the values that have been set to its 
variables.</P>
<H3>Defining your own class - constructor, or "formatting the state"</H3>
<P>When an object is created its starting state is defined at the same time. 
Self-defined objects are created for the most part in the same way as ready-made 
objects (<CODE>ArrayList</CODE> objects for example) are created. Objects are 
created with the <CODE>new</CODE> command. When creating an object it would be
 handy to be able to set the values of some of the variables of that object.</P>
<PRE class="sh_java sh_sourceCode">    <SPAN class="sh_keyword">public</SPAN> <SPAN class="sh_keyword">static</SPAN> <SPAN class="sh_type">void</SPAN> <SPAN class="sh_function">main</SPAN><SPAN class="sh_symbol">(</SPAN>String<SPAN class="sh_symbol">[]</SPAN> args<SPAN class="sh_symbol">)</SPAN> <SPAN class="sh_cbracket">{</SPAN>
        <SPAN class="sh_usertype">Person</SPAN><SPAN class="sh_normal"> </SPAN>bob <SPAN class="sh_symbol">=</SPAN> <SPAN class="sh_keyword">new</SPAN> <SPAN class="sh_function">Person</SPAN><SPAN class="sh_symbol">(</SPAN><SPAN class="sh_string">"Bob"</SPAN><SPAN class="sh_symbol">);</SPAN>
        <SPAN class="sh_comment">// ...</SPAN>
    <SPAN class="sh_cbracket">}</SPAN>
</PRE>
<P>This can be achieved by defining the method that creates the object, <EM>the 
constructor</EM>. The constructor for the <CODE>Person</CODE> class that creates 
a new <CODE>Person</CODE> object has been defined in the following example. In 
the constructor, the person that is being created gets 0 as her age and her name 
is received from the parameter of the constructor.</P>
<PRE class="sh_java sh_sourceCode"><SPAN class="sh_keyword">public</SPAN> <SPAN class="sh_keyword">class</SPAN><SPAN class="sh_normal"> </SPAN><SPAN class="sh_classname">Person</SPAN> <SPAN class="sh_cbracket">{</SPAN>
    <SPAN class="sh_keyword">private</SPAN> <SPAN class="sh_usertype">String</SPAN><SPAN class="sh_normal"> </SPAN>name<SPAN class="sh_symbol">;</SPAN>
    <SPAN class="sh_keyword">private</SPAN> <SPAN class="sh_type">int</SPAN> age<SPAN class="sh_symbol">;</SPAN>

    <SPAN class="sh_keyword">public</SPAN> <SPAN class="sh_function">Person</SPAN><SPAN class="sh_symbol">(</SPAN><SPAN class="sh_usertype">String</SPAN><SPAN class="sh_normal"> </SPAN>initialName<SPAN class="sh_symbol">)</SPAN> <SPAN class="sh_cbracket">{</SPAN>
        <SPAN class="sh_keyword">this</SPAN><SPAN class="sh_symbol">.</SPAN>age <SPAN class="sh_symbol">=</SPAN> <SPAN class="sh_number">0</SPAN><SPAN class="sh_symbol">;</SPAN>
        <SPAN class="sh_keyword">this</SPAN><SPAN class="sh_symbol">.</SPAN>name <SPAN class="sh_symbol">=</SPAN> initialName<SPAN class="sh_symbol">;</SPAN>
    <SPAN class="sh_cbracket">}</SPAN>
<SPAN class="sh_cbracket">}</SPAN>
</PRE>
<P>The constructor always has the same name as the class. In the code above, the 
class is <CODE>Person</CODE> and the constructor is <CODE>public Person(String 
initialName)</CODE>. The value the constructor receives as a parameter is in 
parentheses after the name of the constructor. You can imagine the constructor 
as a method that Java runs when an object is created with the command <CODE>new  
Person("Bob");</CODE> Whenever an object is created from a class, the 
constructor of that class is called.</P>
<P>A few notes: within the constructor there is a command <CODE>this.age = 
0</CODE>. Through it, we set a value for this particular object; we define the 
internal variable age of "this" object. Another command we use is 
<CODE>this.name = initialName;</CODE>. Again, we give the internal variable 
called name the String that is defined in the constructor. The variables 
<CODE>age</CODE> and <CODE>name</CODE> are automatically visible in the
 constructor and elsewhere in the object. They are referred to with the 
<CODE>this</CODE> prefix. Due to the <CODE>private</CODE> modifier, the 
variables cannot be seen from outside the object.</P>
<P>One more thing: if the programmer does not create a constructor for her 
class, Java will automatically create a default constructor for it. A default 
constructor is a constructor that does nothing. So, if you for some reason do 
not need a constructor you do not need to write one.</P>
<H3>Class definition - methods</H3>
<P>We already know how to create and initialize objects. However, objects are 
useless if they cannot do anything. Therefore, objects should have methods. Let 
us add to the <CODE>Person</CODE> class a method that prints the object on the 
screen:</P>
<PRE class="sh_java">public class Person {
    private String name;
    private int age;

    public Person(String nameAtStart) {
        this.age = 0;
        this.name = nameAtStart;
    }

    public void printPerson() {
        System.out.println(this.name + ", age " + this.age + " years");
    }
}
</PRE>
<P>As seen above, the method is written within the class. The method name is 
prefixed with <CODE>public  void</CODE> since it is assumed that users of the 
object should be capable of using the method and the method should not return 
anything. With objects the keyword <CODE>static</CODE> is not used in method
 definitions. Next week, we will clarify the reason behind that.</P>
<P>Inside the method <CODE>printPerson</CODE>, there is a single line of code 
that uses the object variables <CODE>name</CODE> and <CODE>age</CODE>. The 
prefix <CODE>this</CODE> is used to emphasize that we are referring to the name 
and age of <EM>this</EM> object. All the object variables are visible from all 
the methods of the object.</P>
<P>Let us create three persons and ask them to print themselves:</P>
<PRE class="sh_java">public class Main {

    public static void main(String[] args) {
        Person pekka = new Person("Pekka");
        Person brian = new Person("Brian");
        Person martin = new Person("Martin");

        pekka.printPerson();
        brian.printPerson();
        martin.printPerson();
    }
}
</PRE>
<P>The output is:</P>
<PRE>Pekka, age 0 years
Brian, age 0 years
Martin, age 0 years
</PRE>
<DIV class="tehtavat">
<DIV class="tehtava">
<H3>Product</H3>
<P>Create a class <CODE>Product</CODE> that represents a product sold in a 
webshop. A product    has a price, amount and name.</P>
<P>A new class can be created as follows: Point at the project 
<EM>073.Product</EM> in the     <EM>projects</EM> tab and click the right mouse 
button. Then select <EM>new</EM> and <EM>java      class</EM>. When a dialog 
opens, give the class the name <CODE>Product</CODE>.</P>
<P>The class should have:</P>
<UL>
  <LI>A constructor <CODE>public Product(String nameAtStart, double 
  priceAtStart, int        amountAtStart)</CODE></LI>
  <LI>A method <CODE>public void printProduct()</CODE> that prints a product in 
  the following      form:       
<PRE>Banana, price 1.1, amount 13
      </PRE></LI></UL></DIV></DIV>
<H3>More methods</H3>
<P>Let us create a method that can be used to increase the age of a person by 
one:</P>
<PRE class="sh_java">public class Person {
    // ...

    public void becomeOlder() {
        this.age++;;    // same as this.age = this.age + 1;
    }
}
</PRE>
<P>As expected, the method is written inside the class <CODE>Person</CODE>. The 
method increases the value of object variable <CODE>age</CODE> by one.</P>
<P>Let us call the method and see what happens:</P>
<PRE class="sh_java">public class Main {

    public static void main(String[] args) {
        Person pekka = new Person("Pekka");
        Person andrew = new Person("Andrew");

        pekka.printPerson();
        andrew.printPerson();

        System.out.println("");

        pekka.becomeOlder();
        pekka.becomeOlder();

        pekka.printPerson();
        andrew.printPerson();
    }
}
</PRE>
<P>Output:</P>
<PRE>Pekka, age 0 years
Andrew, age 0 years

Pekka, age 2 years
Andrew, age 0 years
</PRE>
<P>When born, both objects have age 0 due to the line <CODE>this.age = 0;</CODE> 
in the constructor. The method <CODE>becomeOlder</CODE> of object 
<CODE>pekka</CODE> is called twice. As the output shows, this causes the age of 
pekka to increase by two. It should be noted that when the method 
<CODE>becomeOlder</CODE> is called in the object <CODE>pekka</CODE>, the other 
object <CODE>andrew</CODE> is not touched at all and he remains at age 0. The 
state of an object is independent of the other objects!</P>
<P>Also, the object methods can return a value to the caller of the method. Let 
us define a method that can be used to ask for the age of a person:</P>
<PRE class="sh_java">public class Person {
    // ...

    public int getAge() {
        return this.age;
    }
}
</PRE>
<P>Now the <CODE>void</CODE> in the method definition is replaced with 
<CODE>int</CODE> since the value the method returns has the type integer. The 
following example demonstrates, how the value returned by a method can be 
used:</P>
<PRE class="sh_java">public class Main {

    public static void main(String[] args) {
        Person pekka = new Person("Pekka");
        Person andrew = new Person("Andrew");

        pekka.becomeOlder();
        pekka.becomeOlder();

        andrew.becomeOlder();

        System.out.println( "Age of Pekka: "+pekka.getAge() );
        System.out.println( "Age of Andrew: "+andrew.getAge() );

        int total = pekka.getAge() + andrew.getAge();

        System.out.println( "Pekka and Andrew total of "+total+ " years old" );
    }
}
</PRE>
<P>Output:</P>
<PRE>Age of Pekka: 2
Age of Andrew: 1

Pekka and Andrew total of 3 years old
</PRE>
<DIV class="tehtavat">
<DIV class="tehtava">
<H3>Multiplier</H3>
<P>Implement the class <CODE>Multiplier</CODE> that has:</P>
<UL>
  <LI>a constructor <CODE>public Multiplier(int number)</CODE>.</LI>
  <LI>a method <CODE>public int multiply(int otherNumber)</CODE> that returns    
     <CODE>otherNumber</CODE> multiplied by <CODE>number</CODE> (i.e., the 
  constructor      parameter).</LI></UL>
<P>Example of usage:</P>
<PRE class="sh_java">Multiplier threeMultiplier = new Multiplier(3);
System.out.println("threeMultiplier.multiply(2): " + threeMultiplier.multiply(2));

Multiplier fourMultiplier = new Multiplier(4);
System.out.println("fourMultiplier.multiply(2): " + fourMultiplier.multiply(2));

System.out.println("threeMultiplier.multiply(1): " + threeMultiplier.multiply(1));
System.out.println("fourMultiplier.multiply(1): " + fourMultiplier.multiply(1));
    </PRE>
<P>Output</P>
<PRE>threeMultiplier.multiply(2): 6
fourMultiplier.multiply(2): 8
threeMultiplier.multiply(1): 3
fourMultiplier.multiply(1): 4
    </PRE></DIV>
<DIV class="tehtava">
<H3>Decreasing counter</H3>
<P>The starting point of this exercise is a partially implemented class     
<CODE>DecreasingCounter</CODE>:</P>
<PRE class="sh_java">public class DecreasingCounter {
    private int value;   // object variable that remembers the value of the counter

    public DecreasingCounter(int valueAtStart) {
        this.value = valueAtStart;
    }

    public void printValue() {
        System.out.println("value: " + this.value);
    }

    public void decrease() {
        // write here the code that decrements the value of counter by one
    }

    // and here the rest of the methods
}
    </PRE>
<P>The counter can be used as follows:</P>
<PRE class="sh_java">public class Main {
    public static void main(String[] args) {
        DecreasingCounter counter = new DecreasingCounter(10);

        counter.printValue();

        counter.decrease();
        counter.printValue();

        counter.decrease();
        counter.printValue();
    }
}
    </PRE>
<P>Output should be:</P>
<PRE>value: 10
value: 9
value: 8
    </PRE>
<P>The constructor of <CODE>DecreasingCounter</CODE> receives as parameter the 
initial value of    the counter. In the example, the constructor parameter is 
<CODE>10</CODE>, which is then set to the    object variable 
<CODE>this.value</CODE>. The value of the counter can be printed with the method 
    <CODE>printValue()</CODE>. The method <CODE>decrease()</CODE> should 
decrease the value of the    counter by one.</P>
<H4>Implementing method decrease()</H4>
<P>Implement the method <CODE>decrease()</CODE> so that when called, the object 
variable     <CODE>this.value</CODE> is decreased by one. When this is done, 
your program should work as the    example above.</P>
<H4>Value remains positive</H4>
<P>Change your implementation of the method <CODE>decrease()</CODE> so that the 
value of the    counter will not drop below zero. If the method is called when 
the value is zero, nothing    should happen:</P>
<PRE class="sh_java">public class Main {
    public static void main(String[] args) {
        DecreasingCounter counter = new DecreasingCounter(2);

        counter.printValue();

        counter.decrease();
        counter.printValue();

        counter.decrease();
        counter.printValue();

        counter.decrease();
        counter.printValue();
    }
}
    </PRE>
<P>Output should be:</P>
<PRE>value: 2
value: 1
value: 0
value: 0
    </PRE>
<H4>Counter reset</H4>
<P>Implement the method <CODE>public void reset()</CODE> that sets the value of 
the counter to    zero. Example of usage:</P>
<PRE class="sh_java">public class Main {
    public static void main(String[] args) {
        DecreasingCounter counter = new DecreasingCounter(100);

        counter.printValue();

        counter.reset();
        counter.printValue();

        counter.decrease();
        counter.printValue();
    }
}
    </PRE>
<P>Output:</P>
<PRE>value: 100
value: 0
value: 0
    </PRE>
<H4>Back to initial value</H4>
<P>Implement the method <CODE>public void setInitial()</CODE>, which returns the 
counter to its    initial value:</P>
<PRE class="sh_java">public class Main {
    public static void main(String[] args) {
        DecreasingCounter counter = new DecreasingCounter(100);

        counter.printValue();

        counter.decrease();
        counter.printValue();

        counter.decrease();
        counter.printValue();

        counter.reset();
        counter.printValue();

        counter.setInitial();
        counter.printValue();
    }
}
    </PRE>
<P>Output:</P>
<PRE>value: 100
value: 99
value: 98
value: 0
value: 100
    </PRE>
<P><STRONG>Hint</STRONG>: add to the class a new object variable that remembers 
the initial    value of the counter</P></DIV>
<DIV class="tehtava">
<H3>Menu</H3>
<P>In this assignment, we will implement a class <CODE>Menu</CODE> that holds 
information about    meals that are available in a cafeteria.</P>
<P>Our starting point is the following class skeleton:</P>
<PRE class="sh_java">import java.util.ArrayList;

public class Menu {

    private ArrayList&lt;String&gt; meals;

    public Menu() {
        this.meals = new ArrayList&lt;String&gt;();
    }

    // Implement the methods here
}
    </PRE>
<P>Menu objects store the information of meals using an object variable of type  
  ArrayList&lt;String&gt;</P>
<H4>Adding a meal to menu</H4>
<P>Implement the method <CODE>public void addMeal(String meal)</CODE> that adds 
a new meal to    the list <CODE>this.meals</CODE> of a Menu object. If the meal 
is already in the list, it    should not be added.</P>
<H4>Printing the menu</H4>
<P>Implement the method <CODE>public void printMeals()</CODE> that prints the 
meals in a menu.    As an example, the output after three additions could 
be:</P>
<PRE>Hamburger
Fish'n'Chips
Sauerkraut
    </PRE>
<H4>Clearing a menu</H4>
<P>Implement the method <CODE>public void clearMenu()</CODE> that clears a menu. 
After    calling this method, the menu should be empty. Class 
<CODE>ArrayList</CODE> has a method that is    useful here. Within your method 
body write <CODE>meals.</CODE> and see how NetBeans helps you    by showing the 
available methods.</P></DIV></DIV>
<H3>The Person class grows</H3>
<P>Let us get back to work on the <CODE>Person</CODE> class. The current version 
of the class looks like this:</P>
<PRE class="sh_java sh_sourceCode"><SPAN class="sh_keyword">public</SPAN> <SPAN class="sh_keyword">class</SPAN><SPAN class="sh_normal"> </SPAN><SPAN class="sh_classname">Person</SPAN> <SPAN class="sh_cbracket">{</SPAN>
    <SPAN class="sh_keyword">private</SPAN> <SPAN class="sh_usertype">String</SPAN><SPAN class="sh_normal"> </SPAN>name<SPAN class="sh_symbol">;</SPAN>
    <SPAN class="sh_keyword">private</SPAN> <SPAN class="sh_type">int</SPAN> age<SPAN class="sh_symbol">;</SPAN>

    <SPAN class="sh_keyword">public</SPAN> <SPAN class="sh_function">Person</SPAN><SPAN class="sh_symbol">(</SPAN><SPAN class="sh_usertype">String</SPAN><SPAN class="sh_normal"> </SPAN>initialName<SPAN class="sh_symbol">)</SPAN> <SPAN class="sh_cbracket">{</SPAN>
        <SPAN class="sh_keyword">this</SPAN><SPAN class="sh_symbol">.</SPAN>age <SPAN class="sh_symbol">=</SPAN> <SPAN class="sh_number">0</SPAN><SPAN class="sh_symbol">;</SPAN>
        <SPAN class="sh_keyword">this</SPAN><SPAN class="sh_symbol">.</SPAN>name <SPAN class="sh_symbol">=</SPAN> initialName<SPAN class="sh_symbol">;</SPAN>
    <SPAN class="sh_cbracket">}</SPAN>

    <SPAN class="sh_keyword">public</SPAN> <SPAN class="sh_type">void</SPAN> <SPAN class="sh_function">printPerson</SPAN><SPAN class="sh_symbol">()</SPAN> <SPAN class="sh_cbracket">{</SPAN>
        System<SPAN class="sh_symbol">.</SPAN>out<SPAN class="sh_symbol">.</SPAN><SPAN class="sh_function">println</SPAN><SPAN class="sh_symbol">(</SPAN><SPAN class="sh_keyword">this</SPAN><SPAN class="sh_symbol">.</SPAN>name <SPAN class="sh_symbol">+</SPAN> <SPAN class="sh_string">", age "</SPAN> <SPAN class="sh_symbol">+</SPAN> <SPAN class="sh_keyword">this</SPAN><SPAN class="sh_symbol">.</SPAN>age <SPAN class="sh_symbol">+</SPAN> <SPAN class="sh_string">" years"</SPAN><SPAN class="sh_symbol">);</SPAN>
    <SPAN class="sh_cbracket">}</SPAN>

    <SPAN class="sh_keyword">public</SPAN> <SPAN class="sh_type">void</SPAN> <SPAN class="sh_function">becomeOlder</SPAN><SPAN class="sh_symbol">()</SPAN> <SPAN class="sh_cbracket">{</SPAN>
        <SPAN class="sh_keyword">this</SPAN><SPAN class="sh_symbol">.</SPAN>age <SPAN class="sh_symbol">=</SPAN> <SPAN class="sh_keyword">this</SPAN><SPAN class="sh_symbol">.</SPAN>age <SPAN class="sh_symbol">+</SPAN> <SPAN class="sh_number">1</SPAN><SPAN class="sh_symbol">;</SPAN>
    <SPAN class="sh_cbracket">}</SPAN>
<SPAN class="sh_cbracket">}</SPAN>
</PRE>
<P>Let us create a method for person that can figure out if a person is an 
adult. The method returns a boolean -- either <CODE>true</CODE> or 
<CODE>false</CODE>:</P>
<PRE class="sh_java sh_sourceCode"><SPAN class="sh_keyword">public</SPAN> <SPAN class="sh_keyword">class</SPAN><SPAN class="sh_normal"> </SPAN><SPAN class="sh_classname">Person</SPAN> <SPAN class="sh_cbracket">{</SPAN>
    <SPAN class="sh_comment">// ...</SPAN>

    <SPAN class="sh_keyword">public</SPAN> <SPAN class="sh_type">boolean</SPAN> <SPAN class="sh_function">isAdult</SPAN><SPAN class="sh_symbol">()</SPAN><SPAN class="sh_cbracket">{</SPAN>
        <SPAN class="sh_keyword">if</SPAN> <SPAN class="sh_symbol">(</SPAN> <SPAN class="sh_keyword">this</SPAN><SPAN class="sh_symbol">.</SPAN>age <SPAN class="sh_symbol">&lt;</SPAN> <SPAN class="sh_number">18</SPAN> <SPAN class="sh_symbol">)</SPAN> <SPAN class="sh_cbracket">{</SPAN>
            <SPAN class="sh_keyword">return</SPAN> <SPAN class="sh_keyword">false</SPAN><SPAN class="sh_symbol">;</SPAN>
        <SPAN class="sh_cbracket">}</SPAN>

        <SPAN class="sh_keyword">return</SPAN> <SPAN class="sh_keyword">true</SPAN><SPAN class="sh_symbol">;</SPAN>
    <SPAN class="sh_cbracket">}</SPAN>

   <SPAN class="sh_comment">/*</SPAN>
<SPAN class="sh_comment">      note that the method could also be written like this:</SPAN>
<SPAN class="sh_comment">  </SPAN>
<SPAN class="sh_comment">      public boolean isAdult(){</SPAN>
<SPAN class="sh_comment">        return this.age &gt;= 18;</SPAN>
<SPAN class="sh_comment">      }</SPAN>
<SPAN class="sh_comment">   */</SPAN>
<SPAN class="sh_cbracket">}</SPAN>
</PRE>
<P>Let us test it:</P>
<PRE class="sh_java sh_sourceCode">    <SPAN class="sh_keyword">public</SPAN> <SPAN class="sh_keyword">static</SPAN> <SPAN class="sh_type">void</SPAN> <SPAN class="sh_function">main</SPAN><SPAN class="sh_symbol">(</SPAN>String<SPAN class="sh_symbol">[]</SPAN> args<SPAN class="sh_symbol">)</SPAN> <SPAN class="sh_cbracket">{</SPAN>
        <SPAN class="sh_usertype">Person</SPAN><SPAN class="sh_normal"> </SPAN>bob <SPAN class="sh_symbol">=</SPAN> <SPAN class="sh_keyword">new</SPAN> <SPAN class="sh_function">Person</SPAN><SPAN class="sh_symbol">(</SPAN><SPAN class="sh_string">"Bob"</SPAN><SPAN class="sh_symbol">);</SPAN>
        <SPAN class="sh_usertype">Person</SPAN><SPAN class="sh_normal"> </SPAN>andy <SPAN class="sh_symbol">=</SPAN> <SPAN class="sh_keyword">new</SPAN> <SPAN class="sh_function">Person</SPAN><SPAN class="sh_symbol">(</SPAN><SPAN class="sh_string">"Andy"</SPAN><SPAN class="sh_symbol">);</SPAN>

        <SPAN class="sh_type">int</SPAN> i <SPAN class="sh_symbol">=</SPAN> <SPAN class="sh_number">0</SPAN><SPAN class="sh_symbol">;</SPAN>
        <SPAN class="sh_keyword">while</SPAN> <SPAN class="sh_symbol">(</SPAN> i <SPAN class="sh_symbol">&lt;</SPAN> <SPAN class="sh_number">30</SPAN> <SPAN class="sh_symbol">)</SPAN> <SPAN class="sh_cbracket">{</SPAN>
            bob<SPAN class="sh_symbol">.</SPAN><SPAN class="sh_function">becomeOlder</SPAN><SPAN class="sh_symbol">();</SPAN>
            i<SPAN class="sh_symbol">++;</SPAN>
        <SPAN class="sh_cbracket">}</SPAN>

        andy<SPAN class="sh_symbol">.</SPAN><SPAN class="sh_function">becomeOlder</SPAN><SPAN class="sh_symbol">();</SPAN>

        System<SPAN class="sh_symbol">.</SPAN>out<SPAN class="sh_symbol">.</SPAN><SPAN class="sh_function">println</SPAN><SPAN class="sh_symbol">(</SPAN><SPAN class="sh_string">""</SPAN><SPAN class="sh_symbol">);</SPAN>

        <SPAN class="sh_keyword">if</SPAN> <SPAN class="sh_symbol">(</SPAN> andy<SPAN class="sh_symbol">.</SPAN><SPAN class="sh_function">isAdult</SPAN><SPAN class="sh_symbol">()</SPAN> <SPAN class="sh_symbol">)</SPAN> <SPAN class="sh_cbracket">{</SPAN>
            System<SPAN class="sh_symbol">.</SPAN>out<SPAN class="sh_symbol">.</SPAN><SPAN class="sh_function">print</SPAN><SPAN class="sh_symbol">(</SPAN><SPAN class="sh_string">"adult: "</SPAN><SPAN class="sh_symbol">);</SPAN>
            andy<SPAN class="sh_symbol">.</SPAN><SPAN class="sh_function">printPerson</SPAN><SPAN class="sh_symbol">();</SPAN>
        <SPAN class="sh_cbracket">}</SPAN> <SPAN class="sh_keyword">else</SPAN> <SPAN class="sh_cbracket">{</SPAN>
            System<SPAN class="sh_symbol">.</SPAN>out<SPAN class="sh_symbol">.</SPAN><SPAN class="sh_function">print</SPAN><SPAN class="sh_symbol">(</SPAN><SPAN class="sh_string">"minor: "</SPAN><SPAN class="sh_symbol">);</SPAN>
            andy<SPAN class="sh_symbol">.</SPAN><SPAN class="sh_function">printPerson</SPAN><SPAN class="sh_symbol">();</SPAN>
        <SPAN class="sh_cbracket">}</SPAN>

        <SPAN class="sh_keyword">if</SPAN> <SPAN class="sh_symbol">(</SPAN> bob<SPAN class="sh_symbol">.</SPAN><SPAN class="sh_function">isAdult</SPAN><SPAN class="sh_symbol">()</SPAN> <SPAN class="sh_symbol">)</SPAN> <SPAN class="sh_cbracket">{</SPAN>
            System<SPAN class="sh_symbol">.</SPAN>out<SPAN class="sh_symbol">.</SPAN><SPAN class="sh_function">print</SPAN><SPAN class="sh_symbol">(</SPAN><SPAN class="sh_string">"adult: "</SPAN><SPAN class="sh_symbol">);</SPAN>
            bob<SPAN class="sh_symbol">.</SPAN><SPAN class="sh_function">printPerson</SPAN><SPAN class="sh_symbol">();</SPAN>
        <SPAN class="sh_cbracket">}</SPAN> <SPAN class="sh_keyword">else</SPAN> <SPAN class="sh_cbracket">{</SPAN>
            System<SPAN class="sh_symbol">.</SPAN>out<SPAN class="sh_symbol">.</SPAN><SPAN class="sh_function">print</SPAN><SPAN class="sh_symbol">(</SPAN><SPAN class="sh_string">"minor: "</SPAN><SPAN class="sh_symbol">);</SPAN>
            bob<SPAN class="sh_symbol">.</SPAN><SPAN class="sh_function">printPerson</SPAN><SPAN class="sh_symbol">();</SPAN>
        <SPAN class="sh_cbracket">}</SPAN>
    <SPAN class="sh_cbracket">}</SPAN>
</PRE>
<PRE>minor: Andy, age 1 years
adult: bob, age 30 years
</PRE>
<P>Let us tune up the solution a little further. Now, a person can only be 
printed in a manner where in addition to the name, the age also gets printed. In 
some cases, we might only want to print the name of the object. Let us tailor a 
method for this purpose:</P>
<PRE class="sh_java sh_sourceCode"><SPAN class="sh_keyword">public</SPAN> <SPAN class="sh_keyword">class</SPAN><SPAN class="sh_normal"> </SPAN><SPAN class="sh_classname">Person</SPAN> <SPAN class="sh_cbracket">{</SPAN>
    <SPAN class="sh_comment">// ...</SPAN>

    <SPAN class="sh_keyword">public</SPAN> <SPAN class="sh_usertype">String</SPAN><SPAN class="sh_normal"> </SPAN><SPAN class="sh_function">getName</SPAN><SPAN class="sh_symbol">()</SPAN> <SPAN class="sh_cbracket">{</SPAN>
        <SPAN class="sh_keyword">return</SPAN> <SPAN class="sh_keyword">this</SPAN><SPAN class="sh_symbol">.</SPAN>name<SPAN class="sh_symbol">;</SPAN>
    <SPAN class="sh_cbracket">}</SPAN>
<SPAN class="sh_cbracket">}</SPAN>
</PRE>
<P>The method <CODE>getName</CODE> returns the object variable <CODE>name</CODE> 
to its caller. The name of the method might seem a little odd (or not). In Java, 
it is considered the 'correct' way to name an object-variable-returning method 
in this manner; as <CODE>getVariableName</CODE>. Methods like these are often 
called 'getters'.</P>
<P>Let us edit the main program to use the new 'getter':</P>
<PRE class="sh_java sh_sourceCode">    <SPAN class="sh_keyword">public</SPAN> <SPAN class="sh_keyword">static</SPAN> <SPAN class="sh_type">void</SPAN> <SPAN class="sh_function">main</SPAN><SPAN class="sh_symbol">(</SPAN>String<SPAN class="sh_symbol">[]</SPAN> args<SPAN class="sh_symbol">)</SPAN> <SPAN class="sh_cbracket">{</SPAN>
        <SPAN class="sh_usertype">Person</SPAN><SPAN class="sh_normal"> </SPAN>bob <SPAN class="sh_symbol">=</SPAN> <SPAN class="sh_keyword">new</SPAN> <SPAN class="sh_function">Person</SPAN><SPAN class="sh_symbol">(</SPAN><SPAN class="sh_string">"bob"</SPAN><SPAN class="sh_symbol">);</SPAN>
        <SPAN class="sh_usertype">Person</SPAN><SPAN class="sh_normal"> </SPAN>andy <SPAN class="sh_symbol">=</SPAN> <SPAN class="sh_keyword">new</SPAN> <SPAN class="sh_function">Person</SPAN><SPAN class="sh_symbol">(</SPAN><SPAN class="sh_string">"andy"</SPAN><SPAN class="sh_symbol">);</SPAN>

        <SPAN class="sh_type">int</SPAN> i <SPAN class="sh_symbol">=</SPAN> <SPAN class="sh_number">0</SPAN><SPAN class="sh_symbol">;</SPAN>
        <SPAN class="sh_keyword">while</SPAN> <SPAN class="sh_symbol">(</SPAN> i <SPAN class="sh_symbol">&lt;</SPAN> <SPAN class="sh_number">30</SPAN> <SPAN class="sh_symbol">)</SPAN> <SPAN class="sh_cbracket">{</SPAN>
            bob<SPAN class="sh_symbol">.</SPAN><SPAN class="sh_function">becomeOlder</SPAN><SPAN class="sh_symbol">();</SPAN>
            i<SPAN class="sh_symbol">++;</SPAN>
        <SPAN class="sh_cbracket">}</SPAN>

        andy<SPAN class="sh_symbol">.</SPAN><SPAN class="sh_function">becomeOlder</SPAN><SPAN class="sh_symbol">();</SPAN>

        System<SPAN class="sh_symbol">.</SPAN>out<SPAN class="sh_symbol">.</SPAN><SPAN class="sh_function">println</SPAN><SPAN class="sh_symbol">(</SPAN><SPAN class="sh_string">""</SPAN><SPAN class="sh_symbol">);</SPAN>

        <SPAN class="sh_keyword">if</SPAN> <SPAN class="sh_symbol">(</SPAN> andy<SPAN class="sh_symbol">.</SPAN><SPAN class="sh_function">isAdult</SPAN><SPAN class="sh_symbol">()</SPAN> <SPAN class="sh_symbol">)</SPAN> <SPAN class="sh_cbracket">{</SPAN>
            System<SPAN class="sh_symbol">.</SPAN>out<SPAN class="sh_symbol">.</SPAN><SPAN class="sh_function">println</SPAN><SPAN class="sh_symbol">(</SPAN> andy<SPAN class="sh_symbol">.</SPAN><SPAN class="sh_function">getName</SPAN><SPAN class="sh_symbol">()</SPAN> <SPAN class="sh_symbol">+</SPAN> <SPAN class="sh_string">" is an adult"</SPAN> <SPAN class="sh_symbol">);</SPAN>
        <SPAN class="sh_cbracket">}</SPAN> <SPAN class="sh_keyword">else</SPAN> <SPAN class="sh_cbracket">{</SPAN>
            System<SPAN class="sh_symbol">.</SPAN>out<SPAN class="sh_symbol">.</SPAN><SPAN class="sh_function">println</SPAN><SPAN class="sh_symbol">(</SPAN> andy<SPAN class="sh_symbol">.</SPAN><SPAN class="sh_function">getName</SPAN><SPAN class="sh_symbol">()</SPAN> <SPAN class="sh_symbol">+</SPAN> <SPAN class="sh_string">" is a minor"</SPAN> <SPAN class="sh_symbol">);</SPAN>
        <SPAN class="sh_cbracket">}</SPAN>

        <SPAN class="sh_keyword">if</SPAN> <SPAN class="sh_symbol">(</SPAN> bob<SPAN class="sh_symbol">.</SPAN><SPAN class="sh_function">isAdult</SPAN><SPAN class="sh_symbol">()</SPAN> <SPAN class="sh_symbol">)</SPAN> <SPAN class="sh_cbracket">{</SPAN>
            System<SPAN class="sh_symbol">.</SPAN>out<SPAN class="sh_symbol">.</SPAN><SPAN class="sh_function">println</SPAN><SPAN class="sh_symbol">(</SPAN> bob<SPAN class="sh_symbol">.</SPAN><SPAN class="sh_function">getName</SPAN><SPAN class="sh_symbol">()</SPAN> <SPAN class="sh_symbol">+</SPAN> <SPAN class="sh_string">" is an adult"</SPAN> <SPAN class="sh_symbol">);</SPAN>
        <SPAN class="sh_cbracket">}</SPAN> <SPAN class="sh_keyword">else</SPAN> <SPAN class="sh_cbracket">{</SPAN>
            System<SPAN class="sh_symbol">.</SPAN>out<SPAN class="sh_symbol">.</SPAN><SPAN class="sh_function">println</SPAN><SPAN class="sh_symbol">(</SPAN> bob<SPAN class="sh_symbol">.</SPAN><SPAN class="sh_function">getName</SPAN><SPAN class="sh_symbol">()</SPAN> <SPAN class="sh_symbol">+</SPAN> <SPAN class="sh_string">" is a minor"</SPAN> <SPAN class="sh_symbol">);</SPAN>
        <SPAN class="sh_cbracket">}</SPAN>
    <SPAN class="sh_cbracket">}</SPAN>
</PRE>
<P>The print is starting to look pretty clean:</P>
<PRE>andy is a minor
bob is an adult
</PRE>
<H3>toString</H3>
<P>We have been guilty of bad programming style; we have created a method that 
prints an object, <CODE>printPerson</CODE>. The recommended way of doing this is 
by defining a method that returns a "character string representation" of the 
object. In Java, a method returning a String representation is called 
<CODE>toString</CODE>. Let us define this method for person:</P>
<PRE class="sh_java sh_sourceCode"><SPAN class="sh_keyword">public</SPAN> <SPAN class="sh_keyword">class</SPAN><SPAN class="sh_normal"> </SPAN><SPAN class="sh_classname">Person</SPAN> <SPAN class="sh_cbracket">{</SPAN>
    <SPAN class="sh_comment">// ...</SPAN>

    <SPAN class="sh_keyword">public</SPAN> <SPAN class="sh_usertype">String</SPAN><SPAN class="sh_normal"> </SPAN><SPAN class="sh_function">toString</SPAN><SPAN class="sh_symbol">()</SPAN> <SPAN class="sh_cbracket">{</SPAN>
        <SPAN class="sh_keyword">return</SPAN> <SPAN class="sh_keyword">this</SPAN><SPAN class="sh_symbol">.</SPAN>name <SPAN class="sh_symbol">+</SPAN> <SPAN class="sh_string">", age "</SPAN> <SPAN class="sh_symbol">+</SPAN> <SPAN class="sh_keyword">this</SPAN><SPAN class="sh_symbol">.</SPAN>age <SPAN class="sh_symbol">+</SPAN> <SPAN class="sh_string">" years"</SPAN><SPAN class="sh_symbol">;</SPAN>
    <SPAN class="sh_cbracket">}</SPAN>
<SPAN class="sh_cbracket">}</SPAN>
</PRE>
<P>The method <CODE>toString</CODE> works just like <CODE>printPerson</CODE>, 
but instead of printing it the method returns the string representation. The 
call to the method can be used for printing it if necessary.</P>
<P>The method is used in a slightly surprising way:</P>
<PRE class="sh_java sh_sourceCode">    <SPAN class="sh_keyword">public</SPAN> <SPAN class="sh_keyword">static</SPAN> <SPAN class="sh_type">void</SPAN> <SPAN class="sh_function">main</SPAN><SPAN class="sh_symbol">(</SPAN>String<SPAN class="sh_symbol">[]</SPAN> args<SPAN class="sh_symbol">)</SPAN> <SPAN class="sh_cbracket">{</SPAN>
        <SPAN class="sh_usertype">Person</SPAN><SPAN class="sh_normal"> </SPAN>bob <SPAN class="sh_symbol">=</SPAN> <SPAN class="sh_keyword">new</SPAN> <SPAN class="sh_function">Person</SPAN><SPAN class="sh_symbol">(</SPAN><SPAN class="sh_string">"Bob"</SPAN><SPAN class="sh_symbol">);</SPAN>
        <SPAN class="sh_usertype">Person</SPAN><SPAN class="sh_normal"> </SPAN>andy <SPAN class="sh_symbol">=</SPAN> <SPAN class="sh_keyword">new</SPAN> <SPAN class="sh_function">Person</SPAN><SPAN class="sh_symbol">(</SPAN><SPAN class="sh_string">"Andy"</SPAN><SPAN class="sh_symbol">);</SPAN>

        <SPAN class="sh_type">int</SPAN> i <SPAN class="sh_symbol">=</SPAN> <SPAN class="sh_number">0</SPAN><SPAN class="sh_symbol">;</SPAN>
        <SPAN class="sh_keyword">while</SPAN> <SPAN class="sh_symbol">(</SPAN> i <SPAN class="sh_symbol">&lt;</SPAN> <SPAN class="sh_number">30</SPAN> <SPAN class="sh_symbol">)</SPAN> <SPAN class="sh_cbracket">{</SPAN>
            bob<SPAN class="sh_symbol">.</SPAN><SPAN class="sh_function">becomeOlder</SPAN><SPAN class="sh_symbol">();</SPAN>
            i<SPAN class="sh_symbol">++;</SPAN>
        <SPAN class="sh_cbracket">}</SPAN>

        andy<SPAN class="sh_symbol">.</SPAN><SPAN class="sh_function">becomeOlder</SPAN><SPAN class="sh_symbol">();</SPAN>

        System<SPAN class="sh_symbol">.</SPAN>out<SPAN class="sh_symbol">.</SPAN><SPAN class="sh_function">println</SPAN><SPAN class="sh_symbol">(</SPAN> andy <SPAN class="sh_symbol">);</SPAN> <SPAN class="sh_comment">// same as System.out.println( andy.toString() ); </SPAN>
        System<SPAN class="sh_symbol">.</SPAN>out<SPAN class="sh_symbol">.</SPAN><SPAN class="sh_function">println</SPAN><SPAN class="sh_symbol">(</SPAN> bob <SPAN class="sh_symbol">);</SPAN> <SPAN class="sh_comment">// same as System.out.println( bob.toString() ); </SPAN>
    <SPAN class="sh_cbracket">}</SPAN>
</PRE>
<P>The principle is that the <CODE>System.out.println</CODE> method requests the 
string representation of an object and then prints it. The returned string 
representation of the <CODE>toString</CODE> method does not have to be written, 
as Java adds it automatically. When the programmer writes:</P>
<PRE class="sh_java sh_sourceCode">        System<SPAN class="sh_symbol">.</SPAN>out<SPAN class="sh_symbol">.</SPAN><SPAN class="sh_function">println</SPAN><SPAN class="sh_symbol">(</SPAN> andy <SPAN class="sh_symbol">);</SPAN>
</PRE>
<P>Java completes the call during runtime to the format:</P>
<PRE class="sh_java sh_sourceCode">        System<SPAN class="sh_symbol">.</SPAN>out<SPAN class="sh_symbol">.</SPAN><SPAN class="sh_function">println</SPAN><SPAN class="sh_symbol">(</SPAN> andy<SPAN class="sh_symbol">.</SPAN><SPAN class="sh_function">toString</SPAN><SPAN class="sh_symbol">()</SPAN> <SPAN class="sh_symbol">);</SPAN>
</PRE>
<P>What happens is that the object is asked for its string representation. The 
string representation the object is returned and is printed normally with the 
<CODE>System.out.println</CODE> command.</P>
<P><B>We can get rid of the obsolete <CODE>printObject</CODE> method.</B></P><!-- screencast --> 
<DIV class="tehtavat">
<DIV class="tehtava">
<H3>Lyyra-card</H3>
<P>The University of Helsinki students use a so-called Lyyra cards to pay for 
their meals in    student cafeterias. In this assignment, we implement the class 
<CODE>LyyraCard</CODE> that simulates    the Lyyra card.</P>
<H4 class="req">Class skeleton</H4>
<P>Start by adding the class <CODE>LyyraCard</CODE> to your project.</P>
<P>Then implement the <CODE>LyyraCard</CODE> constructor that gets the starting 
balance of    the card as parameter. The card saves the balance in the object 
variable <CODE>balance</CODE>.    Implement also the <CODE>toString</CODE> 
method that returns a string of the form "The    card has X euros".</P>
<P>The skeleton of class <CODE>LyyraCard</CODE> looks like this:</P>
<PRE class="sh_java">public class LyyraCard {
    private double balance;

    public LyyraCard(double balanceAtStart) {
        // write code here
    }

    public String toString() {
        // write code here
    }
}
    </PRE>
<P>The following main program can be used to test the program:</P>
<PRE class="sh_java">public class Main {
    public static void main(String[] args) {
        LyyraCard card = new LyyraCard(50);
        System.out.println(card);
    }
}
    </PRE>
<P>The output should be:</P>
<PRE>The card has 50.0 euros
    </PRE>
<H4 class="req">Paying with card</H4>
<P>Implement the following methods to <CODE>LyyraCard</CODE>:</P>
<PRE class="sh_java">public void payEconomical() {
    // write code here
}

public void payGourmet() {
    // write code here
}
    </PRE>
<P>Method <CODE>payEconomical</CODE> should decrease the balance by 2.50 euros 
and method     <CODE>payGourmet</CODE> by 4.00 euros.</P>
<P>The following main program can be used to test the program:</P>
<PRE class="sh_java">public class Main {
    public static void main(String[] args) {
        LyyraCard card = new LyyraCard(50);
        System.out.println(card);

        card.payEconomical();
        System.out.println(card);

        card.payGourmet();
        card.payEconomical();
        System.out.println(card);
    }
}
    </PRE>
<P>The output should be:</P>
<PRE>The card has 50.0 euros
The card has 47.5 euros
The card has 41.0 euros
    </PRE>
<H4 class="req">Balance nonnegative</H4>
<P>Change methods <CODE>payEconomical</CODE> and <CODE>payGourmet</CODE> so that 
if there is    not enought money, the balance does not change.</P>
<P>The following main program can be used to test the program:</P>
<PRE class="sh_java">public class Main {
    public static void main(String[] args) {
        LyyraCard card = new LyyraCard(5);
        System.out.println(card);

        card.payGourmet();
        System.out.println(card);

        card.payGourmet();
        System.out.println(card);
    }
}
    </PRE>
<P>The output should be:</P>
<PRE>The card has 5.0 euros
The card has 1.0 euros
The card has 1.0 euros
    </PRE>
<P>Above, the second call <CODE>payGourmet</CODE> does not alter the balance 
since there is not    enough money on the card for a gourmet lunch.</P>
<H4 class="req">Loading money to card</H4>
<P>Add the <CODE>LyyraCard</CODE> the following method:</P>
<PRE class="sh_java">public void loadMoney(double amount) {
    // write code here
}
    </PRE>
<P>The method should increase the balance of the card by the given amount. 
However, the maximum    balance on a card is 150 euros. In case the balance 
after loading money would be more than    that, it should be truncated to 150 
euros.</P>
<P>The following main program can be used to test the program:</P>
<PRE class="sh_java">public class Main {
    public static void main(String[] args) {
        LyyraCard card = new LyyraCard(10);
        System.out.println(card);

        card.loadMoney(15);
        System.out.println(card);

        card.loadMoney(10);
        System.out.println(card);

        card.loadMoney(200);
        System.out.println(card);
    }
}
    </PRE>
<P>The output should be:</P>
<PRE>The card has 10.0 euros
The card has 25.0 euros
The card has 35.0 euros
The card has 150.0 euros
    </PRE>
<H4 class="req">Loading a negative amount</H4>
<P>Change the method <CODE>loadMoney</CODE> so that the balance of the card does 
not change if    the amount to load is negative.</P>
<P>The following main program can be used to test the program:</P>
<PRE class="sh_java">public class Main {
    public static void main(String[] args) {
        LyyraCard card = new LyyraCard(10);
        System.out.println("Pekka: " + card);
        card.loadMoney(-15);
        System.out.println("Pekka: " + card);
    }
}
    </PRE>
<P>The output should be:</P>
<PRE>Pekka: The card has 10.0 euros
Pekka: The card has 10.0 euros
    </PRE>
<H4 class="req">Multiple cards</H4>
<P>Write a main method that does the following:</P>
<UL>
  <LI>Creates a LyyraCard for Pekka with initial balance of 20 euros</LI>
  <LI>Creates a LyyraCard for Brian with initial balance of 30 euros</LI>
  <LI>Pekka buys gourmet lunch</LI>
  <LI>Brian buys economical lunch</LI>
  <LI>cards are printed (both on their own row, starting with the name of the 
  card      owner)</LI>
  <LI>Pekka loads 20 euros</LI>
  <LI>Brian buys gourmet lunch</LI>
  <LI>cards are printed (both on their own row, starting with the name of the 
  card      owner)</LI>
  <LI>Pekka buys economical lunch</LI>
  <LI>Pekka buys economical lunch</LI>
  <LI>Brian loads 50 euros</LI>
  <LI>cards are printed (both on their own row, starting with the name of the 
  card      owner)</LI></UL>
<P>The main skeleton is as follows:</P>
<PRE class="sh_java">public class Main {
    public static void main(String[] args) {
        LyyraCard cardPekka = new LyyraCard(20);
        LyyraCard cardBrian = new LyyraCard(30);

        // write code here
    }
}
    </PRE>
<P>The output should be:</P>
<PRE>Pekka: The card has 16.0 euros
Brian: The card has 27.5 euros
Pekka: The card has 36.0 euros
Brian: The card has 23.5 euros
Pekka: The card has 31.0 euros
Brian: The card has 73.5 euros
    </PRE></DIV></DIV>
<H3>More methods</H3>
<P>Let us continue with the class <CODE>Person</CODE>. We would be interested in 
knowing the <A href="http://en.wikipedia.org/wiki/Body_mass_index">body mass 
index</A> of a person. To calculate the index, we need to know the height and 
weight of the person. We add for both height and weight object variables and 
methods that can be used to assign the variables a value. When this is in place, 
we add a method that calculates the body mass index.</P>
<P>Here is the class <CODE>Person</CODE> after the changes (only the parts 
affected by the change are shown):</P>
<PRE class="sh_java">public class Person {
    private String name;
    private int age;
    private int weight;
    private int height;

    public Person(String initialName) {
        this.age = 0;
        this.name = initialName;
        this.weight = 0;
        this.height = 0;
    }

    public void setHeight(int newHeight) {
        this.height = newHeight;
    }

    public void setWeight(int newWeight) {
        this.weight = newWeight;
    }

    public double bodyMassIndex(){
        double heightDividedByHundred = this.height / 100.0;
        return this.weight / ( heightDividedByHundred * heightDividedByHundred );
    }

    // ...
}
</PRE>
<P>We added object variables <CODE>height</CODE> and <CODE>weight</CODE>, and 
methods <CODE>setHeight</CODE> and <CODE>setWeight</CODE> that can be used to 
give values to the variables. In naming the methods, we follow the Java 
convention to call a method that just sets a new value to a variable 
<CODE>setVariableName</CODE>. This type of methods are usually called <EM>setter 
 methods</EM>.</P>
<P>The new methods in use:</P>
<PRE class="sh_java">public static void main(String[] args) {
    Person matti = new Person("Matti");
    Person john = new Person("John");

    matti.setHeight(180);
    matti.setWeight(86);

    john.setHeight(175);
    john.setWeight(64);

    System.out.println(matti.getName() + ", body mass index: " + matti.bodyMassIndex());
    System.out.println(john.getName() + ", body mass index: " + john.bodyMassIndex());
}
</PRE>
<P>The output:</P>
<PRE>Matti, body mass index: on 26.54320987654321
John, body mass index: on 20.897959183673468
</PRE>
<H3>Object variable and parameter with identical name</H3>
<P>Above, the method <CODE>setHeight</CODE> assigns the object variable 
<CODE>height</CODE> the value of the parameter <CODE>newHeight</CODE>:</P>
<PRE class="sh_java">public void setHeight(int newHeight) {
    this.height = newHeight;
}
</PRE>
<P>The parameter could also be named identically with the object variable:</P>
<PRE class="sh_java">public void setHeight(int height) {
    this.height = height;
}
</PRE>
<P>Now, the name <CODE>height</CODE> means the parameter <EM>height</EM> and the 
identically named object variable is referred to as <CODE>this.height</CODE>. 
The following would not work since the object variable <EM>height</EM> is not at 
all referred to in the code:</P>
<PRE class="sh_java">public void setHeight(int height) {
    // DOES NOT WORK!
    height = height;
    // this just assigns the value of the parameter to the parameter itself
}
</PRE>
<H3>Contolling the number of decimals when printing a float</H3>
<P>The number of decimals in the last output was far too high, two decimals 
would be enough. One technique to control how a float number is printed is to 
use the command <CODE>String.format</CODE>.</P>
<P>If <CODE>value</CODE> is a float number, the command <CODE>String.value( 
"%.2f", value )</CODE> returns a string where the value is rounded to contain 2 
decimals. The number between dot and f defines the amount of decimals shown.</P>
<P>After changing the code, we have the following:</P>
<PRE class="sh_java">System.out.println(matti.getName() + ", body mass index: " + String.format( "%.2f", matti.bodyMassIndex()));
System.out.println(john.getName() + ", body mass index: " + String.format( "%.2f", john.bodyMassIndex()));
</PRE>
<P>The output is:</P>
<PRE>Matti,  body mass index: 26,54
John,  body mass index: 20,90
</PRE>
<P>The method <CODE>String.format</CODE> is not the most flexible way provided 
by Java for formatting float values, but it is simple to use and suits our 
purposes here well.</P>
<DIV class="tehtavat">
<DIV class="tehtava">
<H3>Clock using a counter</H3>
<P>We start by implementing a class <CODE>BoundedCounter</CODE> and then use 
counter objects to    implement a clock.</P>
<H4 class="req">BoundedCounter</H4>
<P>Implement class <CODE>BoundedCounter</CODE> with the following 
functionality:</P>
<UL>
  <LI>A counter has an object variable that remembers the <EM>value</EM> of the 
  counter. The      value is within the range 0..upperBound</LI>
  <LI>In the beginning the value is 0.</LI>
  <LI>The upper bound of the value is defined by the constructor parameter.</LI>
  <LI>The method <CODE>next</CODE> increments the value of the counter. If the 
  value would be      more that the upper limit, it wraps around and becomes 
  zero.</LI>
  <LI>The method <CODE>toString</CODE> returns a string representation of the 
  counter value.</LI></UL>
<P>The skeleton of the class is as follows:</P>
<PRE class="sh_java">public class BoundedCounter {
    private int value;
    private int upperLimit;

    public BoundedCounter(int upperLimit) {
        // write code here
    }

    public void next() {
        // write code here
    }

    public String toString() {
        // write code here
    }
}
    </PRE>
<P><B>Note</B>: you cannot return an integer value directly from the method 
toString since the    method should return a string. Integer variable 
<CODE>value</CODE> can be turned into a string    by prefixing it with an empty 
string: <CODE>"" + value</CODE>.</P>
<P>A main program that uses the counter:</P>
<PRE class="sh_java">public class Main {
    public static void main(String[] args) {
        BoundedCounter counter = new BoundedCounter(4);
        System.out.println("Value at start: " + counter );

        int i = 0;
        while ( i &lt; 10) {
            counter.next();
            System.out.println("Value: " + counter );
            i++;
        }
    }
}
    </PRE>
<P>In the constructor, an upper limit of 4 is given to the new counter object. 
Now, the value of    the counter should be within the range 0...4. Note how the 
method <CODE>next</CODE> increases    the value until it hits the upper limit 
and becomes zero again:</P>
<PRE>Value at start: 0
Value: 1
Value: 2
Value: 3
Value: 4
Value: 0
Value: 1
Value: 2
Value: 3
Value: 4
Value: 0
    </PRE>
<H4 class="req">Printing the initial zero</H4>
<P>Imrove <CODE>toString</CODE> so that if the value of the counter is less than 
10, it    prefixes the value with 0. If the value of the counter is e.g. 3, 
toString should produce    "03". If the value is at least 10, e.g. 12, the 
returned string would be    "12".</P>
<P>A main program that demonstrates the desired functionality of the improved 
toString.</P>
<PRE class="sh_java">public class Main {
    public static void main(String[] args) {
        BoundedCounter counter = new BoundedCounter(14);
        System.out.println("Value at start: " + counter );

        int i = 0;
        while ( i &lt; 16){
            counter.next();
            System.out.println("value: " + counter );
            i++;
        }
    }
}
    </PRE>
<PRE>value at start: 00
value: 01
value: 02
value: 03
value: 04
value: 05
value: 06
value: 07
value: 08
value: 09
value: 10
value: 11
value: 12
value: 13
value: 14
value: 00
value: 01
    </PRE>
<H4 class="req">The first version of the clock</H4>
<P>With two counter objects it possible for us to build a simple clock. Hours 
can be represented by a counter    with upper bound 23 and minutes by a counter 
with upper bound 59. As we all know, when minutes    wrap around from 59 to 0, 
hours advance by one.</P>
<P>First you should implement the method <CODE>getValue</CODE> for the counters 
in the class:</P>
<PRE class="sh_java">public int getValue() {
    // write here code that returns the value
}
    </PRE>
<P>Then implement the clock in your main method in the following style:</P>
<PRE class="sh_java">public class Main {
    public static void main(String[] args) {
        BoundedCounter minutes = new BoundedCounter(59);
        BoundedCounter hours = new BoundedCounter(23);

        int i = 0;
        while ( i &lt; 121 ) {
            System.out.println( hours + ":" + minutes);   // the current time printed
            // advance minutes
            // if minutes become zero, advance hours
            i++;
        }
    }
}
    </PRE>
<P>The output should be:</P>
<PRE>00:00
00:01
...
00:59
01:00
01:01
01:02
...
01:59
02:00
    </PRE>
<H4 class="req">The second version of the clock</H4>
<P>Firstly implement the method <CODE>setValue</CODE> to the class 
<CODE>BoundedCounter</CODE>. The    method should set the value of the parameter 
to the counter unless the parameter is less than    zero or larger than the 
upper bound. In those cases, the method does not have any effect.</P>
<P>Then add a seconds counter to your clock. The clock should now be as 
follows:</P>
<PRE class="sh_java">public class Main {
    public static void main(String[] args)  {
        Scanner reader = new Scanner(System.in);
        BoundedCounter seconds = new BoundedCounter(59);
        BoundedCounter minutes = new BoundedCounter(59);
        BoundedCounter hours = new BoundedCounter(23);

        System.out.print("seconds: ");
        int s = // read the initial value of seconds from the user
        System.out.print("minutes: ");
        int m = // read the initial value of minutes from the user
        System.out.print("hours: ");
        int h = // read the initial value of hours from the user

        seconds.setValue(s);
        minutes.setValue(m);
        hours.setValue(h);

        int i = 0;
        while ( i &lt; 121 ) {
            // like in previous but seconds taken into account

            i++;
        }

    }
}
    </PRE>
<P>Ensure that all works as expected when starting e.g. with time 
<I>23:59:50</I>.</P>
<P>The output should be:</P>
<PRE>seconds: <FONT color="red">50</FONT>
minutes: <FONT color="red">59</FONT>
hours: <FONT color="red">23</FONT>
23:59:50
23:59:51
23:59:52
...
    </PRE>
<P><STRONG>Bonus: eternal clock (exercise not assessed with TMC!)</STRONG></P>
<P>Before you start, submit the exercise for assesment.</P>
<P>Change your main as follows:</P>
<PRE class="sh_java">public class Main {
    public static void main(String[] args) throws Exception {
        BoundedCounter seconds = new BoundedCounter(59);
        BoundedCounter minutes = new BoundedCounter(59);
        BoundedCounter hours = new BoundedCounter(23);

        seconds.setValue(50);
        minutes.setValue(59);
        hours.setValue(23);

        while ( true ) {
            System.out.println( hours + ":" + minutes + ":" + seconds );
            Thread.sleep(1000);
            // put here the logic to advance your clock by one second
        }
    }
}
    </PRE>
<P>Now, the clock goes on forever and the value is updated as it should be, once 
in a second. The clock estimates the duration of a    second with the command 
<CODE>Thread.sleep(1000);</CODE> The parameter in the command    is the time to 
sleep in milliseconds. In order to use the sleep command, you should do an    
addition to the definition of main: <CODE>public static void main(String[] args) 
<B>throws        Exception</B> {</CODE></P>
<P>You can end the eternal clock by pressing the red box in the NetBeans console 
(i.e. the area    in NB where the output of programs gets 
printed).</P></DIV></DIV>
<P><BIG><B>Important notes regarding the use of objects. You should definately 
read these.</B></BIG></P>
<P>Object-oriented programming is mostly about turning concepts into their own 
entities, or in other words forming abstractions. One might think that it is 
pointless to create an object that only holds one number in it, and that the 
same could be achieved with simple <CODE>int</CODE> variables. This is not the 
case. If a clock consists of just 3 int variables that are then increased, the 
program loses some human readability. It becomes more difficult to "see" what 
the program is about. Earlier in the material we mentioned the advice of the 
renown programmer Kent Beck: <EM>"Any fool can  write code that a computer can 
understand. Good programmers write code that humans can  understand"</EM>, since 
the hand of a clock is its own clearly definable concept, it is a good idea to 
create it an own class - <CODE>BoundedCounter</CODE> - for the sake of human
 readability.</P>
<P>Turning a concept into a class of its own is a good idea for a lot of 
reasons. Firstly, some details (i.e. when the counter makes a full round) can be 
hidden inside the class (<EM>abstracted</EM>). Instead of writing an if-clause 
and an assignment operation, it is enough that the user of the counter calls the 
descriptively named method <CODE>next()</CODE>. In addition to clocks, the 
created counter might be good for being used as a building block for other 
projects too, so a class made from a clear concept can be very versatile. 
Another huge advantage we gain by writing code this way, is that when the 
details of the mechanics are hidden, they can be changed if need be.</P>
<P>We established that a clock contains three hands, it consists of three 
concepts. Actually the clock itself is a concept too and next week we will make 
the class Clock. Then, we can create distinct Clock objects. Clock will be an 
object which functionality is based on "simpler" objects, the hands. This is the 
grand idea of object-oriented programming: a program is built out of small,
 clearly defined co-operating objects.</P>
<P>Now, we will take some careful first steps in the object world. Towards the 
end of the course, objects will start to come to you naturally and the idea of 
<EM>programs being built out of small, well  defined, co-operating pieces</EM> - 
which at this point might feel incomprehensible - will become something you will 
take for granted.</P>
<H3>Calling other methods within an object</H3>
<P>Objects can also call its own methods. Let us assume we would like to include 
body mass index in the string representation of the person objects. Instead of 
calculating the body mass index in the toString method, a better idea is to call 
the method <CODE>bodyMassIndex</CODE> from the <CODE>toString</CODE> method:</P>
<PRE class="sh_java">public String toString() {
    return this.name + ", age " + this.age + " years, my body mass index is " + this.bodyMassIndex();
}
</PRE>
<P>As can be seen, an object can call its own method by prefixing the method 
name with <CODE>this</CODE> and dot. The this is not necessary, so also the 
following works:</P>
<PRE class="sh_java">public String toString() {
    return this.name + ", age " + this.age + " years, my body mass index is " + bodyMassIndex();
}
</PRE><!-- screencast --> 
<P>Now it is time to continue practising programming.</P>
<DIV class="tehtavat">
<DIV class="tehtava">
<H3>NumberStatistics</H3>
<H4 class="req">Amount of numbers</H4>
<P>Implement class <CODE>NumberStatistics</CODE> with the following methods:</P>
<UL>
  <LI><CODE>addNumber</CODE> adds a new number to the statistics</LI>
  <LI><CODE>amountOfNumbers</CODE> tells us how many numbers have been added to 
  the      statistics</LI></UL>
<P>Note that the class <EM>should not store</EM> the added numbers. At this 
stage, it is enough    to remember how many added numbers there are, i.e. how 
many times the method     <CODE>addNumber</CODE> has been called.</P>
<P>The class skeleton:</P>
<PRE class="sh_java">public class NumberStatistics {
    private int amountOfNumbers;

    public NumberStatistics() {
        // initialize here the object variable amountOfNumbers
    }

    public void addNumber(int number) {
        // code here
    }

    public int amountOfNumbers() {
        // code here
    }
}
    </PRE>
<P>A usage example:</P>
<PRE class="sh_java">public class Main {
   public static void main(String[] args) {
      NumberStatistics stats = new NumberStatistics();
      stats.addNumber(3);
      stats.addNumber(5);
      stats.addNumber(1);
      stats.addNumber(2);
      System.out.println("Amount: " + stats.amountOfNumbers());
    }
}
    </PRE>
<P>The output should be:</P>
<PRE>Amount: 4
    </PRE>
<H4 class="req">sum and average</H4>
<P>Add the following methods to the class:</P>
<UL>
  <LI><CODE>sum</CODE> returns the sum of the added numbers (if no numbers 
  added, the sum is      0)</LI>
  <LI><CODE>average</CODE> returns the average of the added numbers (if no 
  numbers added, the      average is 0)</LI></UL>
<P>The class skeleton now:</P>
<PRE class="sh_java">public class NumberStatistics {
    private int amountOfNumbers;
    private int sum;

    public NumberStatistics() {
        // initialize here the object variable amountOfNumbers
    }

    public void addNumber(int number) {
        // code here
    }

    public int amountOfNumbers() {
        // code here
    }

    public int sum() {
        // code here
    }

    public double average() {
        // code here
    }
}
    </PRE>
<P>A usage example:</P>
<PRE class="sh_java">public class Main {
    public static void main(String[] args) {
        NumberStatistics stats = new NumberStatistics();
        stats.addNumber(3);
        stats.addNumber(5);
        stats.addNumber(1);
        stats.addNumber(2);
        System.out.println("Amount: " + stats.amountOfNumbers());
        System.out.println("sum: " + stats.sum());
        System.out.println("average: " + stats.average());
    }
}
    </PRE>
<P>The output should be:</P>
<PRE>Amount: 4
sum: 11
average: 2.75
    </PRE>
<H4 class="req">Asking for numbers from the user</H4>
<P>Create a program that asks the user to input numbers of type integer. When 
the user    gives -1, the program stops and prints the sum of the given numbers 
(excluding the -1).</P>
<P><STRONG>Note:</STRONG> you should not make any changes to class 
NumberStatistics!</P>
<P>The program should use a <CODE>NumberStatistics</CODE> object to calculate 
the sum.</P>
<PRE>Type numbers:
<FONT color="red">4</FONT>
<FONT color="red">2</FONT>
<FONT color="red">5</FONT>
<FONT color="red">4</FONT>
<FONT color="red">-1</FONT>
sum: 15
    </PRE>
<H4>Many sums</H4>
<P>Change your program so that it also calculates the sum of even and odd 
numbers in the user    input (again -1 excluded).</P>
<P><B>NOTE</B>: define in your program <I>three</I> 
<CODE>NumberStatistics</CODE> objects. The    first is used to track the sum of 
all the numbers. The second takes care of even numbers and    the third the odd 
numbers. Remember also that you should not make any changes to class    
NumberStatistics!</P>
<P><B>The tests does not work if you do not create the objects in the order 
mentioned above!!</B></P>
<P>The program should work as follows:</P>
<PRE>Type numbers:
<FONT color="red">4</FONT>
<FONT color="red">2</FONT>
<FONT color="red">5</FONT>
<FONT color="red">2</FONT>
<FONT color="red">-1</FONT>
sum: 13
sum of even: 8
sum of odd: 5
    </PRE></DIV></DIV>
<H2>Randomness</H2>
<P>When programming, you may occasionally need to simulate random events. 
Situations such as the unpredictability of weather, or surprising moves on the 
AI's part in a computer game can often be simulated with random number 
generators, running on a computer. In Java, there is a ready-made class 
<CODE>Random</CODE>, which you can use in the following way:</P>
<PRE class="sh_java">import java.util.Random;

public class Randomizing {
    public static void main(String[] args) {
        Random randomizer = new Random(); // creates a random number generator
        int i = 0;

        while (i &lt; 10) {
            // Generates and prints out a new random number on each round of the loop
            System.out.println(randomizer.nextInt(10));
            i++;
        }
    }
}
</PRE>
<P>In the code above, you first create an instance of the class 
<CODE>Random</CODE> with the keyword <CODE>new</CODE> -- exactly as when 
creating objects implementing other classes. An object of type Random has the 
method <CODE>nextInt</CODE> that can be given an integer value as parameter. The
 method returns a random integer within the range <EM>0..(the integer given as 
parameter- 1)</EM>.</P>
<P>The printout of this program could be as follows:</P>
<PRE>2
2
4
3
4
5
6
0
7
8
</PRE>
<P>We will need floating point numbers, for example when dealing with 
probability calculations. In computing, probabilities are usually calculated 
with numbers within the range [0..1]. An object of the class Random can return 
random floating point numbers with the method <CODE>nextDouble</CODE>. Let us 
consider the following probabilities of weather conditions:</P>
<UL>
  <LI>Sleet with the probability 0.1 (10%)</LI>
  <LI>Snow with the probability 0.3 (30%)</LI>
  <LI>Sunny with the probability 0.6 (60%)</LI></UL>
<P>Using the estimates above, let us create a weather forecaster.</P>
<PRE class="sh_java">import java.util.ArrayList;
import java.util.Random;

public class WeatherForecaster {
    private Random random;

    public WeatherForecaster() {
        this.random = new Random();
    }

    public String forecastWeather() {
        double probability = this.random.nextDouble();

        if (probability &lt;= 0.1) {
            return "Sleet";
        } else if (probability &lt;= 0.4) { // 0.1 + 0.3
            return "Snow";
        } else { // the rest, 1.0 - 0.4 = 0.6
            return "Sunny";
        }
    }

    public int forecastTemperature() {
        return (int) ( 4 * this.random.nextGaussian() - 3 );
    }
}
</PRE>
<P>The method <CODE>forecastTemperature</CODE> is interesting in many ways. 
Within this method, we are calling the method 
<CODE>this.random.nextGaussian()</CODE>, just like any other time we have called 
a method in the previous examples. Interestingly, this method of the class 
Random returns a value from the <EM>normal distribution</EM> (if you have no 
interest in the different varieties of random figures, that's okay!).</P>
<PRE class="sh_java">public int forecastTemperature() {
    return (int) ( 4 * this.random.nextGaussian() - 3 );
}
</PRE>
<P>In the expression above, interesting is the section <CODE>(int)</CODE>. This 
part of the expression changes the bracketed floating point number into an 
integer value. A corresponding method transforms integer values into floating 
point numbers: <CODE>(double) integer</CODE>. This is called an <EM>explicit 
type conversion</EM>.</P>
<P>Let us create a class with a main method that uses the class 
<CODE>WeatherForecaster</CODE>.</P>
<PRE class="sh_java">public class Program {

    public static void main(String[] args) {
        WeatherForecaster forecaster = new WeatherForecaster();

        // Use a list to help you organise things
        ArrayList&lt;String&gt; days = new ArrayList&lt;String&gt;();
        Collections.addAll(days, "Mon", "Tue", "Wed", "Thu", "Fri", "Sat", "Sun");

        System.out.println("Weather forecast for the next week:");
        for(String day : days) {
            String weatherForecast = forecaster.forecastWeather();
            int temperatureForecast = forecaster.forecastTemperature();

            System.out.println(day + ": " + weatherForecast + " " + temperatureForecast + " degrees.");
        }
    }
}
</PRE>
<P>The printout from this program could be as follows:</P>
<PRE>Weather forecast for the next week:
Mon: Snow 1 degrees.
Tue: Snow 1 degrees.
Wed: Sunny -2 degrees.
Thu: Sunny 0 degrees.
Fri: Snow -3 degrees.
Sat: Snow -3 degrees.
Sun: Sunny -5 degrees.
</PRE>
<DIV class="tehtavat">
<DIV class="tehtava">
<H3 class="req" id="e80">Rolling the dice</H3>
<P>In the template is class <CODE>Dice</CODE> that has the following 
functionality:</P>
<UL>
  <LI>The constructor <CODE>Dice(int numberOfSides)</CODE> creates a new dice 
  object that has      the amount of sides defined by the argument.</LI>
  <LI>The method <CODE>roll</CODE> tells the result of a roll (which depends on 
  the number      of its sides)</LI></UL>
<P>The frame of the program is as follows:</P>
<PRE class="sh_java">import java.util.Random;

public class Dice {
    private Random random;
    private int numberOfSides;

    public Dice(int numberOfSides){
        this.numberOfSides = numberofSides;
        random = new Random();

    }

    public int roll() {
          // we'll get a random number in the range 1-numberOfSides&lt;
    }
}
    </PRE>
<P>Expand the class <CODE>Dice</CODE> so that with each roll the dice returns a 
random number    between <CODE>1...number of sides</CODE>. Here is a main 
program that tests the dice:</P>
<PRE class="sh_java">public class Program {
    public static void main(String[] args) {
        Dice dice = new Dice(6);

        int i = 0;
        while ( i &lt; 10 ) {
            System.out.println( dice.roll() );
            i++;
        }
    }
}
    </PRE>
<P>The output could look something like this:</P>
<PRE>1
6
3
5
3
3
2
2
6
1
    </PRE></DIV>
<DIV class="tehtava">
<H3>Password randomizer</H3>
<P>Your assignment is to expand the class <CODE>PasswordRandomizer</CODE> that 
has the    following functionality:</P>
<UL>
  <LI>The constructor <CODE>PasswordRandomizer</CODE> creates a new object, 
  which uses the      given password length.</LI>
  <LI>The method <CODE>createPassword</CODE> returns a new password, which 
  consists of symbols      a-z and is of the length given as a parameter to the 
  constructor</LI></UL>
<P>The frame of the class is as follows:</P>
<PRE class="sh_java">import java.util.Random;

public class PasswordRandomizer {
    // Define the variables here

    public PasswordRandomizer(int length) {
        // Format the variable here
    }

    public String createPassword() {
      // Write the code here which returns the new password
    }
}
    </PRE>
<P>In the following is a program that uses a PasswordRandomizer object:</P><!--wtf--> 
    
<PRE class="sh_java sh_sourceCode"><SPAN class="sh_keyword">public</SPAN>
<SPAN class="sh_keyword">class</SPAN><SPAN class="sh_normal"> </SPAN><SPAN class="sh_classname">Program</SPAN> <SPAN class="sh_cbracket">{</SPAN>
    <SPAN class="sh_keyword">public</SPAN> <SPAN class="sh_keyword">static</SPAN> <SPAN class="sh_type">void</SPAN> <SPAN class="sh_function">main</SPAN><SPAN class="sh_symbol">(</SPAN>String<SPAN class="sh_symbol">[]</SPAN> args<SPAN class="sh_symbol">)</SPAN> <SPAN class="sh_cbracket">{</SPAN>
        <SPAN class="sh_usertype">PasswordRandomizer</SPAN><SPAN class="sh_normal"> </SPAN>randomizer <SPAN class="sh_symbol">=</SPAN> <SPAN class="sh_keyword">new</SPAN> <SPAN class="sh_function">PasswordRandomizer</SPAN><SPAN class="sh_symbol">(</SPAN><SPAN class="sh_number">13</SPAN><SPAN class="sh_symbol">);</SPAN>
        System<SPAN class="sh_symbol">.</SPAN>out<SPAN class="sh_symbol">.</SPAN><SPAN class="sh_function">println</SPAN><SPAN class="sh_symbol">(</SPAN><SPAN class="sh_string">"Password: "</SPAN> <SPAN class="sh_symbol">+</SPAN> randomizer<SPAN class="sh_symbol">.</SPAN><SPAN class="sh_function">createPassword</SPAN><SPAN class="sh_symbol">());</SPAN>
        System<SPAN class="sh_symbol">.</SPAN>out<SPAN class="sh_symbol">.</SPAN><SPAN class="sh_function">println</SPAN><SPAN class="sh_symbol">(</SPAN><SPAN class="sh_string">"Password: "</SPAN> <SPAN class="sh_symbol">+</SPAN> randomizer<SPAN class="sh_symbol">.</SPAN><SPAN class="sh_function">createPassword</SPAN><SPAN class="sh_symbol">());</SPAN>
        System<SPAN class="sh_symbol">.</SPAN>out<SPAN class="sh_symbol">.</SPAN><SPAN class="sh_function">println</SPAN><SPAN class="sh_symbol">(</SPAN><SPAN class="sh_string">"Password: "</SPAN> <SPAN class="sh_symbol">+</SPAN> randomizer<SPAN class="sh_symbol">.</SPAN><SPAN class="sh_function">createPassword</SPAN><SPAN class="sh_symbol">());</SPAN>
        System<SPAN class="sh_symbol">.</SPAN>out<SPAN class="sh_symbol">.</SPAN><SPAN class="sh_function">println</SPAN><SPAN class="sh_symbol">(</SPAN><SPAN class="sh_string">"Password: "</SPAN> <SPAN class="sh_symbol">+</SPAN> randomizer<SPAN class="sh_symbol">.</SPAN><SPAN class="sh_function">createPassword</SPAN><SPAN class="sh_symbol">());</SPAN>
    <SPAN class="sh_cbracket">}</SPAN>
<SPAN class="sh_cbracket">}</SPAN>
    </PRE>
<P>The output could look something like this:</P>
<PRE>Password: mcllsoompezvs
Password: urcxboisknkme
Password: dzaccatonjcqu
Password: bpqmedlbqaopq
    </PRE>
<P><B>Tip 1:</B> this is how you turn the integer <TT>number</TT> into a 
character:</P>
<PRE class="sh_java">int number = 17;
char symbol = "abcdefghijklmnopqrstuvwxyz".charAt(number);
    </PRE>
<P><B>Tip 2:</B> The tip in assignment 58 might be useful in this one 
too.</P></DIV>
<DIV class="tehtava">
<H3 id="e82">Lottery</H3>
<P>Your assignment is to expand the class <CODE>LotteryNumbers</CODE>, which 
draws the lottery    numbers of the week. The numbers of the week    consist of 
7 different numbers between 1 and 39. The class has the following 
functionality:</P>
<UL>
  <LI>the constructor <CODE>LotteryNumbers</CODE> creates a new LotteryNumbers 
  object, which      contains the new drawn numbers</LI>
  <LI>the method <CODE>numbers</CODE> returns the drawn numbers of this 
draw</LI>
  <LI>the method <CODE>drawNumbers</CODE> draws new numbers</LI>
  <LI>the method <CODE>containsNumber</CODE> reveals if the number is among the 
  drawn      numbers</LI></UL>
<P>The frame of the class is as follows:</P>
<PRE class="sh_java">import java.util.ArrayList;
import java.util.Random;

public class LotteryNumbers {
    private ArrayList&lt;Integert&gt; numbers;

    public LotteryNumbers() {
        // We'll format a list for the numbers
        this.numbers = new ArrayList&lt;Integert&gt;();
        // Draw numbers as LotteryNumbers is created
        this.drawNumbers();
    }

    public ArrayList&lt;Integert&gt; numbers() {
        return this.numbers;
    }

    public void drawNumbers() {
        // Write the number drawing here using the method containsNumber()
    }

    public boolean containsNumber(int number) {
        // Test here if the number is already among the drawn numbers
    }
}
    </PRE>
<P>The following main program comes with the template:</P>
<PRE class="sh_java">import java.util.ArrayList;

public class Program {
    public static void main(String[] args) {
        LotteryNumbers lotteryNumbers = new LotteryNumbers();
        ArrayList&lt;Integert&gt; numbers = lotteryNumbers.numbers();

        System.out.println("Lottery numbers:");
        for (int number : numbers) {
            System.out.print(number + " ");
        }
        System.out.println("");
    }
}
    </PRE>
<P>The program can print lines like these:</P>
<PRE>Lottery numbers:
3 5 10 14 15 27 37
    </PRE>
<PRE>Lottery numbers:
2 9 11 18 23 32 34
    </PRE>
<P><STRONG>Note!</STRONG> a number can be in one set of numbers only once (per 
draw of    course).</P></DIV>
<DIV class="tehtava">
<H3>Game logic for Hangman</H3>
<P>Your Finnish friend designed a Hangman game that looks like the 
following:</P>
<P><IMG src="Basic%20of%20Object_files/hirsipuu-tikkuukko.png"></P>
<P>Your friend has programmed the user interface and also a skeleton for the 
game logic. Now,    she asks you to finish the remaining pieces of the game 
logic. </P>
<P>The Finnish words <I>sana</I>, <I>virheitä</I>, <I>viesti</I>, <I>hävisit</I> 
and <I>arvatut (kirjaimet)</I> translate into <I>word</I>, <I>(number of) 
faults</I>, <I>message</I>, <I>you lost</I> and <I>guessed (letters)</I> 
respectively.</P>
<P>Amongst other stuff, with TMC you get the following skeleton for the class    
 <CODE>HangmanLogic</CODE></P>
<PRE class="sh_java">public class HangmanLogic {

    private String word;
    private String guessedLetters;
    private int numberOfFaults;

    public HangmanLogic(String word) {
        this.word = word.toUpperCase();
        this.guessedLetters = "";
        this.numberOfFaults = 0;
    }

    public int numberOfFaults() {
        return this.numberOfFaults;
    }

    public String guessedLetters() {
        return this.guessedLetters;
    }

    public int losingFaultAmount() {
        return 12;
    }

    public void guessLetter(String letter) {
        // program here the functionality for making a guess

        // if the letter has already been guessed, nothing happens

        // it the word does not contains the guessed letter, the number of faults increases
        // the letter is added among the already guessed letters
    }

    public String hiddenWord() {
        // program here the functionality for building the hidden word

        // create the hidden word by iterating through this.word letter by letter
        // if the letter in turn is within the guessed words, put it in the hidden word
        // if the letter is not among the guessed ones, replace it with _ in the hidden word

        // return the hidden word at the end

        return "";
    }
}
    </PRE>
<P>In this assignment, <EM>you should only touch class <CODE>HangmanLogic</CODE> 
and implement      the functionality of the methods <CODE>guessLetter(String 
letter)</CODE> and       <CODE>hiddenWord()</CODE></EM>.</P>
<P><STRONG>Testing the code</STRONG></P>
<P>The TMC project includes <EM>two</EM> classes that help you with testing. The 
class     <CODE>Main</CODE> starts the graphical version of the game. The class 
<CODE>TestProgram</CODE>    can be used to test the class 
<CODE>HangmanLogic</CODE>.</P>
<H4>Guessing a letter</H4>
<P>Touch only the method <CODE>guessLetter(String letter)</CODE> in this 
assignment!</P>
<P>When a user guesses a letter, the user interface calls method 
<CODE>guessLetter</CODE> which    is supposed to take care of action related to 
guessing a letter. First, it should check if the    letter has already been 
guessed. In that case, the method does not do anything.</P>
<P>The method increases the number of faults (<CODE>this.numberOfFaults</CODE>) 
if the word    (<CODE>this.word</CODE>) does not contain the guessed letter. 
Then the letter is added among the    already guessed letters (the object 
variable <CODE>this.guessedLetters</CODE>).</P>
<P>An example of how the method <CODE>guessLetter</CODE> should work:</P>
<PRE class="sh_java">HangmanLogic l = new HangmanLogic("kissa");
System.out.println("guessing: A, D, S, F, D");
l.guessLetter("A");   // correct
l.guessLetter("D");   // wrong
l.guessLetter("S");   // correct
l.guessLetter("F");   // wrong
l.guessLetter("D");   // This should not have any effect on the number of faults since D was already guessed
System.out.println("guessed letters: "+l.guessedLetters());
System.out.println("number of faults: "+l.numberOfFaults());
    </PRE>
<PRE>guessing: A, D, S, F, D
guessed letters: ADSF
number of faults: 2
    </PRE>
<H4>Creating the hidden word</H4>
<P>The Hangman user interface shows a hidden version of the word to the user. In 
the above    figure, the hidden word is METO_I. All the letters that the user 
has already guessed are shown    in the hidden word but the rest of the letters 
are replaced with underscores. In this part of    the assignment, you should 
complete the method <CODE>hiddenWord</CODE> of Hangman logic that    takes care 
of building the hidden word for the user interface.</P>
<P>Commands <CODE>while</CODE>, <CODE>charAt</CODE> and <CODE>contains</CODE> 
might be useful    here. Note that a single char can be made into a string as 
follows:</P>
<PRE class="sh_java">char c = 'a';
String aString = "" + c;
    </PRE>
<P>An example of how the method works:</P>
<PRE class="sh_java">HangmanLogic l = new HangmanLogic("kissa");
System.out.println("word is: "+l.hiddenWord());

System.out.println("guessing: A, D, S, F, D");
l.guessLetter("A");
l.guessLetter("D");
l.guessLetter("S");
l.guessLetter("F");
l.guessLetter("D");
System.out.println("guessed letters: "+l.guessedLetters());
System.out.println("number of faults: "+l.numberOfFaults());
System.out.println("word now: "+l.hiddenWord());
    </PRE>
<PRE>word is: _____
guessing: A, D, S, F, D
guessed letters: ADSF
number of faults: 2
word now: __SSA
    </PRE>
<P>Now, you can test the game by using class <CODE>Main</CODE>. You can change 
the guessed word    by changing the constructor parameter of the game logic:</P>
<PRE class="sh_java">HangmanLogic logic = new HangmanLogic("parameter");
HangmanUI game = new HangmanUI(logic);
game.start();
    </PRE>
<P>The game is played with the keyboard. You can end the game by pressing x in 
the upper left    corner of the game 
window.</P></DIV></DIV></DIV></DIV></DIV></DIV><!-- /inner -->   </DIV><!-- /node-239 --> 
        </DIV></DIV><!-- /inner-inner -->	   </DIV><!-- /inner-wrapper -->     
<DIV class="corner-bottom">
<DIV class="corner-bottom-right corner"></DIV>
<DIV class="corner-bottom-left corner"></DIV></DIV></DIV><!-- /inner --> </DIV><!-- /block --> 
 </DIV></DIV></DIV></DIV></DIV></DIV></DIV><!-- /content-content -->             
                                                  </DIV><!-- /content-inner-inner --> 
                            </DIV><!-- /content-inner -->                        
   </DIV><!-- /content-region-inner -->                         </DIV><!-- /content-region --> 
                        
<DIV class="content-bottom row nested " id="content-bottom">
<DIV class="content-bottom-inner inner clearfix" id="content-bottom-inner">
<DIV class="block block-block odd first last grid16-16" id="block-block-1">
<DIV class="inner">
<DIV class="corner-top">
<DIV class="corner-top-right corner"></DIV>
<DIV class="corner-top-left corner"></DIV></DIV>
<DIV class="inner-wrapper">
<DIV class="inner-inner">
<DIV class="content clearfix">
<DIV id="header-top-block">
<P class="rtecenter">Ohjaus: <A href="http://mooc.fi/content/irc-ohjeet">IRCnet 
#mooc.fi </A>&nbsp;&nbsp; |  Tiedotus: <A href="http://twitter.com/mooc1"><IMG 
height="50" style="vertical-align: middle;" src="Basic%20of%20Object_files/twitter_newbird_blue.png"> 
Twitter </A><A href="http://www.facebook.com/Moocfi"><IMG height="30" style="padding: 10px; vertical-align: middle;" 
src="Basic%20of%20Object_files/f_logo-1.png"> Facebook</A>  |  Virheraportit: <A 
href="http://sourceforge.net/p/mooc-issues/tickets/"><IMG height="30" style="padding: 10px; vertical-align: middle;" 
src="Basic%20of%20Object_files/sf-footer-logo.png"> SourceForge</A></P>
<P class="rtecenter"><A href="http://www.cs.helsinki.fi/"><IMG width="400" 
style="vertical-align: middle;" alt="Helsingin yliopiston tietojenkäsittelytieteen laitos" 
src="Basic%20of%20Object_files/CS-logo-MOOC.jpg">&nbsp; </A></P></DIV>
<SCRIPT>
  (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
  (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
  m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
  })(window,document,'script','//www.google-analytics.com/analytics.js','ga');
 
  ga('create', 'UA-47575342-3', 'auto');
  ga('send', 'pageview');
 
</SCRIPT>
        </DIV></DIV><!-- /inner-inner -->	   </DIV><!-- /inner-wrapper -->     
<DIV class="corner-bottom">
<DIV class="corner-bottom-right corner"></DIV>
<DIV class="corner-bottom-left corner"></DIV></DIV></DIV><!-- /inner --> </DIV><!-- /block --></DIV><!-- /content-bottom-inner --> 
</DIV><!-- /content-bottom -->                       </DIV><!-- /content-group-inner --> 
                    </DIV><!-- /content-group -->                                
       </DIV><!-- /main-content-inner -->                 </DIV><!-- /main-content --> 
                              </DIV><!-- /main-group-inner -->             
</DIV><!-- /main-group -->           </DIV><!-- /main-inner -->         </DIV><!-- /main --> 
      </DIV><!-- /main-wrapper -->       <!-- postscript-bottom row: width = grid_width --> 
            <!-- footer row: width = grid_width -->             <!-- footer-message row: width = grid_width --> 
      
<DIV class="footer-message-wrapper full-width" id="footer-message-wrapper">
<DIV class="footer-message row grid16-16" id="footer-message">
<DIV class="footer-message-inner inner clearfix" id="footer-message-inner">
<DIV class="footer-message-text block" id="footer-message-text">
<DIV class="footer-message-text-inner inner clearfix" id="footer-message-text-inner"><BR></DIV><!-- /footer-message-text-inner --> 
</DIV><!-- /footer-message-text -->                    </DIV><!-- /footer-message-inner --> 
        </DIV><!-- /footer-message -->       </DIV><!-- /footer-message-wrapper --> 
    <!-- /page-inner -->   <!-- /page -->   </BODY></HTML>
