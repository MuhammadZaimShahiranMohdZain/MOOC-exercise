<!DOCTYPE HTML>
<!-- saved from url=(0078)http://mooc.cs.helsinki.fi/programming-part1/material-2013/week-3 -->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd"><HTML 
lang="en" lang="en" xml:lang="en" 
xmlns="http://www.w3.org/1999/xhtml"><HEAD><META content="IE=11.0000" 
http-equiv="X-UA-Compatible">
 
<META http-equiv="Content-Type" content="text/html; charset=utf-8">   
<TITLE>MOOC | MOOC - Massiivinen avoin verkkokurssi</TITLE>    <LINK href="/sites/mooc.cs.helsinki.fi/files/acquia_marina_favicon.png" 
rel="shortcut icon" type="image/x-icon">   <LINK href="Method%20and%20ArrayList_files/5c1587b6907a85bc361bd4b70014b0e3.css" 
rel="stylesheet" type="text/css" media="all"> <LINK href="Method%20and%20ArrayList_files/node.css" 
rel="stylesheet" type="text/css" media="all"> <LINK href="Method%20and%20ArrayList_files/defaults.css" 
rel="stylesheet" type="text/css" media="all"> <LINK href="Method%20and%20ArrayList_files/system.css" 
rel="stylesheet" type="text/css" media="all"> <LINK href="Method%20and%20ArrayList_files/system-menus.css" 
rel="stylesheet" type="text/css" media="all"> <LINK href="Method%20and%20ArrayList_files/user.css" 
rel="stylesheet" type="text/css" media="all"> <LINK href="Method%20and%20ArrayList_files/content-module.css" 
rel="stylesheet" type="text/css" media="all"> <LINK href="Method%20and%20ArrayList_files/ckeditor.css" 
rel="stylesheet" type="text/css" media="all"> <LINK href="Method%20and%20ArrayList_files/ctools.css" 
rel="stylesheet" type="text/css" media="all"> <LINK href="Method%20and%20ArrayList_files/date.css" 
rel="stylesheet" type="text/css" media="all"> <LINK href="Method%20and%20ArrayList_files/panels.css" 
rel="stylesheet" type="text/css" media="all"> <LINK href="Method%20and%20ArrayList_files/views.css" 
rel="stylesheet" type="text/css" media="all"> <LINK href="Method%20and%20ArrayList_files/aeb58e3ce47f9171327ad9fd87a26c8e.css" 
rel="stylesheet" type="text/css" media="all"> <LINK href="Method%20and%20ArrayList_files/flexible.css" 
rel="stylesheet" type="text/css" media="all"> <LINK href="Method%20and%20ArrayList_files/style.css" 
rel="stylesheet" type="text/css" media="all"> <LINK href="Method%20and%20ArrayList_files/typography.css" 
rel="stylesheet" type="text/css" media="all"> <LINK href="Method%20and%20ArrayList_files/superfish.css" 
rel="stylesheet" type="text/css" media="all"> <LINK href="Method%20and%20ArrayList_files/superfish-navbar.css" 
rel="stylesheet" type="text/css" media="all"> <LINK href="Method%20and%20ArrayList_files/superfish-vertical.css" 
rel="stylesheet" type="text/css" media="all"> <LINK href="Method%20and%20ArrayList_files/fusion-acquia-marina-style.css" 
rel="stylesheet" type="text/css" media="all"> <LINK href="Method%20and%20ArrayList_files/custom.css" 
rel="stylesheet" type="text/css" media="all"> <LINK href="Method%20and%20ArrayList_files/common.css" 
rel="stylesheet" type="text/css" media="all"> <LINK href="Method%20and%20ArrayList_files/exercises.css" 
rel="stylesheet" type="text/css" media="all"> <LINK href="Method%20and%20ArrayList_files/menu.css" 
rel="stylesheet" type="text/css" media="all"> <LINK href="Method%20and%20ArrayList_files/sh_style.css" 
rel="stylesheet" type="text/css" media="all">   <LINK href="Method%20and%20ArrayList_files/grid16-fluid.css" 
rel="stylesheet" type="text/css" media="all">   <!--[if IE 8]>
  <link type="text/css" rel="stylesheet" media="all" href="/sites/all/themes/fusion/fusion_core/css/ie8-fixes.css?8" />
<link type="text/css" rel="stylesheet" media="all" href="/sites/all/themes/acquia_marina/css/ie8-fixes.css?8" />
  <![endif]--> 
  <!--[if IE 7]>
  <link type="text/css" rel="stylesheet" media="all" href="/sites/all/themes/fusion/fusion_core/css/ie7-fixes.css?8" />
<link type="text/css" rel="stylesheet" media="all" href="/sites/all/themes/acquia_marina/css/ie7-fixes.css?8" />
  <![endif]--> 
  <!--[if lte IE 6]>
  <link type="text/css" rel="stylesheet" media="all" href="/sites/all/themes/fusion/fusion_core/css/ie6-fixes.css?8"/>
<link type="text/css" rel="stylesheet" media="all" href="/sites/all/themes/acquia_marina/css/ie6-fixes.css?8"/>
  <![endif]--> 
    
<SCRIPT src="Method%20and%20ArrayList_files/jquery.js" type="text/javascript"></SCRIPT>
 
<SCRIPT src="Method%20and%20ArrayList_files/drupal.js" type="text/javascript"></SCRIPT>
 
<SCRIPT src="Method%20and%20ArrayList_files/panels.js" type="text/javascript"></SCRIPT>
 
<SCRIPT src="Method%20and%20ArrayList_files/jquery.bgiframe.min.js" type="text/javascript"></SCRIPT>
 
<SCRIPT src="Method%20and%20ArrayList_files/hoverIntent.js" type="text/javascript"></SCRIPT>
 
<SCRIPT src="Method%20and%20ArrayList_files/supposition.js" type="text/javascript"></SCRIPT>
 
<SCRIPT src="Method%20and%20ArrayList_files/supersubs.js" type="text/javascript"></SCRIPT>
 
<SCRIPT src="Method%20and%20ArrayList_files/superfish.js" type="text/javascript"></SCRIPT>
 
<SCRIPT src="Method%20and%20ArrayList_files/script.js" type="text/javascript"></SCRIPT>
 
<SCRIPT src="Method%20and%20ArrayList_files/jquery.corner.js" type="text/javascript"></SCRIPT>
 
<SCRIPT src="Method%20and%20ArrayList_files/acquia-marina-script.js" type="text/javascript"></SCRIPT>
 
<SCRIPT src="Method%20and%20ArrayList_files/util-functions.js" type="text/javascript"></SCRIPT>
 
<SCRIPT src="Method%20and%20ArrayList_files/clear-default-text.js" type="text/javascript"></SCRIPT>
 
<SCRIPT src="Method%20and%20ArrayList_files/sh_java.min.js" type="text/javascript"></SCRIPT>
 
<SCRIPT src="Method%20and%20ArrayList_files/sh_main.min.js" type="text/javascript"></SCRIPT>
 
<SCRIPT src="Method%20and%20ArrayList_files/sh_ruby.min.js" type="text/javascript"></SCRIPT>
 
<SCRIPT src="Method%20and%20ArrayList_files/sh_scala.min.js" type="text/javascript"></SCRIPT>
 
<SCRIPT type="text/javascript">
<!--//--><![CDATA[//><!--
jQuery.extend(Drupal.settings, { "basePath": "/" });
//--><!]]>
</SCRIPT>
 
<META name="GENERATOR" content="MSHTML 11.00.9600.18163"></HEAD>
<BODY class="not-front not-logged-in page-node node-type-weekly-tasks no-sidebars full-node panels layout-main sidebars-both-first font-family-lucida font-size-13 grid-type-fluid grid-width-16 fluid-100" 
id="pid-programming-part1-material-2013-week-3">   
<DIV class="page" id="page">
<DIV class="page-inner" id="page-inner">
<DIV id="skip"><A href="http://mooc.cs.helsinki.fi/programming-part1/material-2013/week-3?noredirect=1#main-content-area">Skip 
to Main Content Area</A>       </DIV><!-- header-top row: width = grid_width --> 
            <!-- header-group row: width = grid_width -->       
<DIV class="header-group-wrapper full-width" id="header-group-wrapper">
<DIV class="header-group row grid16-16" id="header-group">
<DIV class="header-group-inner inner clearfix" id="header-group-inner">
<DIV class="primary-menu block" id="primary-menu">
<DIV class="primary-menu-inner inner clearfix" id="primary-menu-inner">
<UL class="menu sf-menu">
  <LI class="expanded first"><A title="" 
  href="http://mooc.cs.helsinki.fi/home">Kurssit ››</A>
  <UL class="menu">
    <LI class="leaf first"><A title="" 
    href="http://mooc.fi/algoritmit">Algoritmien MOOC</A></LI>
    <LI class="leaf"><A title="" href="http://mooc.cs.helsinki.fi/2014-ohjelmointi">Olio-ohjelmointi 
    Javalla</A></LI>
    <LI class="leaf"><A title="" 
    href="http://mooc.aalto.fi/ohjelmointi/">Ohjelmointia Scalalla</A></LI>
    <LI class="leaf"><A title="" 
    href="http://mooc.fi/programming-part1">Object-Oriented Programming with 
    Java, part I</A></LI>
    <LI class="leaf"><A title="" 
    href="http://mooc.fi/programming-part2">Object-Oriented Programming with 
    Java, part II</A></LI>
    <LI class="leaf last"><A title="" 
    href="http://mooc.cs.helsinki.fi/wepa">Web-palvelinohjelmointi</A></LI></UL></LI>
  <LI class="collapsed"><A title="Mikä on MOOC?" href="http://mooc.cs.helsinki.fi/content/mik%C3%A4-mooc">Mikä 
  on MOOC? ››</A></LI>
  <LI class="leaf last"><A title="" href="http://mooc.cs.helsinki.fi/content/j%C3%A4rjest%C3%A4v%C3%A4st%C3%A4-tahosta">Järjestävästä 
  tahosta ››</A></LI></UL></DIV><!-- /primary-menu-inner --> </DIV><!-- /primary-menu --> 
          </DIV><!-- /header-group-inner -->         </DIV><!-- /header-group --> 
      </DIV><!-- /header-group-wrapper -->       <!-- preface-top row: width = grid_width --> 
        <!--            <div id="preface-top-wrapper" class="preface-top-wrapper full-width">
        <div id="preface-top" class="preface-top row grid16-16">
          <div id="preface-top-inner" class="preface-top-inner inner clearfix"> 
--> 
          </DIV><!-- /preface-top-inner -->         </DIV><!-- /preface-top -->  
     <!-- /preface-top-wrapper -->           <!-- main row: width = grid_width --> 
    
<DIV class="main-wrapper full-width" id="main-wrapper">
<DIV class="main row grid16-16" id="main">
<DIV class="main-inner inner clearfix" id="main-inner"><!-- main group: width = grid_width - sidebar_first_width --> 
          
<DIV class="main-group row nested grid16-16" id="main-group">
<DIV class="main-group-inner inner clearfix" id="main-group-inner">
<DIV class="main-content row nested" id="main-content">
<DIV class="main-content-inner inner clearfix" id="main-content-inner"><!-- content group: width = grid_width - (sidebar_first_width + sidebar_last_width) --> 
                    
<DIV class="content-group row nested " id="content-group" style="width: 100%;">
<DIV class="content-group-inner inner clearfix" id="content-group-inner">
<DIV class="content-region row nested" id="content-region">
<DIV class="content-region-inner inner clearfix" id="content-region-inner"><A 
name="main-content-area" id="main-content-area"></A>                             
                            
<DIV class="content-inner block" id="content-inner">
<DIV class="content-inner-inner inner clearfix" id="content-inner-inner">
<DIV class="content-content" id="content-content">
<DIV class="panel-flexible panels-flexible-13 clear-block">
<DIV class="panel-flexible-inside panels-flexible-13-inside">
<DIV class="panels-flexible-row panels-flexible-row-13-7 panels-flexible-row-first clear-block ">
<DIV class="inside panels-flexible-row-inside panels-flexible-row-13-7-inside panels-flexible-row-inside-first clear-block">
<DIV class="panels-flexible-region panels-flexible-region-13-js_ panels-flexible-region-first panels-flexible-region-last ">
<DIV class="inside panels-flexible-region-inside panels-flexible-region-13-js_-inside panels-flexible-region-inside-first panels-flexible-region-inside-last">
<DIV class="panel-pane pane-custom pane-2 ">
<DIV class="inner">
<DIV class="corner-top">
<DIV class="corner-top-right corner"></DIV>
<DIV class="corner-top-left corner"></DIV></DIV>
<DIV class="inner-wrapper">
<DIV class="inner-inner">
<DIV class="pane-content content">
<H1 class="title"><A 
href="http://mooc.cs.helsinki.fi/programming-part1">Object-Oriented Programming 
with Java, part I ››</A></H1></DIV></DIV><!-- /inner-inner -->	   </DIV><!-- /inner-wrapper --> 
    
<DIV class="corner-bottom">
<DIV class="corner-bottom-right corner"></DIV>
<DIV class="corner-bottom-left corner"></DIV></DIV></DIV><!-- /inner --> </DIV><!-- /block -->
<DIV class="panel-region-separator"></DIV>
<DIV class="panel-pane pane-custom pane-3 ">
<DIV class="inner">
<DIV class="corner-top">
<DIV class="corner-top-right corner"></DIV>
<DIV class="corner-top-left corner"></DIV></DIV>
<DIV class="inner-wrapper">
<DIV class="inner-inner">
<DIV class="pane-content content"><LINK href="Method%20and%20ArrayList_files/menu(1).css" 
rel="stylesheet" type="text/css" media="screen"> <LINK href="Method%20and%20ArrayList_files/common-new.css" 
rel="stylesheet" type="text/css" media="screen, print"> <LINK href="Method%20and%20ArrayList_files/sh_style(1).css" 
rel="stylesheet" type="text/css" media="screen, print">        </DIV></DIV><!-- /inner-inner -->
	   </DIV><!-- /inner-wrapper -->     
<DIV class="corner-bottom">
<DIV class="corner-bottom-right corner"></DIV>
<DIV class="corner-bottom-left corner"></DIV></DIV></DIV><!-- /inner --> </DIV><!-- /block --> 
 </DIV></DIV></DIV></DIV>
<DIV class="panels-flexible-row panels-flexible-row-13-4 clear-block js">
<DIV class="inside panels-flexible-row-inside panels-flexible-row-13-4-inside clear-block">
<DIV class="panels-flexible-region panels-flexible-region-13-js_en_ panels-flexible-region-first ">
<DIV class="inside panels-flexible-region-inside panels-flexible-region-13-js_en_-inside panels-flexible-region-inside-first"></DIV></DIV>
<DIV class="panels-flexible-region panels-flexible-region-13-js ">
<DIV class="inside panels-flexible-region-inside panels-flexible-region-13-js-inside">
<DIV class="panel-pane pane-node ">
<DIV class="inner">
<DIV class="corner-top">
<DIV class="corner-top-right corner"></DIV>
<DIV class="corner-top-left corner"></DIV></DIV>
<DIV class="inner-wrapper">
<DIV class="inner-inner">
<DIV class="pane-content content">
<DIV class="node odd full-node node-type-page" id="node-222">
<DIV class="inner">
<H2 class="title"><A title="" 
href="http://mooc.cs.helsinki.fi/content/js-en"></A></H2>
<DIV class="content clearfix">
<SCRIPT src="Method%20and%20ArrayList_files/bootstrap.min.js" type="text/javascript"></SCRIPT>
 
<SCRIPT src="Method%20and%20ArrayList_files/jquery-1.7.1.min.js" type="text/javascript"></SCRIPT>
 
<SCRIPT src="Method%20and%20ArrayList_files/exercises-eng-new.js" type="text/javascript"></SCRIPT>
 
<SCRIPT src="Method%20and%20ArrayList_files/common-mooc-eng.js" type="text/javascript"></SCRIPT>
 
<SCRIPT src="Method%20and%20ArrayList_files/sh_main.min(1).js" type="text/javascript"></SCRIPT>
 
<SCRIPT src="Method%20and%20ArrayList_files/sh_java.min(1).js" type="text/javascript"></SCRIPT>
 
<SCRIPT src="Method%20and%20ArrayList_files/jquery.easing.js" type="text/javascript"></SCRIPT>
 
<DIV class="menu" id="toc" data-first-exercise-index="1" 
data-first-chapter-index="1"><SPAN id="materiaali_toc"></SPAN>           <!--div id="tehtavat_toc" ></div--> 
          <SPAN id="tehtavat_toc2"></SPAN>         </DIV></DIV></DIV><!-- /inner --> 
  </DIV><!-- /node-222 -->         </DIV></DIV><!-- /inner-inner -->	   </DIV><!-- /inner-wrapper --> 
    
<DIV class="corner-bottom">
<DIV class="corner-bottom-right corner"></DIV>
<DIV class="corner-bottom-left corner"></DIV></DIV></DIV><!-- /inner --> </DIV><!-- /block --> 
 </DIV></DIV>
<DIV class="panels-flexible-region panels-flexible-region-13-copyright panels-flexible-region-last float-right">
<DIV class="inside panels-flexible-region-inside panels-flexible-region-13-copyright-inside panels-flexible-region-inside-last">
<DIV class="panel-pane pane-custom pane-1 box ">
<DIV class="inner">
<DIV class="corner-top">
<DIV class="corner-top-right corner"></DIV>
<DIV class="corner-top-left corner"></DIV></DIV>
<DIV class="inner-wrapper">
<DIV class="inner-inner">
<DIV class="pane-content content">
<P><A href="http://creativecommons.org/licenses/by-nc-sa/2.0/" 
rel="license"><IMG style="border-width: 0px; float: right;" alt="Creative Commons License" 
src="Method%20and%20ArrayList_files/88x31.png"></A><SMALL>This material is 
licensed under the Creative Commons BY-NC-SA license, which means that you can 
use it and distribute it freely so long as you do not erase the names of the 
original authors. If you do changes in the material and want to distribute this 
altered version of the material, you have to license it with a similar free 
license. The use of the material for commercial use is prohibited without a 
separate agreement.</SMALL></P></DIV></DIV><!-- /inner-inner -->	   </DIV><!-- /inner-wrapper --> 
    
<DIV class="corner-bottom">
<DIV class="corner-bottom-right corner"></DIV>
<DIV class="corner-bottom-left corner"></DIV></DIV></DIV><!-- /inner --> </DIV><!-- /block -->
<DIV class="panel-region-separator"></DIV>
<DIV class="panel-pane pane-content-field pane-field-author course-menu ">
<DIV class="inner">
<DIV class="corner-top">
<DIV class="corner-top-right corner"></DIV>
<DIV class="corner-top-left corner"></DIV></DIV>
<DIV class="inner-wrapper">
<DIV class="inner-inner">
<DIV class="pane-content content">
<DIV class="field field-type-text field-field-author">
<DIV class="field-items">
<DIV class="field-item odd">                    Authors: Arto Vihavainen, Matti 
Luukkainen        </DIV></DIV></DIV></DIV></DIV><!-- /inner-inner -->	   </DIV><!-- /inner-wrapper --> 
    
<DIV class="corner-bottom">
<DIV class="corner-bottom-right corner"></DIV>
<DIV class="corner-bottom-left corner"></DIV></DIV></DIV><!-- /inner --> </DIV><!-- /block -->
<DIV class="panel-region-separator"></DIV>
<DIV class="panel-pane pane-content-field pane-field-translators course-menu ">
<DIV class="inner">
<DIV class="corner-top">
<DIV class="corner-top-right corner"></DIV>
<DIV class="corner-top-left corner"></DIV></DIV>
<DIV class="inner-wrapper">
<DIV class="inner-inner">
<DIV class="pane-content content">
<DIV class="field field-type-text field-field-translators">
<DIV class="field-items">
<DIV class="field-item odd">                    Translators to English: Emilia 
Hjelm, Alex H. Virtanen, Matti Luukkainen, Virpi Sumu, Birunthan Mohanathas      
  </DIV></DIV></DIV></DIV></DIV><!-- /inner-inner -->	   </DIV><!-- /inner-wrapper --> 
    
<DIV class="corner-bottom">
<DIV class="corner-bottom-right corner"></DIV>
<DIV class="corner-bottom-left corner"></DIV></DIV></DIV><!-- /inner --> </DIV><!-- /block --> 
 </DIV></DIV></DIV></DIV>
<DIV class="panels-flexible-row panels-flexible-row-13-8 panels-flexible-row-last clear-block js en">
<DIV class="inside panels-flexible-row-inside panels-flexible-row-13-8-inside panels-flexible-row-inside-last clear-block">
<DIV class="panels-flexible-region panels-flexible-region-13-js_en panels-flexible-region-first panels-flexible-region-last ">
<DIV class="inside panels-flexible-region-inside panels-flexible-region-13-js_en-inside panels-flexible-region-inside-first panels-flexible-region-inside-last">
<DIV class="panel-pane pane-node-content box-mooc ">
<DIV class="inner">
<DIV class="corner-top">
<DIV class="corner-top-right corner"></DIV>
<DIV class="corner-top-left corner"></DIV></DIV>
<DIV class="inner-wrapper">
<DIV class="inner-inner">
<DIV class="pane-content content">
<DIV class="node even full-node node-type-weekly_tasks" id="node-233">
<DIV class="inner">
<DIV class="content clearfix">
<DIV class="viikkoraja-mooc" id="Week 3" data-first-exercise-index="15" 
data-first-chapter-index="1" kaantaja="Emilia Hjelm, Alex H. Virtanen, Matti Luukkainen, Virpi Sumu, Birunthan Mohanathas" 
tekija="Arto Vihavainen, Matti Luukkainen" data-first-week-index-mooc="43" 
data-first-exercise-index-mooc="43" data-first-chapter-index-mooc="14" 
data-first-week-index="3" unlock="unlocks when 85% of week 2 done" deadline="unlocks when 85% of week 2 done">
<H2>More about methods</H2>
<H3>Methods and visibility of variables</H3>
<P>Let us try to change from within a method the value of a variable located in 
the main program.</P>
<PRE class="sh_java">// main program
public static void main(String[] args) {
    int number = 1;
    addThree();
}

// method
public static void addThree() {
    number = number + 3;
}
</PRE>
<P>Unfortunately this program will not work, because the method cannot "see" the 
variable <CODE>number</CODE> located in the main program.</P>
<P>This holds generally. Variables defined in the main program are not visible 
for other methods. Also, the other way is similar: variables defined in methods 
are not visible for other methods or the main program. The only way to give 
information to a method from the outside is to use parameters.</P>
<PRE class="sh_java">// main program
public static void main(String[] args) {
    int number = 1;
    System.out.println("Main program variable number holds the value: " + number);
    addThree(number);
    System.out.println("Main program variable number holds the value: " + number);
}

// method
public static void addThree(int number) {
    System.out.println("Method parameter number holds the value: " + number);
    number = number + 3;
    System.out.println("Method parameter number holds the value: " + number);
}
</PRE>
<P>In the program above the method addThree has a parameter called 
<CODE>number</CODE>. This parameter is <EM>copied</EM> (duplicated) for the 
method to use. When the program above is executed we see the following 
output:</P>
<PRE>Main program variable number holds the value: 1
Method parameter number holds the value: 1
Method parameter number holds the value: 4
Main program variable number holds the value:  1
</PRE>
<P>The number we gave as a parameter to the method was <EM>copied</EM> for the 
method to use. If we would like the main program to be able to use the new value 
generated by the method, the method needs to return that value.</P>
<H3>Return values</H3>
<P>A method can return a value. In the examples above, methods have not been 
returning anything. This is expressed by writing <EM>void</EM> in the first line 
of the method, just before it's name.</P>
<PRE class="java">public static void addThree() {
  ...
</PRE>
<P>When defining a method that returns a value, we also have to define the type 
of the return value. We can define the type of the return value by writing it 
just before the name of the method. Next, we have a method that always returns 
the number 10 (type <CODE>int</CODE>). Returning a value is accomplished with 
the command return:</P>
<PRE class="sh_java">public static int alwaysReturnTen() {
    return 10;
}
</PRE>
<P>If we want to use the returned value later, we have to catch the return value 
and store it into a variable:</P>
<PRE class="sh_java">public static void main(String[] args) {
    int number = alwaysReturnTen();

    System.out.println( "method returned the number " + number );
}
</PRE>
<P>The return value of the method is assigned to a variable of type 
<CODE>int</CODE> just like any other integer. The return value can also be a 
part of a sentence:</P>
<PRE class="sh_java">double number = 4 * alwaysReturnTen() + (alwaysReturnTen() / 2) - 8;

System.out.println( "calculation total " + number );
</PRE>
<P>Every variable type we have seen this far can be used as a return value:</P>
<PRE class="sh_java">public static void methodThatReturnsNothing() {
  // method body
}

public static int methodThatReturnsInteger() {
  // method body, needs a return statement
}

public static String methodThatReturnsText() {
  // method body, needs a return statement
}

public static double methodThatReturnsFloatingpoint() {
  // method body, needs a return statement
}
</PRE>
<P>If the method is defined to have a return value, it also has to return a 
value. The following method is incorrect:</P>
<PRE class="sh_java">public static String wrongMethod() {
    System.out.println("I tell you that I will return a String but I do not!");
}
</PRE>
<P>In the following example, we define a method for calculating a sum. Then, we 
use the method to calculate 2 + 7. The return value (returned after the method 
call) is assigned to a variable called <CODE>sumNumbers</CODE>.</P>
<PRE class="sh_java">public static int sum(int first, int second) {
    return first + second;
}
</PRE>
<P>Method call:</P>
<PRE class="sh_java">int sumNumbers = sum(2, 7);
// sumNumbers now holds the value 9
</PRE>
<P>Let us expand the example program so that the user types the numbers.</P>
<PRE class="sh_java">public static void main(String[] args) {
    Scanner reader = new Scanner(System.in);

    System.out.print("Type the first number: ");
    int first = Integer.parseInt( reader.nextLine() );

    System.out.print("Type the second number: ");
    int second = Integer.parseInt( reader.nextLine() );

    System.out.print("Total: " + sum(first,second) );
}

public static int sum(int first, int second) {
    return first + second;
}
</PRE>
<P>As we can see, the return value of the method does not always need to be 
assigned to a variable. It can also act as a part of the printing command just 
like any other integer value.</P>
<P>In the next example, we call the method sum using integers that we get as 
return values from the method <CODE>sum</CODE>.</P>
<PRE class="sh_java">int first = 3;
int second = 2;

sum(sum(1, 2), sum(first, second));
// 1) the inner methods are executed:
//    sum(1, 2) = 3   and sum(first, second) = 5
// 2) the outer method is executed:
//    sum(3, 5) = 8
</PRE>
<H3>The method's own variables</H3>
<P>The following method calculates the average of the numbers the method gets as 
parameters. The method uses helper variables <CODE>sum</CODE> and 
<CODE>average</CODE>. The method's own variables can be introduced just like any 
other variables.</P>
<PRE class="sh_java">public static double average(int number1, int number2, int number3) {

    int sum = number1 + number2 + number3;
    double average = sum / 3.0;

    return average;
}
</PRE><!-- <p>Screencast aiheesta: TODO</p>   screencast --> 
<DIV class="tehtavat">
<DIV class="tehtava">
<H3 class="req">Sum of numbers</H3>
<P>Create the method <CODE>sum</CODE> that calculates the sum of numbers the 
method receives as    parameters.</P>
<P>Place the method in the following program body:</P>
<PRE class="sh_java">public static int sum(int number1, int number2, int number3, int number4) {
    // write program code here
    // remember that the method needs a return in the end
}

public static void main(String[] args) {
    int answer = sum(4, 3, 6, 1);
    System.out.println("sum: " + answer);
}
    </PRE>
<P>Example output:</P>
<PRE>sum: 14
    </PRE>
<P><B>Note:</B> if an exercise involves a method <EM>returning</EM> something, 
it    means that the return type needs to be defined for the method, and that 
the method needs to    return a value of that type using the <CODE>return</CODE> 
command. In this case, the method does not print (or use the    command 
<CODE>System.out.println(..)</CODE>), the method caller handles printing, here, 
the    main program..</P></DIV>
<DIV class="tehtava">
<H3 class="req">Least</H3>
<P>Create the method <CODE>least</CODE>, which returns the least of the numbers 
given as parameters.    If the parameters are equal, you can decide which one is 
returned.</P>
<PRE class="sh_java">public static int least(int number1, int number2) {
    // write program code here
    // do not print anything inside the method

    // method needs a return in the end
}

public static void main(String[] args) {
    int answer =  least(2, 7);
    System.out.println("Least: " + answer);
}
    </PRE>
<P>Example output:</P>
<PRE>Least: 2
    </PRE></DIV>
<DIV class="tehtava">
<H3>Greatest</H3>
<P>Create the method <CODE>greatest</CODE>, which gets three integers as 
parameters and then returns    the greatest of them. If there are several 
parameters that are equally great, you can decide which one    is returned. 
Printing should be done in the main program.</P>
<PRE class="sh_java">public static int greatest(int number1, int number2, int number3) {
    // write your code here
}

public static void main(String[] args) {
    int answer =  greatest(2, 7, 3);
    System.out.println("Greatest: " + answer);
}
    </PRE>
<P>Example output:</P>
<PRE>Greatest: 7
    </PRE></DIV>
<DIV class="tehtava">
<H3 class="req">Average of given numbers</H3>
<P>Create the method <CODE>average</CODE>, which calculates the average of the 
numbers it gets as    parameters. Inside the method you should use the method 
<CODE>sum</CODE> as a helper!</P>
<P>Place the method in the following program body:</P>
<PRE class="sh_java">public static double average(int number1, int number2, int number3, int number4) {
    // write your code here
}

public static void main(String[] args) {
    double answer = average(4, 3, 6, 1);
    System.out.println("average: " + answer);
}

    </PRE>
<P>Program output:</P>
<PRE>average: 3.5
    </PRE>
<P>Make sure you remember how you can transform a whole number (<TT>int</TT>) 
into a decimal number    (<TT>double</TT>)!</P></DIV></DIV>
<H2 id="merkkijonot">Strings of characters</H2>
<P>In this section, we take a closer look at strings of characters in Java, 
which are called <CODE>Strings</CODE>. We have already used variables of 
<CODE>String</CODE> type when printing, and learned how to compare Strings. 
Comparing two strings is performed by <EM>calling</EM> the <CODE>equals()</CODE> 
method of the string.</P>
<PRE class="sh_java">String animal = "Dog";

if( animal.equals("Dog") ) {
    System.out.println(animal + " says bow-wow");
} else if ( animal.equals("Cat") ) {
    System.out.println(cat + " says meow meow");
}
</PRE>
<P>It is possible to ask the string how many characters long it is by writing 
<CODE>.length()</CODE> after it's name. In other words, we are calling its 
length() method.</P>
<PRE class="sh_java">String banana = "banana";
String cucumber = "cucumber";
String together = banana + cucumber;

System.out.println("The length of banana is " + banana.length());
System.out.println("The length of  cucumber is " + cucumber.length());
System.out.println("The word " + together + " length is " + together.length());
</PRE>
<P>In the above code, the method <CODE>length()</CODE> is called for three 
different strings. The call <CODE>banana.length()</CODE> calls only the method 
that gives the length of the string <CODE>banana</CODE>, while 
<CODE>cucumber.length()</CODE> calls the method that gives the length of the 
string <CODE>cucumber</CODE> etc. The left part before the dot says whose method 
is called.</P>
<P>Java has a special data type, called <CODE>char</CODE>, to be used for 
characters. A <CODE>char</CODE> variable can store only one character. A string 
variable can return a character from a specific location in itself with the 
method <CODE>charAt()</CODE> that uses the index of the location as a parameter. 
Note that counting the index of the character starts from zero!</P>
<PRE class="sh_java">String word = "Supercalifragilisticexpialidocious";

char character = word.charAt(3);
System.out.println("The 4th character of the word is " + character); //prints "e"
</PRE>
<P>The characters in a string are numbered (indexed) starting from 0. This means 
that we can reach the last character in a string with number (or index) "the 
length of the word minus one", or <CODE>word.charAt(word.length()-1)</CODE>. The 
following example will make the program crash, because we are trying to get a 
character from an index that does not exist.</P>
<PRE class="sh_java">char character = word.charAt(word.length());
</PRE>
<DIV><BIG><BIG><B>A tip for using NetBeans</B></BIG></BIG>   
<UL>
  <LI>You can find all the NetBeans tips <A href="http://mooc.fi/courses/general/programming/#netbeans-tips">here</A> 
      </LI>
  <LI><B>Renaming</B>     
  <P>Variables, methods and classes (we will learn about these in the next set) 
  need to have descriptive    names. Often, a name is not that describing and 
  needs to be changed. In NetBeans, it is really easy to rename things. Just 
  select and "paint"    the name you want to change with the mouse. Then press 
  ctrl and r simultaneously, and write    the new name.</P></LI></UL></DIV>
<DIV class="tehtavat">
<DIV class="tehtava">
<H3 class="req">The length of a name</H3>
<P>Create a program that asks for the user's name and says how many characters 
the name    contains.</P>
<PRE>Type your name: <FONT color="red">Paul</FONT>
Number of characters: 4
    </PRE>
<PRE>Type your name: <FONT color="red">Catherine</FONT>
Number of characters: 9
    </PRE>
<P><STRONG>Note!</STRONG>Your program should be structured so that you put the 
calculating of the    name length in it's own method: <CODE>public static int 
calculateCharacters(String      text)</CODE>. The tests will be testing both the 
method <CODE>calculateCharacters</CODE> and the    program overall.</P></DIV>
<DIV class="tehtava">
<H3 class="req">First character</H3>
<P>Create a program that asks for the user's name and gives the first 
character.</P>
<PRE>Type your name: <FONT color="red">Paul</FONT>
First character: P
    </PRE>
<PRE>Type your name: <FONT color="red">Catherine</FONT>
First character: C
    </PRE>
<P><STRONG>Note!</STRONG> Your program should be structured so that you put the 
search for the    first character in its own method: <CODE>public static char 
firstCharacter(String text)</CODE>. The    tests will be testing both the method 
<CODE>firstCharacter</CODE> and the program overall</P></DIV>
<DIV class="tehtava">
<H3>Last character</H3>
<P>Create a program that asks for the user's name and gives the last 
character.</P>
<PRE>Type your name: <FONT color="red">Paul</FONT>
Last character: l
    </PRE>
<PRE>Type your name: <FONT color="red">Catherine</FONT>
Last character: e
    </PRE>
<P><STRONG>Note!</STRONG> Your program should be structured so that you put the 
search for the last    character in its own method: <CODE>public static char 
lastCharacter(String text)</CODE>. The tests    will be testing both the method 
<CODE>lastCharacter</CODE> and the program overall.</P></DIV>
<DIV class="tehtava">
<H3 class="req">Separating first characters</H3>
<P>Create a program that asks for the user's name and gives its first, second 
and third    characters separately. If the name length is less than three, the 
program prints nothing. You do    not need to create methods in this 
exercise.</P>
<PRE>Type your name: <FONT color="red">Paul</FONT>
1. character: P
2. character: a
3. character: u
    </PRE>
<PRE>Type your name: <FONT color="red">me</FONT>
    </PRE>
<P><STRONG>Note:</STRONG> watch closely at the output in this and the following 
exercise. The print    needs to contain a space after the dot and the 
colon!</P></DIV>
<DIV class="tehtava">
<H3 class="req">Separating characters</H3>
<P>Create a program that asks for the user's name and gives its characters 
separately. You do    not need to create methods in this exercise.</P>
<PRE>Type your name: <FONT color="red">Paul</FONT>
1. character: P
2. character: a
3. character: u
4. character: l
    </PRE>
<P><B>Hint: using a <CODE>while</CODE> loop helps in this exercise!</B></P>
<PRE>Type your name: <FONT color="red">Catherine</FONT>
1. character: C
2. character: a
3. character: t
4. character: h
5. character: e
6. character: r
7. character: i
8. character: n
9. character: e
    </PRE></DIV>
<DIV class="tehtava">
<H3 class="req">Reversing a name</H3>
<P>Create a program that asks for the user's name and prints it in reverse 
order. You do not    need to create a separate method for this.</P>
<PRE>Type your name: <FONT color="red">Paul</FONT>
In reverse order: luaP
    </PRE>
<PRE>Type your name: <FONT color="red">Catherine</FONT>
In reverse order: enirehtaC
    </PRE>
<P><B>Hint: You can print one character using the command 
<CODE>System.out.print()</CODE></B></P></DIV></DIV>
<H3 id="merkkijonon_muita">Other methods for strings</H3>
<P>We often want to read only a specific part of a string. A method in the 
String class called <CODE>substring</CODE> makes this possible. It can be used 
in two ways:</P>
<PRE class="sh_java">String word = "Supercalifragilisticexpialidocious";
System.out.println(word.substring(14)); //prints "listicexpialidocious"
System.out.println(word.substring(9,20)); //prints "fragilistic"
</PRE>
<P>We can store the return value in a variable, because the return value of the 
<CODE>substring</CODE> method is of type <CODE>String</CODE>.</P>
<PRE class="sh_java">String book = "Mary Poppins";
String endpart = book.substring(5);
System.out.println("Harry " + endpart); // prints "Harry Poppins"
</PRE>
<P>Methods in the String class also make it possible to search for a specific 
word in text. For example, the word "or" can be found in the word "Horse". A 
method called <CODE>indexOf()</CODE> searches for the word given as a parameter 
in a string. If the word is found, it returns the starting index (location), 
remember that the numbering starts from 0 of the word. If the word is not found, 
the method returns the value -1.</P>
<PRE class="sh_java">String word = "aesthetically";

int index = word.indexOf("tic"); // index value will be 6
System.out.println(word.substring(index)); //prints "tically"

index = word.indexOf("ally"); //index value will be 9
System.out.println(word.substring(index)); //prints "ally"

index = word.indexOf("book"); // string "aesthetically" does not include "book"
System.out.println(index); //prints -1
System.out.println(word.substring(index)); //error!
</PRE><!-- <p>Screencast aiheesta: TODO</p>   screencast --> 
<DIV class="tehtavat">
<DIV class="tehtava">
<H3 class="req">First part</H3>
<P>Create a program that prints the first part of a word. The program asks the 
user for the word    and the length of the first part. Use the 
<CODE>substring</CODE> method in your program.</P>
<PRE>Type a word: <FONT color="red">example</FONT>
Length of the first part: <FONT color="red">4</FONT>
Result: exam
    </PRE>
<PRE>Type a word: <FONT color="red">example</FONT>
Length of the first part: <FONT color="red">6</FONT>
Result: exampl
    </PRE></DIV>
<DIV class="tehtava">
<H3>The end part</H3>
<P>Create a program that prints the end part of a word. The program asks the 
user for the word and the    length of the end part. Use the 
<CODE>substring</CODE> method in your program.</P>
<PRE>Type a word: <FONT color="red">example</FONT>
Length of the end part: <FONT color="red">4</FONT>
Result: mple
    </PRE>
<PRE>Type a word: <FONT color="red">example</FONT>
Length of the end part: <FONT color="red">6</FONT>
Result: xample
    </PRE></DIV>
<DIV class="tehtava">
<H3 class="req">A word inside a word</H3>
<P>Create a program that asks the user for two words. Then the program tells if 
the second word    is included in the first word. Use String method 
<CODE>indexOf</CODE> in your program.</P>
<PRE>Type the first word: <FONT color="red">glitter</FONT>
Type the second word: <FONT color="red">litter</FONT>
The word 'litter' is found in the word 'glitter'.
    </PRE>
<PRE>Type the first word: <FONT color="red">glitter</FONT>
Type the second word: <FONT color="red">clean</FONT>
The word 'clean' is not found in the word 'glitter'.
    </PRE>
<P><STRONG>Note:</STRONG> Make your program outputs (prints) match exactly the 
example above!</P></DIV>
<DIV class="tehtava">
<H3>Reversing text</H3>
<P>Create the method <CODE>reverse</CODE> that puts the given string in reversed 
order. Use the    following program body for the method:</P>
<PRE class="sh_java">public static String reverse(String text) {
    // write your code here
}

public static void main(String[] args) {
    System.out.print("Type in your text: ");
    String text = reader.nextLine();
    System.out.println("In reverse order: " + reverse(text));
}
    </PRE>
<P><B>Hint:</B> you probably need to build the reversed string character by 
character in your    method. You can use a String-type variable as a helper 
during the building process. In the beginning, the    helper variable should 
have an empty string of characters as a value. After this, new characters    are 
added to the string one by one.</P>
<PRE>String help = "";

// ...
// adding a character to the help variable
help = help + character;
    </PRE>
<P>Program output:</P>
<PRE>Type a text: <FONT color="red">example</FONT>
elpmaxe
    </PRE></DIV></DIV>
<H2>Object</H2>
<P>Strings and integers have some differences. Integers are "just values", they 
can be used in calculations and they can be printed on the screen:</P>
<PRE class="sh_java">int x = 1;
int y = 2;

y = 3*x;

System.out.println( "value of y now: " + y );
</PRE>
<P>Strings are a bit "cleverer" and for example know how long they are:</P>
<PRE class="sh_java">String word1 = "Programming";
String word2 = "Java";

System.out.println( "String "+ word1 +" length: " + word1.length() );

System.out.println( "String "+ word2 +" length: " + word2.length() );

</PRE>
<P>Program output:</P>
<PRE>String Programming length: 11
String Java length: 4
</PRE>
<P>We can determine the length by calling the String method 
<CODE>length()</CODE>. Strings have other methods as well. Integers (or whole 
numbers, variables of type <CODE>int</CODE>) have no methods at all. They do not 
"know" anything.</P>
<P>Strings are <EM>objects</EM>, or "something that has methods and a value". 
Later we will see many other objects as well.</P>
<P>As we can see in the previous example, an object's methods are called by 
adding a dot and a method call after the name of the object:</P>
<PRE class="sh_java">word1.length()    // String object's name is word1 and its method length() is called
word2.length()    // String object's name is word2 and its method length() is called
</PRE>
<P>The method call is made explicitly to the object. In the above example, we 
have two objects and first we call the <CODE>length()</CODE> method of the 
String object <CODE>word1</CODE> and then do the same for the object 
<CODE>word2</CODE>.</P>
<P>Our old friend <CODE>reader</CODE> is also an object:</P>
<PRE class="sh_java">Scanner reader = new Scanner(System.in);
</PRE>Even though 
readers and strings are both objects, they are not very similar. For example, 
readers (Scanners) have the <CODE>  nextLine()</CODE> method, but Strings do 
not. In the Java programming language, objects must be "born", in other words 
created with the <CODE>new</CODE> command. Strings are objects that make an 
exception to this rule! -- There are two ways to create a String object: 
<PRE class="sh_java">String banana = new String("Banana");
String carrot = "carrot";
</PRE>
<P>Both of the commands above create a new String object. Using the 
<CODE>new</CODE> command when creating a String objects is uncommon.</P>
<P>The object's "type" is called a <EM>class</EM>. The class of a string of 
characters is called <CODE>String</CODE> and the class of readers is called 
<CODE>Scanner</CODE>. Later we learn much more about classes and objects.</P>
<H2>ArrayList or an "object container"</H2>
<P>Often during programming, we would like to keep many different strings in 
memory. A very bad idea would be to define a variable for each of them: :</P>
<PRE class="sh_java">String word1;
String word2;
String word3;
// ...
String word10;
</PRE>
<P>This would be such a good-for-nothing solution that it does not almost need 
an explanation -- think of this approach for a word count of 100 or 1000!</P>
<P>Just like other modern programming languages, Java gives us different tools 
to store many objects neatly in our programs. Now, we take a closer look at 
<EM>ArrayList</EM>, which is probably the most used object container in 
Java.</P>
<P>The following lines of code make use of an ArrayList that holds specifically 
objects of type String. A couple of strings are stored into the list.</P>
<PRE class="sh_java">import java.util.ArrayList;

public class ListProgram {

    public static void main(String[] args) {
        ArrayList&lt;String&gt; wordList = new ArrayList&lt;String&gt;();

        wordList.add("First");
        wordList.add("Second");
    }
}
</PRE>
<P>In the above main program method, the first row creates a new ArrayList 
called <CODE>wordList</CODE>, which can be used as a container for String 
variables. The type of the ArrayList is <CODE>ArrayList&lt;String&gt;</CODE>, 
which means that the ArrayList is meant for storing Strings. The list is created 
using the command <CODE>new ArrayList&lt;String&gt;();</CODE>.</P>
<P><B>Note:</B> to make the ArrayList work, we must first write an import 
statement at the beginning of the program  either <CODE>import 
java.util.ArrayList;</CODE> or <CODE>import  java.util.*;</CODE></P>
<P>When the list is created, two strings are added by calling the list method 
<CODE>add</CODE>. The list will not run out of space, so theoretically the list 
can contain any amount of Strings (as long as they fit in the computer's 
memory).</P>
<P>Internally an ArrayList is -- as its name suggests -- a list. The added 
strings automatically go to the end of the ArrayList.</P>
<H3>Methods of ArrayLists</H3>
<P>ArrayList provides us with many useful methods:</P>
<PRE class="sh_java">public static void main(String[] args) {
    ArrayList&lt;String&gt; teachers = new ArrayList&lt;String&gt;();

    teachers.add("Anthony");
    teachers.add("Barto");
    teachers.add("Paul");
    teachers.add("John");
    teachers.add("Martin");
    teachers.add("Matt");

    System.out.println("the number of teachers " + teachers.size() );

    System.out.println("first teacher on the list " + teachers.get(0));
    System.out.println("third teacher on the list " + teachers.get(2));

    teachers.remove("Barto");

    if (teachers.contains("Barto")) {
        System.out.println("Barto is on the teachers list");
    } else {
        System.out.println("Barto is not on the teachers list");
    }
}
</PRE>
<P>First a list of strings is created and then 6 names added to it. 
<CODE>size</CODE> tells us the amount of strings in the list. <B>Note:</B> when 
the method is called, the call should have the following format: 
<CODE>teachers.size()</CODE>. First comes the name of the object, then follows a 
dot followed by the name of the method.</P>
<P>The strings will be in the list in the order in which they were added to it. 
By calling the method <CODE>get(i)</CODE>, we get the value from the index 
(location) i in the list. The indexing of items in the list starts from 0. This 
means that the first added string is located at index 0, the second at index 1, 
and so on.</P>
<P>We can remove strings from lists through the method <CODE>remove</CODE>. The 
method can be used in two ways. First, <CODE>remove("characters")</CODE> removes 
the string given as a parameter. Second, <CODE>remove(3)</CODE> removes the 4th 
String from the list.</P>
<P>At the end of the example, the method <CODE>contains</CODE> is called. This 
method is used for asking the list if it contains the string given as a 
parameter. If it does, the method returns the value <CODE>true</CODE>.</P>
<P>Program output:</P>
<PRE>the number of teachers 6
first teacher on the list Anthony
third teacher on the list Paul
Barto is not on the teachers list
</PRE>
<P><STRONG>Note!</STRONG> The methods <CODE>remove</CODE> and 
<CODE>contains</CODE> assume that the objects stored in the ArrayList do have an 
<CODE>equals</CODE> method. We will get back to this later in the course.</P>
<H3>Going through an ArrayList</H3>
<P>In the following example 4 names are added to the list. Then the whole list 
is printed:</P>
<PRE class="sh_java">public static void main(String[] args) {
    ArrayList&lt;String&gt; teachers = new ArrayList&lt;String&gt;();

    teachers.add("Anthony");
    teachers.add("Paul");
    teachers.add("John");
    teachers.add("Martin");

    System.out.println( teachers.get(0) );
    System.out.println( teachers.get(1) );
    System.out.println( teachers.get(2) );
    System.out.println( teachers.get(3) );
}
</PRE>
<P>This solution works, but is really clumsy. What if there were more items in 
the list? Or less? What if we would not know how many items there are?</P>
<P>First, we create a temporary version:</P>
<PRE class="sh_java">public static void main(String[] args) {
    ArrayList&lt;String&gt; teachers = new ArrayList&lt;String&gt;();

    teachers.add("Anthony");
    teachers.add("Paul");
    teachers.add("John");
    teachers.add("Martin");
    teachers.add("Matt");

    int place = 0;
    System.out.println( teachers.get(place) );
    place++;
    System.out.println( teachers.get(place) );  // place = 1
    place++;
    System.out.println( teachers.get(place) );  // place = 2
    place++;
    System.out.println( teachers.get(place) );  // place = 3
}
</PRE>
<P>Using our old friend the <CODE>while</CODE> command, we can increment the 
variable <CODE>place</CODE> by one until it gets too big:</P>
<PRE class="sh_java">public static void main(String[] args) {
    ArrayList&lt;String&gt; teachers = new ArrayList&lt;String&gt;();

    teachers.add("Anthony");
    teachers.add("Paul");
    teachers.add("John");
    teachers.add("Martin");
    teachers.add("Matt");

    int place = 0;
    while ( place &lt; teachers.size() )  // remember why place &lt;= teachers.size() doesn't work?
        System.out.println( teachers.get(place) );
        place++;
    }
}
</PRE>
<P>Now, printing works regardless of the amount of items in the list.</P>
<P>Using a while loop, and "self indexing" the locations in the list, is usually 
not the best way to go through a list. A much more recommended way is to use the 
for-each loop described below.</P>
<H3>for-each</H3>
<P>Even though the command is usually referred to as for-each, the real name of 
the command is only <CODE>for</CODE>. There are two versions of for, the 
traditional and the "for-each". The latter is used now.</P>
<P>Going through items in an ArrayList with for-each is easy:</P>
<PRE class="sh_java">public static void main(String[] args) {
    ArrayList&lt;String&gt; teachers = new ArrayList&lt;String&gt;();

    teachers.add("Anthony");
    teachers.add("Paul");
    teachers.add("John");
    teachers.add("Martin");
    teachers.add("Matt");

    for (String teacher : teachers) {
        System.out.println( teacher );
    }
}
</PRE>
<P>As we can see, the indexes of the list can be ignored if we go through the 
content of the list            "automatically".</P>
<P>In the code block of the for command (inside { }) a variable 
<CODE>teacher</CODE> is used. It is defined in the for row, on the left side of 
the colon. What happens is that every item in the list <CODE>teachers</CODE> 
becomes the value of the variable <CODE>teacher</CODE>, one by one. It means 
that when for is entered, the first <CODE>teacher</CODE> is <EM>Anthony</EM>, 
the second execution of for makes the <CODE>teacher</CODE> become <EM>Paul</EM> 
etc.</P>
<P>Even though the <CODE>for</CODE> command might seem a bit strange at first, 
you should definitely get used to use it!</P><!-- <p>Screencast aiheesta: TODO</p>   screencast --> 
<DIV class="tehtavat">
<DIV class="tehtava">
<H3 class="req">Words</H3>
<P>Create a program that asks the user to input words until the user types in an 
empty String. Then    the program prints the words the user gave. <EM>Try the 
for repetition sentence here</EM>. Use an     <CODE>ArrayList</CODE> structure 
in your program. ArrayList is defined like this:</P>
<PRE class="sh_java">ArrayList&lt;String&gt; words = new ArrayList&lt;String&gt;();
    </PRE>
<PRE>Type a word: <FONT color="red">Mozart</FONT>
Type a word: <FONT color="red">Schubert</FONT>
Type a word: <FONT color="red">Bach</FONT>
Type a word: <FONT color="red">Sibelius</FONT>
Type a word: <FONT color="red">Liszt</FONT>
Type a word:
You typed the following words:
Mozart
Schubert
Bach
Sibelius
Liszt
    </PRE>
<P><B>Note:</B> an empty String can be detected this way:</P>
<PRE class="sh_java">String word = reader.nextLine();

if ( word.isEmpty() ) {  // could also be: word.equals("")
   // word was empty, meaning that the user only pressed enter
}
    </PRE></DIV>
<DIV class="tehtava">
<H3 class="req">Recurring word</H3>
<P>Create a program that asks the user to input words until the user gives the 
same word twice. Use    an <CODE>ArrayList</CODE> structure in your program. 
ArrayList is defined like this:</P>
<PRE class="sh_java">ArrayList&lt;String&gt; words = new ArrayList&lt;String&gt;();
    </PRE>
<PRE>Type a word: <FONT color="red">carrot</FONT>
Type a word: <FONT color="red">celery</FONT>
Type a word: <FONT color="red">turnip</FONT>
Type a word: <FONT color="red">rutabaga</FONT>
Type a word: <FONT color="red">celery</FONT>
You gave the word celery twice
    </PRE>
<P><B>Hint:</B> Remember that ArrayList has the method 
<CODE>.contains()</CODE></P></DIV></DIV>
<H3>Ordering, reversing and shuffling a list</H3>
<P>Items in an ArrayList are easy to order by size. Ordering by size means an 
alphabetic order when the list items are of type String. Ordering is done as 
follows:</P>
<PRE class="sh_java">public static void main(String[] args) {
    ArrayList&lt;String&gt; teachers = new ArrayList&lt;String&gt;();

    // ...

    Collections.sort(teachers);

    for (String teacher : teachers) {
        System.out.println( teacher );
    }
}
</PRE>
<P>Output:</P>
<PRE>Anthony
Barto
John
Martin
Matt
Paul
</PRE>
<P>We give the list as a parameter for the method <CODE>Collections.sort</CODE>. 
The import line <CODE>import java.util.Collections;</CODE> or <CODE>import 
java.util.*;</CODE> needs to be at the beginning of the program in order to get 
tools of Collections working in our program.</P>
<P>Collections also includes other useful methods:</P>
<UL>
  <LI><CODE>shuffle</CODE> shuffles the list items, can be useful for example in 
  games</LI>
  <LI><CODE>reverse</CODE> reverses the order of list items</LI></UL>
<DIV class="tehtavat">
<DIV class="tehtava">
<H3 class="req">Words in reverse order</H3>
<P>Create a program that asks the user to input words, until the user gives an 
empty string. Then    the program prints the words the user gave in reversed 
order, the last word is printed    first etc.</P>
<PRE>Type a word: <FONT color="red">Mozart</FONT>
Type a word: <FONT color="red">Schubert</FONT>
Type a word: <FONT color="red">Bach</FONT>
Type a word: <FONT color="red">Sibelius</FONT>
Type a word: <FONT color="red">Liszt</FONT>
Type a word:
You typed the following words:
Liszt
Sibelius
Bach
Schubert
Mozart
    </PRE></DIV>
<DIV class="tehtava">
<H3 class="req">Words in alphabetical order</H3>
<P>Create a similar program as the previous one, but in which the words are 
printed in alphabetical    order.</P>
<PRE>Type a word: <FONT color="red">Mozart</FONT>
Type a word: <FONT color="red">Schubert</FONT>
Type a word: <FONT color="red">Bach</FONT>
Type a word: <FONT color="red">Sibelius</FONT>
Type a word: <FONT color="red">Liszt</FONT>
Type a word:
You typed the following words:
Bach
Liszt
Mozart
Schubert
Sibelius
    </PRE></DIV></DIV>
<H3>ArrayList as a parameter for a method</H3>
<P>ArrayList can be given to a method as a parameter:</P>
<PRE class="sh_java">public static void print(ArrayList&lt;String&gt; list) {
    for (String word : list) {
        System.out.println( word );
    }
}

public static void main(String[] args) {
    ArrayList&lt;String&gt; list = new ArrayList&lt;String&gt;();
    list.add("Java");
    list.add("Python");
    list.add("Ruby");
    list.add("C++");

    print(list);
}
</PRE>
<P>The type of the parameter is defined as an ArrayList of String variables the 
same way a String ArrayList is defined:</P>
<P>Note that the name of the parameter can be anything:</P>
<PRE class="sh_java">public static void print(ArrayList&lt;String&gt; printed) {
    for (String word : printed) {
        System.out.println( word );
    }
}

public static void main(String[] args) {
    ArrayList&lt;String&gt; programmingLanguages = new ArrayList&lt;String&gt;();
    programmingLanguages.add("Java");
    programmingLanguages.add("Python");
    programmingLanguages.add("Ruby");
    programmingLanguages.add("C++");

    ArrayList&lt;String&gt; countries = new ArrayList&lt;String&gt;();
    countries.add("Finland");
    countries.add("Sweden");
    countries.add("Norway");

    print(programmingLanguages);    // method is given the list programmingLanguages
as a parameter

   print(countries);                 //  method is given the list countries as a parameter
}
</PRE>
<P>The program now includes two lists, <EM>programmingLanguages</EM> and 
<EM>countries</EM>. First the printing method is given the list 
<EM>programmingLanguages</EM>. The method <CODE>print</CODE> internally refers 
to the list given as a parameter with the name <EM>printed</EM>! Next, the 
printing method is given the list <EM>countries</EM>. Now, the method uses again 
the name <EM>printed</EM> referring to the parameter list.</P>
<DIV class="tehtavat">
<DIV class="tehtava">
<H3 class="req">Amount of items in a list</H3>
<P>Create the method <CODE>public static int countItems(ArrayList&lt;String&gt; 
list)</CODE> that    returns the number of the items in the list. Your method 
should not print anything. Use a     <CODE>return</CODE> statement to return the 
number as shown in the following example:</P>
<PRE class="sh_java">ArrayList&lt;String&gt; list = new ArrayList&lt;String&gt;();
list.add("Hallo");
list.add("Ciao");
list.add("Hello");
System.out.println("There are this many items in the list:");
System.out.println(countItems(list));
    </PRE>
<PRE>
There are this many items in the list:
3
    </PRE>
<P>Inside the method, it is possible to influence the items in the parameter 
list. In the following    example, the method <CODE>removeFirst</CODE> --as the 
name suggests-- removes the first string from    the list. What would happen if 
the list was empty?</P>
<PRE class="sh_java">public static void print(ArrayList&lt;String&gt; printed) {
    for (String word : printed) {
        System.out.println( word );
    }
}

public static void removeFirst(ArrayList&lt;String&gt; list) {
    list.remove(0);  // removes the first item (indexed 0)
}

public static void main(String[] args) {
    ArrayList&lt;String&gt; programmingLanguages = new ArrayList&lt;String&gt;();
    programmingLanguages.add("Pascal");
    programmingLanguages.add("Java");
    programmingLanguages.add("Python");
    programmingLanguages.add("Ruby");
    programmingLanguages.add("C++");

    print(programmingLanguages);

    removeFirst(programmingLanguages);

    System.out.println();  // prints an empty line

   print(programmingLanguages);
}
    </PRE>
<P>Output:</P>
<PRE>Pascal
Java
Python
Ruby
C++

Java
Python
Ruby
C++
    </PRE>
<P>Similarly a method could, for example, add more strings to the list it 
received as a parameter.</P></DIV>
<DIV class="tehtava">
<H3 class="req">Remove last</H3>
<P>Create the method <CODE>public static void removeLast(ArrayList&lt;String&gt; 
list)</CODE>, which    removes the last item from the list. Example code:</P>
<PRE class="sh_java">ArrayList&lt;String&gt; brothers = new ArrayList&lt;String&gt;();
brothers.add("Dick");
brothers.add("Henry");
brothers.add("Michael");
brothers.add("Bob");

System.out.println("brothers:");
System.out.println(brothers);

// sorting brothers
brothers.sort();

// removing the last item
removeLast(brothers);

System.out.println(brothers);
    </PRE>
<P>Example output:</P>
<PRE>brothers:
[Dick, Henry, Michael, Bob]
[Bob, Dick, Henry]
    </PRE></DIV>
<P>As we notice from the example above, an ArrayList can be printed as it is. 
The print formatting is  not usually what is sought after, so we are forced to 
handle the printing ourself. For example, with the help of the   
<CODE>for</CODE> command.</P></DIV>
<H3>Numbers in an ArrayList</H3>
<P>ArrayLists can be used to store any type of values. If the stored variables 
are of integer type, there are a couple of details to remember. An integer 
ArrayList is defined like this: <CODE>ArrayList&lt;Integer&gt;</CODE>, instead 
of writing <CODE>int</CODE> you must write <CODE>Integer</CODE>.</P>
<P>The method <CODE>remove</CODE> does not work like expected when the list 
consists of <CODE>int</CODE> numbers::</P>
<PRE class="sh_java">public static void main(String[] args) {
    ArrayList&lt;Integer&gt; numbers = new ArrayList&lt;Integer&gt;();

    numbers.add(4);
    numbers.add(8);

    // tries to remove the number from the index 4, does not work as expected!
    numbers.remove(4);

    // this removes the number 4 from the list
    numbers.remove(Integer.valueOf(4));
}
</PRE>
<P><CODE>numbers.remove(4)</CODE> tries to remove the item in the index 4 from 
the list. There are only 2 items in the list, so the command generates an error. 
We must use a slightly more complicated command if the number 4 needs to be 
removed: <CODE>numbers.remove( Integer.valueOf(4) );</CODE></P>
<P>ArrayLists can also be used to store <CODE>double</CODE>s (decimal numbers) 
and characters (<CODE>char</CODE> variables). The lists can be defined as 
follows:</P>
<PRE class="sh_java">
        ArrayList&lt;Double&gt; doubles = new ArrayList&lt;Double&gt;();
        ArrayList&lt;Character&gt; characters = new ArrayList&lt;Character&gt;();
</PRE>
<DIV class="tehtavat">
<DIV class="tehtava">
<H3 class="req">Sum of the numbers</H3>
<P>Create the method <CODE>sum</CODE>, which receives a list of numbers    
(<CODE>ArrayList&lt;Integer&gt;</CODE>) as a parameter and then calculates the 
sum of the items in    that list.</P>
<P>Create the method using the following program body:</P>
<PRE class="sh_java">public static int sum(ArrayList&lt;Integer&gt; list) {
    // write your code here
}

public static void main(String[] args) {
    ArrayList&lt;Integer&gt; list = new ArrayList&lt;Integer&gt;();
    list.add(3);
    list.add(2);
    list.add(7);
    list.add(2);

    System.out.println("The sum: " + sum(list));

    list.add(10);

    System.out.println("the sum: " + sum(list));
}
    </PRE>
<P>Program output:</P>
<PRE>
The sum: 14
The sum: 24
    </PRE></DIV>
<DIV class="tehtava">
<H3 class="req">Average of numbers</H3>
<P>Create the method <CODE>average</CODE>, which receives a list of numbers    
(<CODE>ArrayList&lt;Integer&gt;</CODE>) as a parameter and then calculates the 
average of the items    in that list.</P>
<P><B>Note:</B> the method should use the method <CODE>sum</CODE> from the 
previous exercise to    calculate the sum of the parameters.</P>
<P>Create the method using the following program body:</P>
<PRE class="sh_java">public static double average(ArrayList&lt;Integer&gt; list) {
    // write your code here
}

public static void main(String[] args) {
    ArrayList&lt;Integer&gt; list = new ArrayList&lt;Integer&gt;();
    list.add(3);
    list.add(2);
    list.add(7);
    list.add(2);

    System.out.println("The average is: " + average(list));
}
    </PRE>
<P>Program output:</P>
<PRE>
The average is: 3.5
    </PRE></DIV></DIV>
<H3>ArrayList as return value of a method</H3>
<P>ArrayList can also be returned from a method as a return value. In the next 
example, a method creates an ArrayList, adds three integers into the list and 
then returns the list. Pay attention to how the main program assigns the list 
returned by the method as a value into a variable that has the same type as the 
return value:</P>
<PRE class="sh_java">public class Main {

    public static ArrayList&lt;Integer&gt; addNumbersToList(int num1, int num2, int num3){
        ArrayList&lt;Integer&gt; list = new ArrayList&lt;Integer&gt;();

        list.add(num1);
        list.add(num2);
        list.add(num3);

        return list;
    }

    public static void main(String[] args) {
        ArrayList&lt;Integer&gt; numbers = addNumbersToList(3, 5, 2);

        for (int number : numbers) {
            System.out.println( number );
        }
    }
}
</PRE>
<DIV class="tehtavat">
<DIV class="tehtava">
<H3 class="req">The lengths of the Strings</H3>
<P>Create the method <CODE>lengths</CODE> that gets a list of String variables 
as a parameter and    returns an ArrayList that contains the lengths of the 
Strings in the same order as the original    list.</P>
<PRE class="sh_java">public static ArrayList&lt;Integer&gt; lengths(ArrayList&lt;String&gt; list) {
    // write your code here
}

public static void main(String[] args) {
    ArrayList&lt;String&gt; list = new ArrayList&lt;String&gt;();
    list.add("Hallo");
    list.add("Moi");
    list.add("Benvenuto!");
    list.add("badger badger badger badger");
    ArrayList&lt;Integer&gt; lengths = lengths(list);

    System.out.println("The lengths of the Strings: " + lengths);
}
    </PRE>
<P>Program output:</P>
<PRE>
The lengths of the Strings: [5, 3, 10, 27]
    </PRE></DIV>
<DIV class="tehtava">
<H3>The Greatest</H3>
<P>Create the method <CODE>greatest</CODE>, which receives a list of numbers    
(<CODE>ArrayList&lt;Integer&gt;</CODE>) as a parameter and then returns the 
greatest number in the list    as a return value.</P>
<PRE class="sh_java">public static int greatest(ArrayList&lt;Integer&gt; list) {
    // write your code here
}

public static void main(String[] args) {
    ArrayList&lt;Integer&gt; list = new ArrayList&lt;Integer&gt;();
    list.add(3);
    list.add(2);
    list.add(7);
    list.add(2);

    System.out.println("The greatest number is: " + greatest(list));
}
    </PRE>
<P>Program output:</P>
<PRE>
The greatest number is: 7
    </PRE></DIV>
<DIV class="tehtava">
<H3>Variance</H3>
<P>Create the method <CODE>variance</CODE>, which receives a list of integers as 
a parameter and then returns    the sample variance of that list. You can check 
how a sample variance is calculated in <A href="http://en.wikipedia.org/wiki/Variance#Population_variance_and_sample_variance">Wikipedia</A>, 
under    "Population variance and sample variance".</P>
<P><B>Note:</B> the method should use the method <CODE>average</CODE> of 
exercise 64 to calculate the    average of the parameters. The method should be 
called only once!</P>
<PRE class="sh_java">public static double variance(ArrayList&lt;Integer&gt; list) {
    // write your code here
}

public static void main(String[] args) {
    ArrayList&lt;Integer&gt; list = new ArrayList&lt;Integer&gt;();
    list.add(3);
    list.add(2);
    list.add(7);
    list.add(2);

    System.out.println("The variance is: " + variance(list));
}
    </PRE>
<P>Program output:</P>
<PRE>
The variance is: 5.666667
    </PRE>
<P>(The average of the numbers is 3.5, so the sample variance is ((3 - 3.5)² + 
(2 - 3.5)² + (7 - 3.5)²     + (2 - 3.5)²)/(4 - 1) ? 5,666667.)</P>
<P><STRONG>Note while testing your program!</STRONG> Sample variance for a list 
that    contains only one item is not defined! It causes a division by zero in 
the formula. Java considers    the result of division by zero as a <EM>Not a 
Number</EM> (<CODE>NaN</CODE>).</P></DIV></DIV>
<H2>Using truth values</H2>
<P>A variable of type truth value (<CODE>boolean</CODE>) can only have two 
values: either <EM>true</EM> or <EM>false</EM>). Here is an example on how to 
use boolean variables:</P>
<PRE class="sh_java">int num1 = 1;
int num2 = 5;

boolean firstGreater = true;

if (num1 &lt;= num2) {
    firstGreater = false;
}

if (firstGreater==true) {
    System.out.println("num1 is greater");
} else {
    System.out.println("num1 was not greater");
}
</PRE>
<P>First, we assign the truth value variable <CODE>firstGreater</CODE> the value 
<EM>true</EM>. The first if sentence checks whether <CODE>num1</CODE> is less or 
equal to <CODE>num2</CODE>. If it is, we change the value of firstGreater to 
<EM>false</EM>. The later if sentence selects which string to print based on the 
truth value.</P>
<P>As a matter of fact, using a truth value in a conditional sentence is easier 
than the description in the previous example. We can write the second if 
sentence as follows:</P>
<PRE class="sh_java">if (firstGreater) {  // means the same as firstGreater==true
    System.out.println("num1 was greater");
} else {
    System.out.println("num1 was not greater");
}
</PRE>
<P>If we want to check if the boolean variable holds the value true, we do not 
need to write <CODE>==true</CODE>, just writing the name of the variable is 
enough!</P>
<P>If we want to check if the boolean variable holds the value false, we can 
check that using the negation operation ! (exclamation mark):</P>
<PRE class="sh_java">if (!firstGreater) {  // means the same as firstGreater==false
    System.out.println("num1 was not greater");
} else {
    System.out.println("num1 was greater");
}
</PRE>
<H3>Methods that return a truth value</H3>
<P>Truth values come in especially handy when we want to write methods that 
check for validity. Let us create a method that checks if the list it gets as a 
parameter includes only positive numbers (here 0 is considered positive). The 
method returns the information as a boolean (i.e. truth value).</P>
<PRE class="sh_java">public static boolean allPositive(ArrayList&lt;Integer&gt; numbers) {
    boolean noNegative = true;

    for (int number : numbers) {
        if (number &lt; 0) {
            noNegative = false;
        }
    }

    // if one of the numbers on the list had a value that is below zero, noNegatives becomes false.

    return noNegative;
}
</PRE>
<P>The method has a boolean helper variable called <CODE>noNegative</CODE>. 
First we assign the helper variable the value true. The method checks all 
numbers on the list one by one. If at least one number is less than 0, we assign 
the helper variable the value false. In the end the method returns the value of 
the helper variable. If no negative numbers were found, it has the value true, 
otherwise it has the value false.</P>
<P>The method is used as follows:</P>
<PRE class="sh_java">public static void main(String[] args) {

    ArrayList&lt;Integer&gt; numbers = new ArrayList&lt;Integer&gt;();
    numbers.add(3);
    numbers.add(1);
    numbers.add(-1);

    boolean result = allPositive(numbers);

    if (result) {  // means the same as result == true
        System.out.println("all numbers are positive");
    } else {
        System.out.println("there is at least one negative number");
    }
}
</PRE>
<P>Usually it is not necessary to store the answer into a variable. We can write 
the method call directly as the condition:</P>
<PRE class="sh_java">ArrayList&lt;Integer&gt; numbers = new ArrayList&lt;Integer&gt;();
numbers.add(4);
numbers.add(7);
numbers.add(12);
numbers.add(9);

if (allPositive(numbers)) {
    System.out.println("all numbers are positive");
} else {
    System.out.println("there is at least one negative number");
}
</PRE>
<H3>The return command and ending a method</H3>
<P>The execution of a method is stopped immediately when a command called 
<CODE>return</CODE> is executed. Using this information to our advantage, we 
write the <CODE>allPositive</CODE> method easier to understand.</P>
<PRE class="sh_java">public static boolean allPositive(ArrayList&lt;Integer&gt; numbers) {
    for (int number : numbers) {
        if (number &lt; 0) {
            return false;
        }
    }

    // if the execution reached this far, no negative numbers were found
    // so we return true
    return true;
}
</PRE>
<P>When we are going through the list of numbers and we find a negative number, 
we can exit the method by returning false. If there are no negative numbers on 
the list, we get to the end and therefore can return the value true. We now got 
rid of the helper variable inside the method!</P>
<DIV class="tehtavat">
<DIV class="tehtava">
<H3 class="req">Is the number more than once in the list?</H3>
<P>Create the method <CODE>moreThanOnce</CODE> that gets a list of integers and 
an integer (i.e.    number) as parameter. If the number appears on the list 
<EM>more than once</EM> the method returns     <CODE>true</CODE> and otherwise 
<CODE>false</CODE>.</P>
<P>The program body is the following:</P>
<PRE class="sh_java">public static boolean moreThanOnce(ArrayList&lt;Integer&gt; list, int number) {
    // write your code here
}

public static void main(String[] args) {
    Scanner reader = new Scanner(System.in);

    ArrayList&lt;Integer&gt; list = new ArrayList&lt;Integer&gt;();
    list.add(3);
    list.add(2);
    list.add(7);
    list.add(2);

    System.out.println("Type a number: ");
    int number = Integer.parseInt(reader.nextLine());
    if (moreThanOnce(list, number)) {
        System.out.println(number + " appears more than once.");
    } else {
        System.out.println(number + " does not appear more than once.");
    }
}
    </PRE>
<PRE>
Type a number: <FONT color="red">2</FONT>
2  appears more than once
    </PRE>
<PRE>
Type a number: <FONT color="red">3</FONT>
3 does not appear more than once.
    </PRE></DIV>
<DIV class="tehtava">
<H3>Palindrome</H3>
<P>Create the method <CODE>palindrome</CODE> that checks if a string is a 
palindrome (reads    the same forward and backward).</P>
<P>The method can use the method <CODE>reverse</CODE> (<A href="http://mooc.cs.helsinki.fi/programming-part1/material-2013/week-3?noredirect=1#e56">from 
assignment number 56.      Reversing text</A>) as a helper. The method type is 
<CODE>boolean</CODE>, so it returns either     <CODE>true</CODE> (the string is 
a palindrome) or <CODE>false</CODE> (the string is not a    palindrome).</P>
<PRE class="sh_java">public static boolean palindrome(String text) {
    // write your code here
}

public static void main(String[] args) {
    Scanner reader = new Scanner(System.in);

    System.out.println("Type a text: ");
    String text = reader.nextLine();
    if (palindrome(text)) {
       System.out.println("The text is a palindrome!");
    } else {
       System.out.println("The text is not a palindrome!");
    }
}
    </PRE>
<P>Example outputs:</P>
<PRE>
Type a text: <FONT color="red">madam</FONT>
The text is a palindrome!
    </PRE>
<PRE>
Type a word: <FONT color="red">example</FONT>
The text is not a palindrome!
    </PRE></DIV></DIV></DIV></DIV></DIV><!-- /inner --> 
  </DIV><!-- /node-233 -->         </DIV></DIV><!-- /inner-inner -->	   </DIV><!-- /inner-wrapper --> 
    
<DIV class="corner-bottom">
<DIV class="corner-bottom-right corner"></DIV>
<DIV class="corner-bottom-left corner"></DIV></DIV></DIV><!-- /inner --> </DIV><!-- /block --> 
 </DIV></DIV></DIV></DIV></DIV></DIV></DIV><!-- /content-content -->             
                                                  </DIV><!-- /content-inner-inner --> 
                            </DIV><!-- /content-inner -->                        
   </DIV><!-- /content-region-inner -->                         </DIV><!-- /content-region --> 
                        
<DIV class="content-bottom row nested " id="content-bottom">
<DIV class="content-bottom-inner inner clearfix" id="content-bottom-inner">
<DIV class="block block-block odd first last grid16-16" id="block-block-1">
<DIV class="inner">
<DIV class="corner-top">
<DIV class="corner-top-right corner"></DIV>
<DIV class="corner-top-left corner"></DIV></DIV>
<DIV class="inner-wrapper">
<DIV class="inner-inner">
<DIV class="content clearfix">
<DIV id="header-top-block">
<P class="rtecenter">Ohjaus: <A href="http://mooc.fi/content/irc-ohjeet">IRCnet 
#mooc.fi </A>&nbsp;&nbsp; |  Tiedotus: <A href="http://twitter.com/mooc1"><IMG 
height="50" style="vertical-align: middle;" src="Method%20and%20ArrayList_files/twitter_newbird_blue.png"> 
Twitter </A><A href="http://www.facebook.com/Moocfi"><IMG height="30" style="padding: 10px; vertical-align: middle;" 
src="Method%20and%20ArrayList_files/f_logo-1.png"> Facebook</A>  |  
Virheraportit: <A href="http://sourceforge.net/p/mooc-issues/tickets/"><IMG 
height="30" style="padding: 10px; vertical-align: middle;" src="Method%20and%20ArrayList_files/sf-footer-logo.png"> 
SourceForge</A></P>
<P class="rtecenter"><A href="http://www.cs.helsinki.fi/"><IMG width="400" 
style="vertical-align: middle;" alt="Helsingin yliopiston tietojenkäsittelytieteen laitos" 
src="Method%20and%20ArrayList_files/CS-logo-MOOC.jpg">&nbsp; </A></P></DIV>
<SCRIPT>
  (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
  (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
  m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
  })(window,document,'script','//www.google-analytics.com/analytics.js','ga');
 
  ga('create', 'UA-47575342-3', 'auto');
  ga('send', 'pageview');
 
</SCRIPT>
        </DIV></DIV><!-- /inner-inner -->	   </DIV><!-- /inner-wrapper -->     
<DIV class="corner-bottom">
<DIV class="corner-bottom-right corner"></DIV>
<DIV class="corner-bottom-left corner"></DIV></DIV></DIV><!-- /inner --> </DIV><!-- /block --></DIV><!-- /content-bottom-inner --> 
</DIV><!-- /content-bottom -->                       </DIV><!-- /content-group-inner --> 
                    </DIV><!-- /content-group -->                                
       </DIV><!-- /main-content-inner -->                 </DIV><!-- /main-content --> 
                              </DIV><!-- /main-group-inner -->             
</DIV><!-- /main-group -->           </DIV><!-- /main-inner -->         </DIV><!-- /main --> 
      </DIV><!-- /main-wrapper -->       <!-- postscript-bottom row: width = grid_width --> 
            <!-- footer row: width = grid_width -->             <!-- footer-message row: width = grid_width --> 
      
<DIV class="footer-message-wrapper full-width" id="footer-message-wrapper">
<DIV class="footer-message row grid16-16" id="footer-message">
<DIV class="footer-message-inner inner clearfix" id="footer-message-inner">
<DIV class="footer-message-text block" id="footer-message-text">
<DIV class="footer-message-text-inner inner clearfix" id="footer-message-text-inner"><BR></DIV><!-- /footer-message-text-inner --> 
</DIV><!-- /footer-message-text -->                    </DIV><!-- /footer-message-inner --> 
        </DIV><!-- /footer-message -->       </DIV><!-- /footer-message-wrapper --> 
    <!-- /page-inner -->   <!-- /page -->   </BODY></HTML>
